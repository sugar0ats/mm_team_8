
mm_spring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d78  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004efc  08004efc  00005efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f14  08004f14  00006024  2**0
                  CONTENTS
  4 .ARM          00000008  08004f14  08004f14  00005f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f1c  08004f1c  00006024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f1c  08004f1c  00005f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f20  08004f20  00005f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08004f24  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000024  08004f48  00006024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08004f48  00006360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c373  00000000  00000000  0000604d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ab  00000000  00000000  000123c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00014770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000986  00000000  00000000  000153e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c74  00000000  00000000  00015d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f29f  00000000  00000000  000189e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba936  00000000  00000000  00027c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e25b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003570  00000000  00000000  000e25fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e5b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000024 	.word	0x20000024
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08004ee4 	.word	0x08004ee4

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000028 	.word	0x20000028
 80001c0:	08004ee4 	.word	0x08004ee4

080001c4 <__aeabi_drsub>:
 80001c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001c8:	e002      	b.n	80001d0 <__adddf3>
 80001ca:	bf00      	nop

080001cc <__aeabi_dsub>:
 80001cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d0 <__adddf3>:
 80001d0:	b530      	push	{r4, r5, lr}
 80001d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001da:	ea94 0f05 	teq	r4, r5
 80001de:	bf08      	it	eq
 80001e0:	ea90 0f02 	teqeq	r0, r2
 80001e4:	bf1f      	itttt	ne
 80001e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001f6:	f000 80e2 	beq.w	80003be <__adddf3+0x1ee>
 80001fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000202:	bfb8      	it	lt
 8000204:	426d      	neglt	r5, r5
 8000206:	dd0c      	ble.n	8000222 <__adddf3+0x52>
 8000208:	442c      	add	r4, r5
 800020a:	ea80 0202 	eor.w	r2, r0, r2
 800020e:	ea81 0303 	eor.w	r3, r1, r3
 8000212:	ea82 0000 	eor.w	r0, r2, r0
 8000216:	ea83 0101 	eor.w	r1, r3, r1
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	2d36      	cmp	r5, #54	@ 0x36
 8000224:	bf88      	it	hi
 8000226:	bd30      	pophi	{r4, r5, pc}
 8000228:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800022c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000230:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000234:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000238:	d002      	beq.n	8000240 <__adddf3+0x70>
 800023a:	4240      	negs	r0, r0
 800023c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000240:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000244:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000248:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x84>
 800024e:	4252      	negs	r2, r2
 8000250:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000254:	ea94 0f05 	teq	r4, r5
 8000258:	f000 80a7 	beq.w	80003aa <__adddf3+0x1da>
 800025c:	f1a4 0401 	sub.w	r4, r4, #1
 8000260:	f1d5 0e20 	rsbs	lr, r5, #32
 8000264:	db0d      	blt.n	8000282 <__adddf3+0xb2>
 8000266:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026a:	fa22 f205 	lsr.w	r2, r2, r5
 800026e:	1880      	adds	r0, r0, r2
 8000270:	f141 0100 	adc.w	r1, r1, #0
 8000274:	fa03 f20e 	lsl.w	r2, r3, lr
 8000278:	1880      	adds	r0, r0, r2
 800027a:	fa43 f305 	asr.w	r3, r3, r5
 800027e:	4159      	adcs	r1, r3
 8000280:	e00e      	b.n	80002a0 <__adddf3+0xd0>
 8000282:	f1a5 0520 	sub.w	r5, r5, #32
 8000286:	f10e 0e20 	add.w	lr, lr, #32
 800028a:	2a01      	cmp	r2, #1
 800028c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000290:	bf28      	it	cs
 8000292:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a4:	d507      	bpl.n	80002b6 <__adddf3+0xe6>
 80002a6:	f04f 0e00 	mov.w	lr, #0
 80002aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ba:	d31b      	bcc.n	80002f4 <__adddf3+0x124>
 80002bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c0:	d30c      	bcc.n	80002dc <__adddf3+0x10c>
 80002c2:	0849      	lsrs	r1, r1, #1
 80002c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002cc:	f104 0401 	add.w	r4, r4, #1
 80002d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002d8:	f080 809a 	bcs.w	8000410 <__adddf3+0x240>
 80002dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e0:	bf08      	it	eq
 80002e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002e6:	f150 0000 	adcs.w	r0, r0, #0
 80002ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ee:	ea41 0105 	orr.w	r1, r1, r5
 80002f2:	bd30      	pop	{r4, r5, pc}
 80002f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002f8:	4140      	adcs	r0, r0
 80002fa:	eb41 0101 	adc.w	r1, r1, r1
 80002fe:	3c01      	subs	r4, #1
 8000300:	bf28      	it	cs
 8000302:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000306:	d2e9      	bcs.n	80002dc <__adddf3+0x10c>
 8000308:	f091 0f00 	teq	r1, #0
 800030c:	bf04      	itt	eq
 800030e:	4601      	moveq	r1, r0
 8000310:	2000      	moveq	r0, #0
 8000312:	fab1 f381 	clz	r3, r1
 8000316:	bf08      	it	eq
 8000318:	3320      	addeq	r3, #32
 800031a:	f1a3 030b 	sub.w	r3, r3, #11
 800031e:	f1b3 0220 	subs.w	r2, r3, #32
 8000322:	da0c      	bge.n	800033e <__adddf3+0x16e>
 8000324:	320c      	adds	r2, #12
 8000326:	dd08      	ble.n	800033a <__adddf3+0x16a>
 8000328:	f102 0c14 	add.w	ip, r2, #20
 800032c:	f1c2 020c 	rsb	r2, r2, #12
 8000330:	fa01 f00c 	lsl.w	r0, r1, ip
 8000334:	fa21 f102 	lsr.w	r1, r1, r2
 8000338:	e00c      	b.n	8000354 <__adddf3+0x184>
 800033a:	f102 0214 	add.w	r2, r2, #20
 800033e:	bfd8      	it	le
 8000340:	f1c2 0c20 	rsble	ip, r2, #32
 8000344:	fa01 f102 	lsl.w	r1, r1, r2
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	bfdc      	itt	le
 800034e:	ea41 010c 	orrle.w	r1, r1, ip
 8000352:	4090      	lslle	r0, r2
 8000354:	1ae4      	subs	r4, r4, r3
 8000356:	bfa2      	ittt	ge
 8000358:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800035c:	4329      	orrge	r1, r5
 800035e:	bd30      	popge	{r4, r5, pc}
 8000360:	ea6f 0404 	mvn.w	r4, r4
 8000364:	3c1f      	subs	r4, #31
 8000366:	da1c      	bge.n	80003a2 <__adddf3+0x1d2>
 8000368:	340c      	adds	r4, #12
 800036a:	dc0e      	bgt.n	800038a <__adddf3+0x1ba>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0220 	rsb	r2, r4, #32
 8000374:	fa20 f004 	lsr.w	r0, r0, r4
 8000378:	fa01 f302 	lsl.w	r3, r1, r2
 800037c:	ea40 0003 	orr.w	r0, r0, r3
 8000380:	fa21 f304 	lsr.w	r3, r1, r4
 8000384:	ea45 0103 	orr.w	r1, r5, r3
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f1c4 040c 	rsb	r4, r4, #12
 800038e:	f1c4 0220 	rsb	r2, r4, #32
 8000392:	fa20 f002 	lsr.w	r0, r0, r2
 8000396:	fa01 f304 	lsl.w	r3, r1, r4
 800039a:	ea40 0003 	orr.w	r0, r0, r3
 800039e:	4629      	mov	r1, r5
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	fa21 f004 	lsr.w	r0, r1, r4
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f094 0f00 	teq	r4, #0
 80003ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b2:	bf06      	itte	eq
 80003b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003b8:	3401      	addeq	r4, #1
 80003ba:	3d01      	subne	r5, #1
 80003bc:	e74e      	b.n	800025c <__adddf3+0x8c>
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf18      	it	ne
 80003c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c8:	d029      	beq.n	800041e <__adddf3+0x24e>
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	d005      	beq.n	80003e2 <__adddf3+0x212>
 80003d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003da:	bf04      	itt	eq
 80003dc:	4619      	moveq	r1, r3
 80003de:	4610      	moveq	r0, r2
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea91 0f03 	teq	r1, r3
 80003e6:	bf1e      	ittt	ne
 80003e8:	2100      	movne	r1, #0
 80003ea:	2000      	movne	r0, #0
 80003ec:	bd30      	popne	{r4, r5, pc}
 80003ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f2:	d105      	bne.n	8000400 <__adddf3+0x230>
 80003f4:	0040      	lsls	r0, r0, #1
 80003f6:	4149      	adcs	r1, r1
 80003f8:	bf28      	it	cs
 80003fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000404:	bf3c      	itt	cc
 8000406:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040a:	bd30      	popcc	{r4, r5, pc}
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000410:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000414:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000422:	bf1a      	itte	ne
 8000424:	4619      	movne	r1, r3
 8000426:	4610      	movne	r0, r2
 8000428:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800042c:	bf1c      	itt	ne
 800042e:	460b      	movne	r3, r1
 8000430:	4602      	movne	r2, r0
 8000432:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000436:	bf06      	itte	eq
 8000438:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800043c:	ea91 0f03 	teqeq	r1, r3
 8000440:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	bf00      	nop

08000448 <__aeabi_ui2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800045c:	f04f 0500 	mov.w	r5, #0
 8000460:	f04f 0100 	mov.w	r1, #0
 8000464:	e750      	b.n	8000308 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_i2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800047c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000480:	bf48      	it	mi
 8000482:	4240      	negmi	r0, r0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e73e      	b.n	8000308 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_f2d>:
 800048c:	0042      	lsls	r2, r0, #1
 800048e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000492:	ea4f 0131 	mov.w	r1, r1, rrx
 8000496:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049a:	bf1f      	itttt	ne
 800049c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004a8:	4770      	bxne	lr
 80004aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ae:	bf08      	it	eq
 80004b0:	4770      	bxeq	lr
 80004b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004b6:	bf04      	itt	eq
 80004b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	e71c      	b.n	8000308 <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_ul2d>:
 80004d0:	ea50 0201 	orrs.w	r2, r0, r1
 80004d4:	bf08      	it	eq
 80004d6:	4770      	bxeq	lr
 80004d8:	b530      	push	{r4, r5, lr}
 80004da:	f04f 0500 	mov.w	r5, #0
 80004de:	e00a      	b.n	80004f6 <__aeabi_l2d+0x16>

080004e0 <__aeabi_l2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ee:	d502      	bpl.n	80004f6 <__aeabi_l2d+0x16>
 80004f0:	4240      	negs	r0, r0
 80004f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000502:	f43f aed8 	beq.w	80002b6 <__adddf3+0xe6>
 8000506:	f04f 0203 	mov.w	r2, #3
 800050a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050e:	bf18      	it	ne
 8000510:	3203      	addne	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	fa00 fc03 	lsl.w	ip, r0, r3
 8000526:	fa20 f002 	lsr.w	r0, r0, r2
 800052a:	fa01 fe03 	lsl.w	lr, r1, r3
 800052e:	ea40 000e 	orr.w	r0, r0, lr
 8000532:	fa21 f102 	lsr.w	r1, r1, r2
 8000536:	4414      	add	r4, r2
 8000538:	e6bd      	b.n	80002b6 <__adddf3+0xe6>
 800053a:	bf00      	nop

0800053c <__gedf2>:
 800053c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000540:	e006      	b.n	8000550 <__cmpdf2+0x4>
 8000542:	bf00      	nop

08000544 <__ledf2>:
 8000544:	f04f 0c01 	mov.w	ip, #1
 8000548:	e002      	b.n	8000550 <__cmpdf2+0x4>
 800054a:	bf00      	nop

0800054c <__cmpdf2>:
 800054c:	f04f 0c01 	mov.w	ip, #1
 8000550:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000554:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000558:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800055c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000560:	bf18      	it	ne
 8000562:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000566:	d01b      	beq.n	80005a0 <__cmpdf2+0x54>
 8000568:	b001      	add	sp, #4
 800056a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800056e:	bf0c      	ite	eq
 8000570:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000574:	ea91 0f03 	teqne	r1, r3
 8000578:	bf02      	ittt	eq
 800057a:	ea90 0f02 	teqeq	r0, r2
 800057e:	2000      	moveq	r0, #0
 8000580:	4770      	bxeq	lr
 8000582:	f110 0f00 	cmn.w	r0, #0
 8000586:	ea91 0f03 	teq	r1, r3
 800058a:	bf58      	it	pl
 800058c:	4299      	cmppl	r1, r3
 800058e:	bf08      	it	eq
 8000590:	4290      	cmpeq	r0, r2
 8000592:	bf2c      	ite	cs
 8000594:	17d8      	asrcs	r0, r3, #31
 8000596:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059a:	f040 0001 	orr.w	r0, r0, #1
 800059e:	4770      	bx	lr
 80005a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005a8:	d102      	bne.n	80005b0 <__cmpdf2+0x64>
 80005aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005ae:	d107      	bne.n	80005c0 <__cmpdf2+0x74>
 80005b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b8:	d1d6      	bne.n	8000568 <__cmpdf2+0x1c>
 80005ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005be:	d0d3      	beq.n	8000568 <__cmpdf2+0x1c>
 80005c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <__aeabi_cdrcmple>:
 80005c8:	4684      	mov	ip, r0
 80005ca:	4610      	mov	r0, r2
 80005cc:	4662      	mov	r2, ip
 80005ce:	468c      	mov	ip, r1
 80005d0:	4619      	mov	r1, r3
 80005d2:	4663      	mov	r3, ip
 80005d4:	e000      	b.n	80005d8 <__aeabi_cdcmpeq>
 80005d6:	bf00      	nop

080005d8 <__aeabi_cdcmpeq>:
 80005d8:	b501      	push	{r0, lr}
 80005da:	f7ff ffb7 	bl	800054c <__cmpdf2>
 80005de:	2800      	cmp	r0, #0
 80005e0:	bf48      	it	mi
 80005e2:	f110 0f00 	cmnmi.w	r0, #0
 80005e6:	bd01      	pop	{r0, pc}

080005e8 <__aeabi_dcmpeq>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff fff4 	bl	80005d8 <__aeabi_cdcmpeq>
 80005f0:	bf0c      	ite	eq
 80005f2:	2001      	moveq	r0, #1
 80005f4:	2000      	movne	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmplt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffea 	bl	80005d8 <__aeabi_cdcmpeq>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_dcmple>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff ffe0 	bl	80005d8 <__aeabi_cdcmpeq>
 8000618:	bf94      	ite	ls
 800061a:	2001      	movls	r0, #1
 800061c:	2000      	movhi	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmpge>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffce 	bl	80005c8 <__aeabi_cdrcmple>
 800062c:	bf94      	ite	ls
 800062e:	2001      	movls	r0, #1
 8000630:	2000      	movhi	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmpgt>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffc4 	bl	80005c8 <__aeabi_cdrcmple>
 8000640:	bf34      	ite	cc
 8000642:	2001      	movcc	r0, #1
 8000644:	2000      	movcs	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_frsub>:
 800064c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000650:	e002      	b.n	8000658 <__addsf3>
 8000652:	bf00      	nop

08000654 <__aeabi_fsub>:
 8000654:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000658 <__addsf3>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	bf1f      	itttt	ne
 800065c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000660:	ea92 0f03 	teqne	r2, r3
 8000664:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000668:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800066c:	d06a      	beq.n	8000744 <__addsf3+0xec>
 800066e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000672:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000676:	bfc1      	itttt	gt
 8000678:	18d2      	addgt	r2, r2, r3
 800067a:	4041      	eorgt	r1, r0
 800067c:	4048      	eorgt	r0, r1
 800067e:	4041      	eorgt	r1, r0
 8000680:	bfb8      	it	lt
 8000682:	425b      	neglt	r3, r3
 8000684:	2b19      	cmp	r3, #25
 8000686:	bf88      	it	hi
 8000688:	4770      	bxhi	lr
 800068a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800068e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000692:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000696:	bf18      	it	ne
 8000698:	4240      	negne	r0, r0
 800069a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800069e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006a6:	bf18      	it	ne
 80006a8:	4249      	negne	r1, r1
 80006aa:	ea92 0f03 	teq	r2, r3
 80006ae:	d03f      	beq.n	8000730 <__addsf3+0xd8>
 80006b0:	f1a2 0201 	sub.w	r2, r2, #1
 80006b4:	fa41 fc03 	asr.w	ip, r1, r3
 80006b8:	eb10 000c 	adds.w	r0, r0, ip
 80006bc:	f1c3 0320 	rsb	r3, r3, #32
 80006c0:	fa01 f103 	lsl.w	r1, r1, r3
 80006c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006c8:	d502      	bpl.n	80006d0 <__addsf3+0x78>
 80006ca:	4249      	negs	r1, r1
 80006cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006d4:	d313      	bcc.n	80006fe <__addsf3+0xa6>
 80006d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006da:	d306      	bcc.n	80006ea <__addsf3+0x92>
 80006dc:	0840      	lsrs	r0, r0, #1
 80006de:	ea4f 0131 	mov.w	r1, r1, rrx
 80006e2:	f102 0201 	add.w	r2, r2, #1
 80006e6:	2afe      	cmp	r2, #254	@ 0xfe
 80006e8:	d251      	bcs.n	800078e <__addsf3+0x136>
 80006ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80006ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006f2:	bf08      	it	eq
 80006f4:	f020 0001 	biceq.w	r0, r0, #1
 80006f8:	ea40 0003 	orr.w	r0, r0, r3
 80006fc:	4770      	bx	lr
 80006fe:	0049      	lsls	r1, r1, #1
 8000700:	eb40 0000 	adc.w	r0, r0, r0
 8000704:	3a01      	subs	r2, #1
 8000706:	bf28      	it	cs
 8000708:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800070c:	d2ed      	bcs.n	80006ea <__addsf3+0x92>
 800070e:	fab0 fc80 	clz	ip, r0
 8000712:	f1ac 0c08 	sub.w	ip, ip, #8
 8000716:	ebb2 020c 	subs.w	r2, r2, ip
 800071a:	fa00 f00c 	lsl.w	r0, r0, ip
 800071e:	bfaa      	itet	ge
 8000720:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000724:	4252      	neglt	r2, r2
 8000726:	4318      	orrge	r0, r3
 8000728:	bfbc      	itt	lt
 800072a:	40d0      	lsrlt	r0, r2
 800072c:	4318      	orrlt	r0, r3
 800072e:	4770      	bx	lr
 8000730:	f092 0f00 	teq	r2, #0
 8000734:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000738:	bf06      	itte	eq
 800073a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800073e:	3201      	addeq	r2, #1
 8000740:	3b01      	subne	r3, #1
 8000742:	e7b5      	b.n	80006b0 <__addsf3+0x58>
 8000744:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000748:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800074c:	bf18      	it	ne
 800074e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000752:	d021      	beq.n	8000798 <__addsf3+0x140>
 8000754:	ea92 0f03 	teq	r2, r3
 8000758:	d004      	beq.n	8000764 <__addsf3+0x10c>
 800075a:	f092 0f00 	teq	r2, #0
 800075e:	bf08      	it	eq
 8000760:	4608      	moveq	r0, r1
 8000762:	4770      	bx	lr
 8000764:	ea90 0f01 	teq	r0, r1
 8000768:	bf1c      	itt	ne
 800076a:	2000      	movne	r0, #0
 800076c:	4770      	bxne	lr
 800076e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000772:	d104      	bne.n	800077e <__addsf3+0x126>
 8000774:	0040      	lsls	r0, r0, #1
 8000776:	bf28      	it	cs
 8000778:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800077c:	4770      	bx	lr
 800077e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000782:	bf3c      	itt	cc
 8000784:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000788:	4770      	bxcc	lr
 800078a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800078e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000792:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000796:	4770      	bx	lr
 8000798:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800079c:	bf16      	itet	ne
 800079e:	4608      	movne	r0, r1
 80007a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007a4:	4601      	movne	r1, r0
 80007a6:	0242      	lsls	r2, r0, #9
 80007a8:	bf06      	itte	eq
 80007aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ae:	ea90 0f01 	teqeq	r0, r1
 80007b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007b6:	4770      	bx	lr

080007b8 <__aeabi_ui2f>:
 80007b8:	f04f 0300 	mov.w	r3, #0
 80007bc:	e004      	b.n	80007c8 <__aeabi_i2f+0x8>
 80007be:	bf00      	nop

080007c0 <__aeabi_i2f>:
 80007c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007c4:	bf48      	it	mi
 80007c6:	4240      	negmi	r0, r0
 80007c8:	ea5f 0c00 	movs.w	ip, r0
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007d4:	4601      	mov	r1, r0
 80007d6:	f04f 0000 	mov.w	r0, #0
 80007da:	e01c      	b.n	8000816 <__aeabi_l2f+0x2a>

080007dc <__aeabi_ul2f>:
 80007dc:	ea50 0201 	orrs.w	r2, r0, r1
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e00a      	b.n	8000800 <__aeabi_l2f+0x14>
 80007ea:	bf00      	nop

080007ec <__aeabi_l2f>:
 80007ec:	ea50 0201 	orrs.w	r2, r0, r1
 80007f0:	bf08      	it	eq
 80007f2:	4770      	bxeq	lr
 80007f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80007f8:	d502      	bpl.n	8000800 <__aeabi_l2f+0x14>
 80007fa:	4240      	negs	r0, r0
 80007fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000800:	ea5f 0c01 	movs.w	ip, r1
 8000804:	bf02      	ittt	eq
 8000806:	4684      	moveq	ip, r0
 8000808:	4601      	moveq	r1, r0
 800080a:	2000      	moveq	r0, #0
 800080c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000810:	bf08      	it	eq
 8000812:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000816:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800081a:	fabc f28c 	clz	r2, ip
 800081e:	3a08      	subs	r2, #8
 8000820:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000824:	db10      	blt.n	8000848 <__aeabi_l2f+0x5c>
 8000826:	fa01 fc02 	lsl.w	ip, r1, r2
 800082a:	4463      	add	r3, ip
 800082c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000830:	f1c2 0220 	rsb	r2, r2, #32
 8000834:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000838:	fa20 f202 	lsr.w	r2, r0, r2
 800083c:	eb43 0002 	adc.w	r0, r3, r2
 8000840:	bf08      	it	eq
 8000842:	f020 0001 	biceq.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	f102 0220 	add.w	r2, r2, #32
 800084c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000850:	f1c2 0220 	rsb	r2, r2, #32
 8000854:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000858:	fa21 f202 	lsr.w	r2, r1, r2
 800085c:	eb43 0002 	adc.w	r0, r3, r2
 8000860:	bf08      	it	eq
 8000862:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000866:	4770      	bx	lr

08000868 <__aeabi_fmul>:
 8000868:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800086c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000870:	bf1e      	ittt	ne
 8000872:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000876:	ea92 0f0c 	teqne	r2, ip
 800087a:	ea93 0f0c 	teqne	r3, ip
 800087e:	d06f      	beq.n	8000960 <__aeabi_fmul+0xf8>
 8000880:	441a      	add	r2, r3
 8000882:	ea80 0c01 	eor.w	ip, r0, r1
 8000886:	0240      	lsls	r0, r0, #9
 8000888:	bf18      	it	ne
 800088a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800088e:	d01e      	beq.n	80008ce <__aeabi_fmul+0x66>
 8000890:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000894:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000898:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800089c:	fba0 3101 	umull	r3, r1, r0, r1
 80008a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80008a8:	bf3e      	ittt	cc
 80008aa:	0049      	lslcc	r1, r1, #1
 80008ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008b0:	005b      	lslcc	r3, r3, #1
 80008b2:	ea40 0001 	orr.w	r0, r0, r1
 80008b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008ba:	2afd      	cmp	r2, #253	@ 0xfd
 80008bc:	d81d      	bhi.n	80008fa <__aeabi_fmul+0x92>
 80008be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008c6:	bf08      	it	eq
 80008c8:	f020 0001 	biceq.w	r0, r0, #1
 80008cc:	4770      	bx	lr
 80008ce:	f090 0f00 	teq	r0, #0
 80008d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008d6:	bf08      	it	eq
 80008d8:	0249      	lsleq	r1, r1, #9
 80008da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008e2:	3a7f      	subs	r2, #127	@ 0x7f
 80008e4:	bfc2      	ittt	gt
 80008e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ee:	4770      	bxgt	lr
 80008f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	3a01      	subs	r2, #1
 80008fa:	dc5d      	bgt.n	80009b8 <__aeabi_fmul+0x150>
 80008fc:	f112 0f19 	cmn.w	r2, #25
 8000900:	bfdc      	itt	le
 8000902:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000906:	4770      	bxle	lr
 8000908:	f1c2 0200 	rsb	r2, r2, #0
 800090c:	0041      	lsls	r1, r0, #1
 800090e:	fa21 f102 	lsr.w	r1, r1, r2
 8000912:	f1c2 0220 	rsb	r2, r2, #32
 8000916:	fa00 fc02 	lsl.w	ip, r0, r2
 800091a:	ea5f 0031 	movs.w	r0, r1, rrx
 800091e:	f140 0000 	adc.w	r0, r0, #0
 8000922:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000926:	bf08      	it	eq
 8000928:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800092c:	4770      	bx	lr
 800092e:	f092 0f00 	teq	r2, #0
 8000932:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000936:	bf02      	ittt	eq
 8000938:	0040      	lsleq	r0, r0, #1
 800093a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800093e:	3a01      	subeq	r2, #1
 8000940:	d0f9      	beq.n	8000936 <__aeabi_fmul+0xce>
 8000942:	ea40 000c 	orr.w	r0, r0, ip
 8000946:	f093 0f00 	teq	r3, #0
 800094a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800094e:	bf02      	ittt	eq
 8000950:	0049      	lsleq	r1, r1, #1
 8000952:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000956:	3b01      	subeq	r3, #1
 8000958:	d0f9      	beq.n	800094e <__aeabi_fmul+0xe6>
 800095a:	ea41 010c 	orr.w	r1, r1, ip
 800095e:	e78f      	b.n	8000880 <__aeabi_fmul+0x18>
 8000960:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000964:	ea92 0f0c 	teq	r2, ip
 8000968:	bf18      	it	ne
 800096a:	ea93 0f0c 	teqne	r3, ip
 800096e:	d00a      	beq.n	8000986 <__aeabi_fmul+0x11e>
 8000970:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000974:	bf18      	it	ne
 8000976:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800097a:	d1d8      	bne.n	800092e <__aeabi_fmul+0xc6>
 800097c:	ea80 0001 	eor.w	r0, r0, r1
 8000980:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000984:	4770      	bx	lr
 8000986:	f090 0f00 	teq	r0, #0
 800098a:	bf17      	itett	ne
 800098c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000990:	4608      	moveq	r0, r1
 8000992:	f091 0f00 	teqne	r1, #0
 8000996:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800099a:	d014      	beq.n	80009c6 <__aeabi_fmul+0x15e>
 800099c:	ea92 0f0c 	teq	r2, ip
 80009a0:	d101      	bne.n	80009a6 <__aeabi_fmul+0x13e>
 80009a2:	0242      	lsls	r2, r0, #9
 80009a4:	d10f      	bne.n	80009c6 <__aeabi_fmul+0x15e>
 80009a6:	ea93 0f0c 	teq	r3, ip
 80009aa:	d103      	bne.n	80009b4 <__aeabi_fmul+0x14c>
 80009ac:	024b      	lsls	r3, r1, #9
 80009ae:	bf18      	it	ne
 80009b0:	4608      	movne	r0, r1
 80009b2:	d108      	bne.n	80009c6 <__aeabi_fmul+0x15e>
 80009b4:	ea80 0001 	eor.w	r0, r0, r1
 80009b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c4:	4770      	bx	lr
 80009c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009ce:	4770      	bx	lr

080009d0 <__aeabi_fdiv>:
 80009d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009d8:	bf1e      	ittt	ne
 80009da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009de:	ea92 0f0c 	teqne	r2, ip
 80009e2:	ea93 0f0c 	teqne	r3, ip
 80009e6:	d069      	beq.n	8000abc <__aeabi_fdiv+0xec>
 80009e8:	eba2 0203 	sub.w	r2, r2, r3
 80009ec:	ea80 0c01 	eor.w	ip, r0, r1
 80009f0:	0249      	lsls	r1, r1, #9
 80009f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009f6:	d037      	beq.n	8000a68 <__aeabi_fdiv+0x98>
 80009f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a04:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a08:	428b      	cmp	r3, r1
 8000a0a:	bf38      	it	cc
 8000a0c:	005b      	lslcc	r3, r3, #1
 8000a0e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a12:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a16:	428b      	cmp	r3, r1
 8000a18:	bf24      	itt	cs
 8000a1a:	1a5b      	subcs	r3, r3, r1
 8000a1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a24:	bf24      	itt	cs
 8000a26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a32:	bf24      	itt	cs
 8000a34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a40:	bf24      	itt	cs
 8000a42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	bf18      	it	ne
 8000a4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a52:	d1e0      	bne.n	8000a16 <__aeabi_fdiv+0x46>
 8000a54:	2afd      	cmp	r2, #253	@ 0xfd
 8000a56:	f63f af50 	bhi.w	80008fa <__aeabi_fmul+0x92>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a70:	327f      	adds	r2, #127	@ 0x7f
 8000a72:	bfc2      	ittt	gt
 8000a74:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a7c:	4770      	bxgt	lr
 8000a7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a82:	f04f 0300 	mov.w	r3, #0
 8000a86:	3a01      	subs	r2, #1
 8000a88:	e737      	b.n	80008fa <__aeabi_fmul+0x92>
 8000a8a:	f092 0f00 	teq	r2, #0
 8000a8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a92:	bf02      	ittt	eq
 8000a94:	0040      	lsleq	r0, r0, #1
 8000a96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a9a:	3a01      	subeq	r2, #1
 8000a9c:	d0f9      	beq.n	8000a92 <__aeabi_fdiv+0xc2>
 8000a9e:	ea40 000c 	orr.w	r0, r0, ip
 8000aa2:	f093 0f00 	teq	r3, #0
 8000aa6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aaa:	bf02      	ittt	eq
 8000aac:	0049      	lsleq	r1, r1, #1
 8000aae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ab2:	3b01      	subeq	r3, #1
 8000ab4:	d0f9      	beq.n	8000aaa <__aeabi_fdiv+0xda>
 8000ab6:	ea41 010c 	orr.w	r1, r1, ip
 8000aba:	e795      	b.n	80009e8 <__aeabi_fdiv+0x18>
 8000abc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ac0:	ea92 0f0c 	teq	r2, ip
 8000ac4:	d108      	bne.n	8000ad8 <__aeabi_fdiv+0x108>
 8000ac6:	0242      	lsls	r2, r0, #9
 8000ac8:	f47f af7d 	bne.w	80009c6 <__aeabi_fmul+0x15e>
 8000acc:	ea93 0f0c 	teq	r3, ip
 8000ad0:	f47f af70 	bne.w	80009b4 <__aeabi_fmul+0x14c>
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	e776      	b.n	80009c6 <__aeabi_fmul+0x15e>
 8000ad8:	ea93 0f0c 	teq	r3, ip
 8000adc:	d104      	bne.n	8000ae8 <__aeabi_fdiv+0x118>
 8000ade:	024b      	lsls	r3, r1, #9
 8000ae0:	f43f af4c 	beq.w	800097c <__aeabi_fmul+0x114>
 8000ae4:	4608      	mov	r0, r1
 8000ae6:	e76e      	b.n	80009c6 <__aeabi_fmul+0x15e>
 8000ae8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000aec:	bf18      	it	ne
 8000aee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000af2:	d1ca      	bne.n	8000a8a <__aeabi_fdiv+0xba>
 8000af4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000af8:	f47f af5c 	bne.w	80009b4 <__aeabi_fmul+0x14c>
 8000afc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000b00:	f47f af3c 	bne.w	800097c <__aeabi_fmul+0x114>
 8000b04:	e75f      	b.n	80009c6 <__aeabi_fmul+0x15e>
 8000b06:	bf00      	nop

08000b08 <__gesf2>:
 8000b08:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000b0c:	e006      	b.n	8000b1c <__cmpsf2+0x4>
 8000b0e:	bf00      	nop

08000b10 <__lesf2>:
 8000b10:	f04f 0c01 	mov.w	ip, #1
 8000b14:	e002      	b.n	8000b1c <__cmpsf2+0x4>
 8000b16:	bf00      	nop

08000b18 <__cmpsf2>:
 8000b18:	f04f 0c01 	mov.w	ip, #1
 8000b1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b2c:	bf18      	it	ne
 8000b2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b32:	d011      	beq.n	8000b58 <__cmpsf2+0x40>
 8000b34:	b001      	add	sp, #4
 8000b36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b3a:	bf18      	it	ne
 8000b3c:	ea90 0f01 	teqne	r0, r1
 8000b40:	bf58      	it	pl
 8000b42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b46:	bf88      	it	hi
 8000b48:	17c8      	asrhi	r0, r1, #31
 8000b4a:	bf38      	it	cc
 8000b4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b50:	bf18      	it	ne
 8000b52:	f040 0001 	orrne.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b5c:	d102      	bne.n	8000b64 <__cmpsf2+0x4c>
 8000b5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b62:	d105      	bne.n	8000b70 <__cmpsf2+0x58>
 8000b64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b68:	d1e4      	bne.n	8000b34 <__cmpsf2+0x1c>
 8000b6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b6e:	d0e1      	beq.n	8000b34 <__cmpsf2+0x1c>
 8000b70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_cfrcmple>:
 8000b78:	4684      	mov	ip, r0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	4661      	mov	r1, ip
 8000b7e:	e7ff      	b.n	8000b80 <__aeabi_cfcmpeq>

08000b80 <__aeabi_cfcmpeq>:
 8000b80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b82:	f7ff ffc9 	bl	8000b18 <__cmpsf2>
 8000b86:	2800      	cmp	r0, #0
 8000b88:	bf48      	it	mi
 8000b8a:	f110 0f00 	cmnmi.w	r0, #0
 8000b8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b90 <__aeabi_fcmpeq>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff fff4 	bl	8000b80 <__aeabi_cfcmpeq>
 8000b98:	bf0c      	ite	eq
 8000b9a:	2001      	moveq	r0, #1
 8000b9c:	2000      	movne	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_fcmplt>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffea 	bl	8000b80 <__aeabi_cfcmpeq>
 8000bac:	bf34      	ite	cc
 8000bae:	2001      	movcc	r0, #1
 8000bb0:	2000      	movcs	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fcmple>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffe0 	bl	8000b80 <__aeabi_cfcmpeq>
 8000bc0:	bf94      	ite	ls
 8000bc2:	2001      	movls	r0, #1
 8000bc4:	2000      	movhi	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_fcmpge>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffd2 	bl	8000b78 <__aeabi_cfrcmple>
 8000bd4:	bf94      	ite	ls
 8000bd6:	2001      	movls	r0, #1
 8000bd8:	2000      	movhi	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_fcmpgt>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffc8 	bl	8000b78 <__aeabi_cfrcmple>
 8000be8:	bf34      	ite	cc
 8000bea:	2001      	movcc	r0, #1
 8000bec:	2000      	movcs	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_f2iz>:
 8000bf4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bf8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000bfc:	d30f      	bcc.n	8000c1e <__aeabi_f2iz+0x2a>
 8000bfe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c06:	d90d      	bls.n	8000c24 <__aeabi_f2iz+0x30>
 8000c08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c10:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c14:	fa23 f002 	lsr.w	r0, r3, r2
 8000c18:	bf18      	it	ne
 8000c1a:	4240      	negne	r0, r0
 8000c1c:	4770      	bx	lr
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	4770      	bx	lr
 8000c24:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c28:	d101      	bne.n	8000c2e <__aeabi_f2iz+0x3a>
 8000c2a:	0242      	lsls	r2, r0, #9
 8000c2c:	d105      	bne.n	8000c3a <__aeabi_f2iz+0x46>
 8000c2e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000c32:	bf08      	it	eq
 8000c34:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f04f 0000 	mov.w	r0, #0
 8000c3e:	4770      	bx	lr

08000c40 <__aeabi_f2uiz>:
 8000c40:	0042      	lsls	r2, r0, #1
 8000c42:	d20e      	bcs.n	8000c62 <__aeabi_f2uiz+0x22>
 8000c44:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000c48:	d30b      	bcc.n	8000c62 <__aeabi_f2uiz+0x22>
 8000c4a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c52:	d409      	bmi.n	8000c68 <__aeabi_f2uiz+0x28>
 8000c54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c5c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c60:	4770      	bx	lr
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	4770      	bx	lr
 8000c68:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c6c:	d101      	bne.n	8000c72 <__aeabi_f2uiz+0x32>
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	d102      	bne.n	8000c78 <__aeabi_f2uiz+0x38>
 8000c72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c76:	4770      	bx	lr
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c94:	f000 b968 	b.w	8000f68 <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	9d08      	ldr	r5, [sp, #32]
 8000cb6:	460c      	mov	r4, r1
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d14e      	bne.n	8000d5a <__udivmoddi4+0xaa>
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	458c      	cmp	ip, r1
 8000cc0:	4686      	mov	lr, r0
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	d962      	bls.n	8000d8e <__udivmoddi4+0xde>
 8000cc8:	b14a      	cbz	r2, 8000cde <__udivmoddi4+0x2e>
 8000cca:	f1c2 0320 	rsb	r3, r2, #32
 8000cce:	4091      	lsls	r1, r2
 8000cd0:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd8:	4319      	orrs	r1, r3
 8000cda:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb04 f106 	mul.w	r1, r4, r6
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d90a      	bls.n	8000d14 <__udivmoddi4+0x64>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d06:	f080 8110 	bcs.w	8000f2a <__udivmoddi4+0x27a>
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	f240 810d 	bls.w	8000f2a <__udivmoddi4+0x27a>
 8000d10:	3c02      	subs	r4, #2
 8000d12:	4463      	add	r3, ip
 8000d14:	1a59      	subs	r1, r3, r1
 8000d16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	fa1f f38e 	uxth.w	r3, lr
 8000d26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2a:	429e      	cmp	r6, r3
 8000d2c:	d90a      	bls.n	8000d44 <__udivmoddi4+0x94>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d36:	f080 80fa 	bcs.w	8000f2e <__udivmoddi4+0x27e>
 8000d3a:	429e      	cmp	r6, r3
 8000d3c:	f240 80f7 	bls.w	8000f2e <__udivmoddi4+0x27e>
 8000d40:	4463      	add	r3, ip
 8000d42:	3802      	subs	r0, #2
 8000d44:	2100      	movs	r1, #0
 8000d46:	1b9b      	subs	r3, r3, r6
 8000d48:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d4c:	b11d      	cbz	r5, 8000d56 <__udivmoddi4+0xa6>
 8000d4e:	40d3      	lsrs	r3, r2
 8000d50:	2200      	movs	r2, #0
 8000d52:	e9c5 3200 	strd	r3, r2, [r5]
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	d905      	bls.n	8000d6a <__udivmoddi4+0xba>
 8000d5e:	b10d      	cbz	r5, 8000d64 <__udivmoddi4+0xb4>
 8000d60:	e9c5 0100 	strd	r0, r1, [r5]
 8000d64:	2100      	movs	r1, #0
 8000d66:	4608      	mov	r0, r1
 8000d68:	e7f5      	b.n	8000d56 <__udivmoddi4+0xa6>
 8000d6a:	fab3 f183 	clz	r1, r3
 8000d6e:	2900      	cmp	r1, #0
 8000d70:	d146      	bne.n	8000e00 <__udivmoddi4+0x150>
 8000d72:	42a3      	cmp	r3, r4
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xcc>
 8000d76:	4290      	cmp	r0, r2
 8000d78:	f0c0 80ee 	bcc.w	8000f58 <__udivmoddi4+0x2a8>
 8000d7c:	1a86      	subs	r6, r0, r2
 8000d7e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	2d00      	cmp	r5, #0
 8000d86:	d0e6      	beq.n	8000d56 <__udivmoddi4+0xa6>
 8000d88:	e9c5 6300 	strd	r6, r3, [r5]
 8000d8c:	e7e3      	b.n	8000d56 <__udivmoddi4+0xa6>
 8000d8e:	2a00      	cmp	r2, #0
 8000d90:	f040 808f 	bne.w	8000eb2 <__udivmoddi4+0x202>
 8000d94:	eba1 040c 	sub.w	r4, r1, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000da6:	fb08 4416 	mls	r4, r8, r6, r4
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	4298      	cmp	r0, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x11c>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x11a>
 8000dc4:	4298      	cmp	r0, r3
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b0>
 8000dca:	4626      	mov	r6, r4
 8000dcc:	1a1c      	subs	r4, r3, r0
 8000dce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de2:	429f      	cmp	r7, r3
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x148>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x146>
 8000df0:	429f      	cmp	r7, r3
 8000df2:	f200 80ae 	bhi.w	8000f52 <__udivmoddi4+0x2a2>
 8000df6:	4620      	mov	r0, r4
 8000df8:	1bdb      	subs	r3, r3, r7
 8000dfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfe:	e7a5      	b.n	8000d4c <__udivmoddi4+0x9c>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa24 f607 	lsr.w	r6, r4, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fbb6 f8f9 	udiv	r8, r6, r9
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	fb09 6618 	mls	r6, r9, r8, r6
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	408c      	lsls	r4, r1
 8000e28:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	431c      	orrs	r4, r3
 8000e32:	0c23      	lsrs	r3, r4, #16
 8000e34:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x1a6>
 8000e40:	eb1c 0303 	adds.w	r3, ip, r3
 8000e44:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8000e48:	f080 8081 	bcs.w	8000f4e <__udivmoddi4+0x29e>
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	d97e      	bls.n	8000f4e <__udivmoddi4+0x29e>
 8000e50:	f1a8 0802 	sub.w	r8, r8, #2
 8000e54:	4463      	add	r3, ip
 8000e56:	1a1e      	subs	r6, r3, r0
 8000e58:	fbb6 f3f9 	udiv	r3, r6, r9
 8000e5c:	fb09 6613 	mls	r6, r9, r3, r6
 8000e60:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e64:	b2a4      	uxth	r4, r4
 8000e66:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x1d0>
 8000e6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e72:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e76:	d266      	bcs.n	8000f46 <__udivmoddi4+0x296>
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d964      	bls.n	8000f46 <__udivmoddi4+0x296>
 8000e7c:	3b02      	subs	r3, #2
 8000e7e:	4464      	add	r4, ip
 8000e80:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000e84:	fba0 8302 	umull	r8, r3, r0, r2
 8000e88:	eba4 040e 	sub.w	r4, r4, lr
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	46c6      	mov	lr, r8
 8000e90:	461e      	mov	r6, r3
 8000e92:	d350      	bcc.n	8000f36 <__udivmoddi4+0x286>
 8000e94:	d04d      	beq.n	8000f32 <__udivmoddi4+0x282>
 8000e96:	b155      	cbz	r5, 8000eae <__udivmoddi4+0x1fe>
 8000e98:	ebba 030e 	subs.w	r3, sl, lr
 8000e9c:	eb64 0406 	sbc.w	r4, r4, r6
 8000ea0:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea4:	40cb      	lsrs	r3, r1
 8000ea6:	431f      	orrs	r7, r3
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	e9c5 7400 	strd	r7, r4, [r5]
 8000eae:	2100      	movs	r1, #0
 8000eb0:	e751      	b.n	8000d56 <__udivmoddi4+0xa6>
 8000eb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb6:	f1c2 0320 	rsb	r3, r2, #32
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fbb1 f0f8 	udiv	r0, r1, r8
 8000ecc:	fb08 1110 	mls	r1, r8, r0, r1
 8000ed0:	4094      	lsls	r4, r2
 8000ed2:	431c      	orrs	r4, r3
 8000ed4:	fa1f f78c 	uxth.w	r7, ip
 8000ed8:	0c23      	lsrs	r3, r4, #16
 8000eda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ede:	fb00 f107 	mul.w	r1, r0, r7
 8000ee2:	4299      	cmp	r1, r3
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x248>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eee:	d22c      	bcs.n	8000f4a <__udivmoddi4+0x29a>
 8000ef0:	4299      	cmp	r1, r3
 8000ef2:	d92a      	bls.n	8000f4a <__udivmoddi4+0x29a>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1a5b      	subs	r3, r3, r1
 8000efa:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efe:	fb08 3311 	mls	r3, r8, r1, r3
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f08:	fb01 f307 	mul.w	r3, r1, r7
 8000f0c:	42a3      	cmp	r3, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x272>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f18:	d213      	bcs.n	8000f42 <__udivmoddi4+0x292>
 8000f1a:	42a3      	cmp	r3, r4
 8000f1c:	d911      	bls.n	8000f42 <__udivmoddi4+0x292>
 8000f1e:	3902      	subs	r1, #2
 8000f20:	4464      	add	r4, ip
 8000f22:	1ae4      	subs	r4, r4, r3
 8000f24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f28:	e73b      	b.n	8000da2 <__udivmoddi4+0xf2>
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	e6f2      	b.n	8000d14 <__udivmoddi4+0x64>
 8000f2e:	4608      	mov	r0, r1
 8000f30:	e708      	b.n	8000d44 <__udivmoddi4+0x94>
 8000f32:	45c2      	cmp	sl, r8
 8000f34:	d2af      	bcs.n	8000e96 <__udivmoddi4+0x1e6>
 8000f36:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f3a:	eb63 060c 	sbc.w	r6, r3, ip
 8000f3e:	3801      	subs	r0, #1
 8000f40:	e7a9      	b.n	8000e96 <__udivmoddi4+0x1e6>
 8000f42:	4631      	mov	r1, r6
 8000f44:	e7ed      	b.n	8000f22 <__udivmoddi4+0x272>
 8000f46:	4603      	mov	r3, r0
 8000f48:	e79a      	b.n	8000e80 <__udivmoddi4+0x1d0>
 8000f4a:	4630      	mov	r0, r6
 8000f4c:	e7d4      	b.n	8000ef8 <__udivmoddi4+0x248>
 8000f4e:	46b0      	mov	r8, r6
 8000f50:	e781      	b.n	8000e56 <__udivmoddi4+0x1a6>
 8000f52:	4463      	add	r3, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e74f      	b.n	8000df8 <__udivmoddi4+0x148>
 8000f58:	4606      	mov	r6, r0
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	e711      	b.n	8000d84 <__udivmoddi4+0xd4>
 8000f60:	3e02      	subs	r6, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x11c>
 8000f66:	bf00      	nop

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <Delay_Init+0x38>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10e      	bne.n	8000f9a <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <Delay_Init+0x38>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <Delay_Init+0x38>)
 8000f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f86:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000f88:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <Delay_Init+0x3c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <Delay_Init+0x3c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <Delay_Init+0x3c>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6013      	str	r3, [r2, #0]
    }
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000edf0 	.word	0xe000edf0
 8000fa8:	e0001000 	.word	0xe0001000

08000fac <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <delayMicroseconds+0x30>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 16; // Our MCU runs at 16 MHz, so each microsecond lasts 16 clock ticks
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000fc0:	bf00      	nop
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <delayMicroseconds+0x30>)
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f8      	bhi.n	8000fc2 <delayMicroseconds+0x16>
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	e0001000 	.word	0xe0001000

08000fe0 <getRightEncoderCounts>:
#include "encoders.h"

/*
 * Implement this function so it returns the right encoder value
 */
int16_t getRightEncoderCounts() {
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
	return  (int16_t) TIM2->CNT;
 8000fe4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fea:	b21b      	sxth	r3, r3
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <getLeftEncoderCounts>:

/*
 * Implement this function so it returns the left encoder value
 */
int16_t getLeftEncoderCounts() {
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <getLeftEncoderCounts+0x14>)
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffc:	b21b      	sxth	r3, r3
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40010000 	.word	0x40010000

0800100c <resetEncoders>:

/*
 * This function has already been implemented for you. Enjoy! :)
 */
void resetEncoders() {
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <resetEncoders+0x1c>)
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8001016:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40010000 	.word	0x40010000

0800102c <readIR>:
 Wait for a small amount of time (at least 20 us) so the photodiode can react
 Then read the correct receiver
 Lastly turn off the emitter
 */
uint16_t readIR(IR ir)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	switch (ir) {
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d824      	bhi.n	8001086 <readIR+0x5a>
 800103c:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <readIR+0x18>)
 800103e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001042:	bf00      	nop
 8001044:	08001055 	.word	0x08001055
 8001048:	08001063 	.word	0x08001063
 800104c:	0800107b 	.word	0x0800107b
 8001050:	0800106f 	.word	0x0800106f
		case IR_LEFT:
			HAL_GPIO_WritePin(Left_Emitter_GPIO_Port, Left_Emitter_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800105a:	4813      	ldr	r0, [pc, #76]	@ (80010a8 <readIR+0x7c>)
 800105c:	f002 fbc6 	bl	80037ec <HAL_GPIO_WritePin>
			break;
 8001060:	e013      	b.n	800108a <readIR+0x5e>
		case IR_FRONT_LEFT:
			HAL_GPIO_WritePin(Left_Front_Emitter_GPIO_Port, Left_Front_Emitter_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2180      	movs	r1, #128	@ 0x80
 8001066:	4811      	ldr	r0, [pc, #68]	@ (80010ac <readIR+0x80>)
 8001068:	f002 fbc0 	bl	80037ec <HAL_GPIO_WritePin>
			break;
 800106c:	e00d      	b.n	800108a <readIR+0x5e>
		case IR_RIGHT:
			HAL_GPIO_WritePin(Right_Emitter_GPIO_Port, Right_Emitter_Pin, GPIO_PIN_SET);
 800106e:	2201      	movs	r2, #1
 8001070:	2108      	movs	r1, #8
 8001072:	480e      	ldr	r0, [pc, #56]	@ (80010ac <readIR+0x80>)
 8001074:	f002 fbba 	bl	80037ec <HAL_GPIO_WritePin>
			break;
 8001078:	e007      	b.n	800108a <readIR+0x5e>
		case IR_FRONT_RIGHT:
			HAL_GPIO_WritePin(Right_Front_Emitter_GPIO_Port, Right_Front_Emitter_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2120      	movs	r1, #32
 800107e:	480b      	ldr	r0, [pc, #44]	@ (80010ac <readIR+0x80>)
 8001080:	f002 fbb4 	bl	80037ec <HAL_GPIO_WritePin>
			break;
 8001084:	e001      	b.n	800108a <readIR+0x5e>
		default:
			return 0;
 8001086:	2300      	movs	r3, #0
 8001088:	e009      	b.n	800109e <readIR+0x72>
	}

	delayMicroseconds(100);
 800108a:	2064      	movs	r0, #100	@ 0x64
 800108c:	f7ff ff8e 	bl	8000fac <delayMicroseconds>

	uint16_t reading = analogRead(ir);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f82c 	bl	80010f0 <analogRead>
 8001098:	4603      	mov	r3, r0
 800109a:	81fb      	strh	r3, [r7, #14]
//				break;
//			default:
//				break;
//		}

	return reading;
 800109c:	89fb      	ldrh	r3, [r7, #14]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020000 	.word	0x40020000

080010b0 <readLeftIR>:
/*
 Implement the following 4 functions to read each IR
 Hint: Each function may just be one line
 */
uint16_t readLeftIR(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	return readIR(IR_LEFT);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff ffb9 	bl	800102c <readIR>
 80010ba:	4603      	mov	r3, r0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	bd80      	pop	{r7, pc}

080010c0 <readFrontLeftIR>:

uint16_t readFrontLeftIR(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	return readIR(IR_FRONT_LEFT);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f7ff ffb1 	bl	800102c <readIR>
 80010ca:	4603      	mov	r3, r0

}
 80010cc:	4618      	mov	r0, r3
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <readFrontRightIR>:

uint16_t readFrontRightIR(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	return readIR(IR_FRONT_RIGHT);
 80010d4:	2002      	movs	r0, #2
 80010d6:	f7ff ffa9 	bl	800102c <readIR>
 80010da:	4603      	mov	r3, r0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	bd80      	pop	{r7, pc}

080010e0 <readRightIR>:


uint16_t readRightIR(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	return readIR(IR_RIGHT);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f7ff ffa1 	bl	800102c <readIR>
 80010ea:	4603      	mov	r3, r0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <analogRead>:
/*
 This function reads the specific channel of the ADC corresponding to the correct IR
 You should not have to edit this function
 */
uint16_t analogRead(IR ir)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	@ 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 8001108:	f000 fb76 	bl	80017f8 <Get_HADC1_Ptr>
 800110c:	61f8      	str	r0, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b03      	cmp	r3, #3
 8001112:	d817      	bhi.n	8001144 <analogRead+0x54>
 8001114:	a201      	add	r2, pc, #4	@ (adr r2, 800111c <analogRead+0x2c>)
 8001116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111a:	bf00      	nop
 800111c:	0800112d 	.word	0x0800112d
 8001120:	08001133 	.word	0x08001133
 8001124:	08001139 	.word	0x08001139
 8001128:	0800113f 	.word	0x0800113f
    {
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_9;
 800112c:	2309      	movs	r3, #9
 800112e:	60fb      	str	r3, [r7, #12]
            break;
 8001130:	e00a      	b.n	8001148 <analogRead+0x58>
        case IR_FRONT_LEFT:
            sConfig.Channel = ADC_CHANNEL_14;
 8001132:	230e      	movs	r3, #14
 8001134:	60fb      	str	r3, [r7, #12]
            break;
 8001136:	e007      	b.n	8001148 <analogRead+0x58>
        case IR_FRONT_RIGHT:
            sConfig.Channel = ADC_CHANNEL_6;
 8001138:	2306      	movs	r3, #6
 800113a:	60fb      	str	r3, [r7, #12]
            break;
 800113c:	e004      	b.n	8001148 <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_2;
 800113e:	2302      	movs	r3, #2
 8001140:	60fb      	str	r3, [r7, #12]
            break;
 8001142:	e001      	b.n	8001148 <analogRead+0x58>
        default:
            return 0;
 8001144:	2300      	movs	r3, #0
 8001146:	e032      	b.n	80011ae <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	4619      	mov	r1, r3
 8001156:	69f8      	ldr	r0, [r7, #28]
 8001158:	f001 fa18 	bl	800258c <HAL_ADC_ConfigChannel>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <analogRead+0x76>
    {
        return 0;
 8001162:	2300      	movs	r3, #0
 8001164:	e023      	b.n	80011ae <analogRead+0xbe>
    }
    
    complete = 0;
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <analogRead+0xc8>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	4913      	ldr	r1, [pc, #76]	@ (80011bc <analogRead+0xcc>)
 8001170:	69f8      	ldr	r0, [r7, #28]
 8001172:	f001 f8c9 	bl	8002308 <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 8001176:	e000      	b.n	800117a <analogRead+0x8a>
    {
        continue;
 8001178:	bf00      	nop
    while (complete == 0)
 800117a:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <analogRead+0xc8>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0fa      	beq.n	8001178 <analogRead+0x88>
    }

    uint32_t sum = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	847b      	strh	r3, [r7, #34]	@ 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 800118a:	e00a      	b.n	80011a2 <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 800118c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800118e:	4a0b      	ldr	r2, [pc, #44]	@ (80011bc <analogRead+0xcc>)
 8001190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001194:	461a      	mov	r2, r3
 8001196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001198:	4413      	add	r3, r2
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
        ++measurement;
 800119c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800119e:	3301      	adds	r3, #1
 80011a0:	847b      	strh	r3, [r7, #34]	@ 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 80011a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80011a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80011a6:	d9f1      	bls.n	800118c <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 80011a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011aa:	09db      	lsrs	r3, r3, #7
 80011ac:	b29b      	uxth	r3, r3
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3728      	adds	r7, #40	@ 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000140 	.word	0x20000140
 80011bc:	20000040 	.word	0x20000040

080011c0 <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f001 f97b 	bl	80024c4 <HAL_ADC_Stop_DMA>
    complete = 1;
 80011ce:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <HAL_ADC_ConvCpltCallback+0x1c>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000140 	.word	0x20000140

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e4:	f000 ffde 	bl	80021a4 <HAL_Init>

  /* USER CODE BEGIN Init */

  Delay_Init();
 80011e8:	f7ff fec0 	bl	8000f6c <Delay_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ec:	f000 f862 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f0:	f000 fa84 	bl	80016fc <MX_GPIO_Init>
  MX_DMA_Init();
 80011f4:	f000 fa62 	bl	80016bc <MX_DMA_Init>
  MX_ADC1_Init();
 80011f8:	f000 f898 	bl	800132c <MX_ADC1_Init>
  MX_TIM1_Init();
 80011fc:	f000 f8e8 	bl	80013d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001200:	f000 f93e 	bl	8001480 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001204:	f000 f9ea 	bl	80015dc <MX_TIM4_Init>
  MX_TIM3_Init();
 8001208:	f000 f98e 	bl	8001528 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800120c:	213c      	movs	r1, #60	@ 0x3c
 800120e:	481e      	ldr	r0, [pc, #120]	@ (8001288 <main+0xa8>)
 8001210:	f003 f8c8 	bl	80043a4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001214:	213c      	movs	r1, #60	@ 0x3c
 8001216:	481d      	ldr	r0, [pc, #116]	@ (800128c <main+0xac>)
 8001218:	f003 f8c4 	bl	80043a4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800121c:	2100      	movs	r1, #0
 800121e:	481c      	ldr	r0, [pc, #112]	@ (8001290 <main+0xb0>)
 8001220:	f002 ff52 	bl	80040c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001224:	2104      	movs	r1, #4
 8001226:	481b      	ldr	r0, [pc, #108]	@ (8001294 <main+0xb4>)
 8001228:	f002 ff4e 	bl	80040c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800122c:	2108      	movs	r1, #8
 800122e:	4819      	ldr	r0, [pc, #100]	@ (8001294 <main+0xb4>)
 8001230:	f002 ff4a 	bl	80040c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001234:	210c      	movs	r1, #12
 8001236:	4817      	ldr	r0, [pc, #92]	@ (8001294 <main+0xb4>)
 8001238:	f002 ff46 	bl	80040c8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  left_counts = (int16_t) TIM1->CNT;
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <main+0xb8>)
 800123e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001240:	b21a      	sxth	r2, r3
 8001242:	4b16      	ldr	r3, [pc, #88]	@ (800129c <main+0xbc>)
 8001244:	801a      	strh	r2, [r3, #0]
	  right_counts = (int16_t) TIM2->CNT;
 8001246:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800124a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124c:	b21a      	sxth	r2, r3
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <main+0xc0>)
 8001250:	801a      	strh	r2, [r3, #0]
	  left_em = readLeftIR();
 8001252:	f7ff ff2d 	bl	80010b0 <readLeftIR>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <main+0xc4>)
 800125c:	801a      	strh	r2, [r3, #0]
//	  left_em = 5;
	  fl_em = readFrontLeftIR();
 800125e:	f7ff ff2f 	bl	80010c0 <readFrontLeftIR>
 8001262:	4603      	mov	r3, r0
 8001264:	b29a      	uxth	r2, r3
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <main+0xc8>)
 8001268:	801a      	strh	r2, [r3, #0]
	  fr_em = readFrontRightIR();
 800126a:	f7ff ff31 	bl	80010d0 <readFrontRightIR>
 800126e:	4603      	mov	r3, r0
 8001270:	b29a      	uxth	r2, r3
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <main+0xcc>)
 8001274:	801a      	strh	r2, [r3, #0]
	  right_em = readRightIR();
 8001276:	f7ff ff33 	bl	80010e0 <readRightIR>
 800127a:	4603      	mov	r3, r0
 800127c:	b29a      	uxth	r2, r3
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <main+0xd0>)
 8001280:	801a      	strh	r2, [r3, #0]
  {
 8001282:	bf00      	nop
 8001284:	e7da      	b.n	800123c <main+0x5c>
 8001286:	bf00      	nop
 8001288:	200001ec 	.word	0x200001ec
 800128c:	20000234 	.word	0x20000234
 8001290:	2000027c 	.word	0x2000027c
 8001294:	200002c4 	.word	0x200002c4
 8001298:	40010000 	.word	0x40010000
 800129c:	2000030c 	.word	0x2000030c
 80012a0:	2000030e 	.word	0x2000030e
 80012a4:	20000310 	.word	0x20000310
 80012a8:	20000312 	.word	0x20000312
 80012ac:	20000314 	.word	0x20000314
 80012b0:	20000316 	.word	0x20000316

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b092      	sub	sp, #72	@ 0x48
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0318 	add.w	r3, r7, #24
 80012be:	2230      	movs	r2, #48	@ 0x30
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fde2 	bl	8004e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012da:	2301      	movs	r3, #1
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012de:	2310      	movs	r3, #16
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e6:	f107 0318 	add.w	r3, r7, #24
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fa96 	bl	800381c <HAL_RCC_OscConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012f6:	f000 fa89 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fa:	230f      	movs	r3, #15
 80012fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f002 fcd6 	bl	8003cc4 <HAL_RCC_ClockConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800131e:	f000 fa75 	bl	800180c <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	3748      	adds	r7, #72	@ 0x48
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001332:	463b      	mov	r3, r7
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800133e:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <MX_ADC1_Init+0x98>)
 8001340:	4a21      	ldr	r2, [pc, #132]	@ (80013c8 <MX_ADC1_Init+0x9c>)
 8001342:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001344:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <MX_ADC1_Init+0x98>)
 8001346:	2200      	movs	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800134a:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <MX_ADC1_Init+0x98>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001350:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <MX_ADC1_Init+0x98>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001356:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <MX_ADC1_Init+0x98>)
 8001358:	2201      	movs	r2, #1
 800135a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800135c:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <MX_ADC1_Init+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001364:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <MX_ADC1_Init+0x98>)
 8001366:	2200      	movs	r2, #0
 8001368:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800136a:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <MX_ADC1_Init+0x98>)
 800136c:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <MX_ADC1_Init+0xa0>)
 800136e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001370:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <MX_ADC1_Init+0x98>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <MX_ADC1_Init+0x98>)
 8001378:	2201      	movs	r2, #1
 800137a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <MX_ADC1_Init+0x98>)
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <MX_ADC1_Init+0x98>)
 8001386:	2201      	movs	r2, #1
 8001388:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800138a:	480e      	ldr	r0, [pc, #56]	@ (80013c4 <MX_ADC1_Init+0x98>)
 800138c:	f000 ff78 	bl	8002280 <HAL_ADC_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001396:	f000 fa39 	bl	800180c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800139a:	2309      	movs	r3, #9
 800139c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	@ (80013c4 <MX_ADC1_Init+0x98>)
 80013ac:	f001 f8ee 	bl	800258c <HAL_ADC_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013b6:	f000 fa29 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000144 	.word	0x20000144
 80013c8:	40012000 	.word	0x40012000
 80013cc:	0f000001 	.word	0x0f000001

080013d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	@ 0x30
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	2224      	movs	r2, #36	@ 0x24
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fd54 	bl	8004e8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <MX_TIM1_Init+0xa8>)
 80013ee:	4a23      	ldr	r2, [pc, #140]	@ (800147c <MX_TIM1_Init+0xac>)
 80013f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <MX_TIM1_Init+0xa8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <MX_TIM1_Init+0xa8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <MX_TIM1_Init+0xa8>)
 8001400:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001404:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001406:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <MX_TIM1_Init+0xa8>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_TIM1_Init+0xa8>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001412:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <MX_TIM1_Init+0xa8>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001418:	2303      	movs	r3, #3
 800141a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001420:	2301      	movs	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001430:	2301      	movs	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	4619      	mov	r1, r3
 8001442:	480d      	ldr	r0, [pc, #52]	@ (8001478 <MX_TIM1_Init+0xa8>)
 8001444:	f002 ff08 	bl	8004258 <HAL_TIM_Encoder_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800144e:	f000 f9dd 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4806      	ldr	r0, [pc, #24]	@ (8001478 <MX_TIM1_Init+0xa8>)
 8001460:	f003 fc88 	bl	8004d74 <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800146a:	f000 f9cf 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	3730      	adds	r7, #48	@ 0x30
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200001ec 	.word	0x200001ec
 800147c:	40010000 	.word	0x40010000

08001480 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	@ 0x30
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	2224      	movs	r2, #36	@ 0x24
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f003 fcfc 	bl	8004e8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149c:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <MX_TIM2_Init+0xa4>)
 800149e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <MX_TIM2_Init+0xa4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <MX_TIM2_Init+0xa4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <MX_TIM2_Init+0xa4>)
 80014b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_TIM2_Init+0xa4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014be:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <MX_TIM2_Init+0xa4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014cc:	2301      	movs	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014dc:	2301      	movs	r3, #1
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	4619      	mov	r1, r3
 80014ee:	480d      	ldr	r0, [pc, #52]	@ (8001524 <MX_TIM2_Init+0xa4>)
 80014f0:	f002 feb2 	bl	8004258 <HAL_TIM_Encoder_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014fa:	f000 f987 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	@ (8001524 <MX_TIM2_Init+0xa4>)
 800150c:	f003 fc32 	bl	8004d74 <HAL_TIMEx_MasterConfigSynchronization>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001516:	f000 f979 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	3730      	adds	r7, #48	@ 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000234 	.word	0x20000234

08001528 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152e:	f107 0320 	add.w	r3, r7, #32
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
 8001546:	615a      	str	r2, [r3, #20]
 8001548:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800154a:	4b22      	ldr	r3, [pc, #136]	@ (80015d4 <MX_TIM3_Init+0xac>)
 800154c:	4a22      	ldr	r2, [pc, #136]	@ (80015d8 <MX_TIM3_Init+0xb0>)
 800154e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001550:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <MX_TIM3_Init+0xac>)
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001556:	4b1f      	ldr	r3, [pc, #124]	@ (80015d4 <MX_TIM3_Init+0xac>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3199;
 800155c:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <MX_TIM3_Init+0xac>)
 800155e:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001562:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001564:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <MX_TIM3_Init+0xac>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156a:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <MX_TIM3_Init+0xac>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001570:	4818      	ldr	r0, [pc, #96]	@ (80015d4 <MX_TIM3_Init+0xac>)
 8001572:	f002 fd59 	bl	8004028 <HAL_TIM_PWM_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800157c:	f000 f946 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001588:	f107 0320 	add.w	r3, r7, #32
 800158c:	4619      	mov	r1, r3
 800158e:	4811      	ldr	r0, [pc, #68]	@ (80015d4 <MX_TIM3_Init+0xac>)
 8001590:	f003 fbf0 	bl	8004d74 <HAL_TIMEx_MasterConfigSynchronization>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800159a:	f000 f937 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159e:	2360      	movs	r3, #96	@ 0x60
 80015a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	4807      	ldr	r0, [pc, #28]	@ (80015d4 <MX_TIM3_Init+0xac>)
 80015b6:	f003 f873 	bl	80046a0 <HAL_TIM_PWM_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80015c0:	f000 f924 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015c4:	4803      	ldr	r0, [pc, #12]	@ (80015d4 <MX_TIM3_Init+0xac>)
 80015c6:	f000 fcd1 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	@ 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000027c 	.word	0x2000027c
 80015d8:	40000400 	.word	0x40000400

080015dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	@ 0x28
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015fe:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <MX_TIM4_Init+0xd8>)
 8001600:	4a2d      	ldr	r2, [pc, #180]	@ (80016b8 <MX_TIM4_Init+0xdc>)
 8001602:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001604:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <MX_TIM4_Init+0xd8>)
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160a:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <MX_TIM4_Init+0xd8>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3199;
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <MX_TIM4_Init+0xd8>)
 8001612:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001616:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001618:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <MX_TIM4_Init+0xd8>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161e:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <MX_TIM4_Init+0xd8>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001624:	4823      	ldr	r0, [pc, #140]	@ (80016b4 <MX_TIM4_Init+0xd8>)
 8001626:	f002 fcff 	bl	8004028 <HAL_TIM_PWM_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001630:	f000 f8ec 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800163c:	f107 0320 	add.w	r3, r7, #32
 8001640:	4619      	mov	r1, r3
 8001642:	481c      	ldr	r0, [pc, #112]	@ (80016b4 <MX_TIM4_Init+0xd8>)
 8001644:	f003 fb96 	bl	8004d74 <HAL_TIMEx_MasterConfigSynchronization>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800164e:	f000 f8dd 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001652:	2360      	movs	r3, #96	@ 0x60
 8001654:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2204      	movs	r2, #4
 8001666:	4619      	mov	r1, r3
 8001668:	4812      	ldr	r0, [pc, #72]	@ (80016b4 <MX_TIM4_Init+0xd8>)
 800166a:	f003 f819 	bl	80046a0 <HAL_TIM_PWM_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001674:	f000 f8ca 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2208      	movs	r2, #8
 800167c:	4619      	mov	r1, r3
 800167e:	480d      	ldr	r0, [pc, #52]	@ (80016b4 <MX_TIM4_Init+0xd8>)
 8001680:	f003 f80e 	bl	80046a0 <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800168a:	f000 f8bf 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	220c      	movs	r2, #12
 8001692:	4619      	mov	r1, r3
 8001694:	4807      	ldr	r0, [pc, #28]	@ (80016b4 <MX_TIM4_Init+0xd8>)
 8001696:	f003 f803 	bl	80046a0 <HAL_TIM_PWM_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80016a0:	f000 f8b4 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016a4:	4803      	ldr	r0, [pc, #12]	@ (80016b4 <MX_TIM4_Init+0xd8>)
 80016a6:	f000 fc61 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	@ 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200002c4 	.word	0x200002c4
 80016b8:	40000800 	.word	0x40000800

080016bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <MX_DMA_Init+0x3c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <MX_DMA_Init+0x3c>)
 80016cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <MX_DMA_Init+0x3c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2038      	movs	r0, #56	@ 0x38
 80016e4:	f001 fad1 	bl	8002c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016e8:	2038      	movs	r0, #56	@ 0x38
 80016ea:	f001 faea 	bl	8002cc2 <HAL_NVIC_EnableIRQ>

}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b34      	ldr	r3, [pc, #208]	@ (80017e8 <MX_GPIO_Init+0xec>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a33      	ldr	r2, [pc, #204]	@ (80017e8 <MX_GPIO_Init+0xec>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <MX_GPIO_Init+0xec>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b2d      	ldr	r3, [pc, #180]	@ (80017e8 <MX_GPIO_Init+0xec>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a2c      	ldr	r2, [pc, #176]	@ (80017e8 <MX_GPIO_Init+0xec>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b2a      	ldr	r3, [pc, #168]	@ (80017e8 <MX_GPIO_Init+0xec>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <MX_GPIO_Init+0xec>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a25      	ldr	r2, [pc, #148]	@ (80017e8 <MX_GPIO_Init+0xec>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b23      	ldr	r3, [pc, #140]	@ (80017e8 <MX_GPIO_Init+0xec>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, User_LED_2_Pin|User_LED_1_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800176c:	481f      	ldr	r0, [pc, #124]	@ (80017ec <MX_GPIO_Init+0xf0>)
 800176e:	f002 f83d 	bl	80037ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Right_Emitter_Pin|Right_Front_Emitter_Pin|Left_Front_Emitter_Pin, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	21a8      	movs	r1, #168	@ 0xa8
 8001776:	481e      	ldr	r0, [pc, #120]	@ (80017f0 <MX_GPIO_Init+0xf4>)
 8001778:	f002 f838 	bl	80037ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Left_Emitter_GPIO_Port, Left_Emitter_Pin, GPIO_PIN_RESET);
 800177c:	2200      	movs	r2, #0
 800177e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001782:	481c      	ldr	r0, [pc, #112]	@ (80017f4 <MX_GPIO_Init+0xf8>)
 8001784:	f002 f832 	bl	80037ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : User_LED_2_Pin User_LED_1_Pin */
  GPIO_InitStruct.Pin = User_LED_2_Pin|User_LED_1_Pin;
 8001788:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800178c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	2301      	movs	r3, #1
 8001790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4619      	mov	r1, r3
 80017a0:	4812      	ldr	r0, [pc, #72]	@ (80017ec <MX_GPIO_Init+0xf0>)
 80017a2:	f001 fe85 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_Emitter_Pin Right_Front_Emitter_Pin Left_Front_Emitter_Pin */
  GPIO_InitStruct.Pin = Right_Emitter_Pin|Right_Front_Emitter_Pin|Left_Front_Emitter_Pin;
 80017a6:	23a8      	movs	r3, #168	@ 0xa8
 80017a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017aa:	2301      	movs	r3, #1
 80017ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	4619      	mov	r1, r3
 80017bc:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <MX_GPIO_Init+0xf4>)
 80017be:	f001 fe77 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Left_Emitter_Pin */
  GPIO_InitStruct.Pin = Left_Emitter_Pin;
 80017c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Left_Emitter_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	4619      	mov	r1, r3
 80017da:	4806      	ldr	r0, [pc, #24]	@ (80017f4 <MX_GPIO_Init+0xf8>)
 80017dc:	f001 fe68 	bl	80034b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020800 	.word	0x40020800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40020400 	.word	0x40020400

080017f8 <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */

ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
	return &hadc1;
 80017fc:	4b02      	ldr	r3, [pc, #8]	@ (8001808 <Get_HADC1_Ptr+0x10>)
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000144 	.word	0x20000144

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <Error_Handler+0x8>

08001818 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
    if (pwm > PWM_MAX)
 8001820:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff f9db 	bl	8000be0 <__aeabi_fcmpgt>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <limitPWM+0x1e>
        return PWM_MAX;
 8001830:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001834:	e00b      	b.n	800184e <limitPWM+0x36>
    else if (pwm < -PWM_MAX)
 8001836:	f04f 413f 	mov.w	r1, #3204448256	@ 0xbf000000
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff f9b2 	bl	8000ba4 <__aeabi_fcmplt>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <limitPWM+0x34>
        return -PWM_MAX;
 8001846:	f04f 433f 	mov.w	r3, #3204448256	@ 0xbf000000
 800184a:	e000      	b.n	800184e <limitPWM+0x36>
    else
        return pwm;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    float limitedPWM = limitPWM(pwm);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ffd9 	bl	8001818 <limitPWM>
 8001866:	60f8      	str	r0, [r7, #12]

    if (limitedPWM >= 0.0f) {
 8001868:	f04f 0100 	mov.w	r1, #0
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f7ff f9ad 	bl	8000bcc <__aeabi_fcmpge>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00e      	beq.n	8001896 <setMotorLPWM+0x3e>
        // Set backward channel to zero first
        TIM4->CCR4 = 0;
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <setMotorLPWM+0x68>)
 800187a:	2200      	movs	r2, #0
 800187c:	641a      	str	r2, [r3, #64]	@ 0x40
        // Set forward channel
        TIM4->CCR3 = (uint32_t)(limitedPWM * MAX_TIMER_COUNTS);
 800187e:	4911      	ldr	r1, [pc, #68]	@ (80018c4 <setMotorLPWM+0x6c>)
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f7fe fff1 	bl	8000868 <__aeabi_fmul>
 8001886:	4603      	mov	r3, r0
 8001888:	4c0d      	ldr	r4, [pc, #52]	@ (80018c0 <setMotorLPWM+0x68>)
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff f9d8 	bl	8000c40 <__aeabi_f2uiz>
 8001890:	4603      	mov	r3, r0
 8001892:	63e3      	str	r3, [r4, #60]	@ 0x3c
        // Set forward channel to zero first
        TIM4->CCR3 = 0;
        // Set backward channel
        TIM4->CCR4 = (uint32_t)(-limitedPWM * MAX_TIMER_COUNTS);
    }
}
 8001894:	e010      	b.n	80018b8 <setMotorLPWM+0x60>
        TIM4->CCR3 = 0;
 8001896:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <setMotorLPWM+0x68>)
 8001898:	2200      	movs	r2, #0
 800189a:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM4->CCR4 = (uint32_t)(-limitedPWM * MAX_TIMER_COUNTS);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80018a2:	4908      	ldr	r1, [pc, #32]	@ (80018c4 <setMotorLPWM+0x6c>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe ffdf 	bl	8000868 <__aeabi_fmul>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4c04      	ldr	r4, [pc, #16]	@ (80018c0 <setMotorLPWM+0x68>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f9c6 	bl	8000c40 <__aeabi_f2uiz>
 80018b4:	4603      	mov	r3, r0
 80018b6:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd90      	pop	{r4, r7, pc}
 80018c0:	40000800 	.word	0x40000800
 80018c4:	4547f000 	.word	0x4547f000

080018c8 <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    float limitedPWM = limitPWM(pwm);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ffa1 	bl	8001818 <limitPWM>
 80018d6:	60f8      	str	r0, [r7, #12]

    if (limitedPWM >= 0.0f) {
 80018d8:	f04f 0100 	mov.w	r1, #0
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f7ff f975 	bl	8000bcc <__aeabi_fcmpge>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00e      	beq.n	8001906 <setMotorRPWM+0x3e>
        // Set backward channel to zero first
        TIM4->CCR2 = 0;
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <setMotorRPWM+0x68>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	639a      	str	r2, [r3, #56]	@ 0x38
        // Set forward channel
        TIM3->CCR1 = (uint32_t)(limitedPWM * MAX_TIMER_COUNTS);
 80018ee:	4911      	ldr	r1, [pc, #68]	@ (8001934 <setMotorRPWM+0x6c>)
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7fe ffb9 	bl	8000868 <__aeabi_fmul>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4c0f      	ldr	r4, [pc, #60]	@ (8001938 <setMotorRPWM+0x70>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff f9a0 	bl	8000c40 <__aeabi_f2uiz>
 8001900:	4603      	mov	r3, r0
 8001902:	6363      	str	r3, [r4, #52]	@ 0x34
        // Set forward channel to zero first
        TIM3->CCR1 = 0;
        // Set backward channel
        TIM4->CCR2 = (uint32_t)(-limitedPWM * MAX_TIMER_COUNTS);
    }
}
 8001904:	e010      	b.n	8001928 <setMotorRPWM+0x60>
        TIM3->CCR1 = 0;
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <setMotorRPWM+0x70>)
 8001908:	2200      	movs	r2, #0
 800190a:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM4->CCR2 = (uint32_t)(-limitedPWM * MAX_TIMER_COUNTS);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001912:	4908      	ldr	r1, [pc, #32]	@ (8001934 <setMotorRPWM+0x6c>)
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe ffa7 	bl	8000868 <__aeabi_fmul>
 800191a:	4603      	mov	r3, r0
 800191c:	4c04      	ldr	r4, [pc, #16]	@ (8001930 <setMotorRPWM+0x68>)
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f98e 	bl	8000c40 <__aeabi_f2uiz>
 8001924:	4603      	mov	r3, r0
 8001926:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	40000800 	.word	0x40000800
 8001934:	4547f000 	.word	0x4547f000
 8001938:	40000400 	.word	0x40000400

0800193c <updatePID>:
	resetMotors();
	done = 0;

}

void updatePID(float dt)  {
 800193c:	b5b0      	push	{r4, r5, r7, lr}
 800193e:	b08c      	sub	sp, #48	@ 0x30
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

	int16_t leftEncoder  = getLeftEncoderCounts();
 8001944:	f7ff fb56 	bl	8000ff4 <getLeftEncoderCounts>
 8001948:	4603      	mov	r3, r0
 800194a:	857b      	strh	r3, [r7, #42]	@ 0x2a
	int16_t rightEncoder = -getRightEncoderCounts();
 800194c:	f7ff fb48 	bl	8000fe0 <getRightEncoderCounts>
 8001950:	4603      	mov	r3, r0
 8001952:	b29b      	uxth	r3, r3
 8001954:	425b      	negs	r3, r3
 8001956:	b29b      	uxth	r3, r3
 8001958:	853b      	strh	r3, [r7, #40]	@ 0x28
//	resetEncoders();

	dbg_leftCounts = leftEncoder;
 800195a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe ff2e 	bl	80007c0 <__aeabi_i2f>
 8001964:	4603      	mov	r3, r0
 8001966:	4a9d      	ldr	r2, [pc, #628]	@ (8001bdc <updatePID+0x2a0>)
 8001968:	6013      	str	r3, [r2, #0]
	dbg_rightCounts = rightEncoder;
 800196a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe ff26 	bl	80007c0 <__aeabi_i2f>
 8001974:	4603      	mov	r3, r0
 8001976:	4a9a      	ldr	r2, [pc, #616]	@ (8001be0 <updatePID+0x2a4>)
 8001978:	6013      	str	r3, [r2, #0]

	    // distance measure & error
	float distMeas = (leftEncoder + rightEncoder) * 0.5f;
 800197a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800197e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001982:	4413      	add	r3, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe ff1b 	bl	80007c0 <__aeabi_i2f>
 800198a:	4603      	mov	r3, r0
 800198c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe ff69 	bl	8000868 <__aeabi_fmul>
 8001996:	4603      	mov	r3, r0
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
	float e_dist   = goalDistance - distMeas;
 800199a:	4b92      	ldr	r3, [pc, #584]	@ (8001be4 <updatePID+0x2a8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe ff0e 	bl	80007c0 <__aeabi_i2f>
 80019a4:	4603      	mov	r3, r0
 80019a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fe53 	bl	8000654 <__aeabi_fsub>
 80019ae:	4603      	mov	r3, r0
 80019b0:	623b      	str	r3, [r7, #32]

	dbg_e_dist = e_dist;
 80019b2:	4a8d      	ldr	r2, [pc, #564]	@ (8001be8 <updatePID+0x2ac>)
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	6013      	str	r3, [r2, #0]

	    // **use** the file‐scope accumulator here, not a new one
	sumDist       += e_dist * dt;
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	6a38      	ldr	r0, [r7, #32]
 80019bc:	f7fe ff54 	bl	8000868 <__aeabi_fmul>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b89      	ldr	r3, [pc, #548]	@ (8001bec <updatePID+0x2b0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	4610      	mov	r0, r2
 80019cc:	f7fe fe44 	bl	8000658 <__addsf3>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b85      	ldr	r3, [pc, #532]	@ (8001bec <updatePID+0x2b0>)
 80019d6:	601a      	str	r2, [r3, #0]
	float derr_dist = (e_dist - oldDistanceError) / dt;
 80019d8:	4b85      	ldr	r3, [pc, #532]	@ (8001bf0 <updatePID+0x2b4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	6a38      	ldr	r0, [r7, #32]
 80019e0:	f7fe fe38 	bl	8000654 <__aeabi_fsub>
 80019e4:	4603      	mov	r3, r0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fff1 	bl	80009d0 <__aeabi_fdiv>
 80019ee:	4603      	mov	r3, r0
 80019f0:	61fb      	str	r3, [r7, #28]

	    // 2) angle measure & error
	float e_ang     = goalAngle - (leftEncoder - rightEncoder);
 80019f2:	4b80      	ldr	r3, [pc, #512]	@ (8001bf4 <updatePID+0x2b8>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	@ 0x2a
 80019fa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80019fe:	1acb      	subs	r3, r1, r3
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fedc 	bl	80007c0 <__aeabi_i2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	61bb      	str	r3, [r7, #24]
	    sumAng        += e_ang * dt;
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	69b8      	ldr	r0, [r7, #24]
 8001a10:	f7fe ff2a 	bl	8000868 <__aeabi_fmul>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b77      	ldr	r3, [pc, #476]	@ (8001bf8 <updatePID+0x2bc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f7fe fe1a 	bl	8000658 <__addsf3>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b73      	ldr	r3, [pc, #460]	@ (8001bf8 <updatePID+0x2bc>)
 8001a2a:	601a      	str	r2, [r3, #0]
	float derr_ang  = (e_ang - oldAngleError) / dt;
 8001a2c:	4b73      	ldr	r3, [pc, #460]	@ (8001bfc <updatePID+0x2c0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fec5 	bl	80007c0 <__aeabi_i2f>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	69b8      	ldr	r0, [r7, #24]
 8001a3c:	f7fe fe0a 	bl	8000654 <__aeabi_fsub>
 8001a40:	4603      	mov	r3, r0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe ffc3 	bl	80009d0 <__aeabi_fdiv>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	617b      	str	r3, [r7, #20]

	dbg_e_ang = e_ang;
 8001a4e:	4a6c      	ldr	r2, [pc, #432]	@ (8001c00 <updatePID+0x2c4>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6013      	str	r3, [r2, #0]

        // PID outputs with integral terms added
    float distCorr = kPx * e_dist + /* add:*/ kIx * sumDist + kDx * derr_dist;
 8001a54:	4b6b      	ldr	r3, [pc, #428]	@ (8001c04 <updatePID+0x2c8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6a39      	ldr	r1, [r7, #32]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe ff04 	bl	8000868 <__aeabi_fmul>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461c      	mov	r4, r3
 8001a64:	4b68      	ldr	r3, [pc, #416]	@ (8001c08 <updatePID+0x2cc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a60      	ldr	r2, [pc, #384]	@ (8001bec <updatePID+0x2b0>)
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fefa 	bl	8000868 <__aeabi_fmul>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4619      	mov	r1, r3
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7fe fded 	bl	8000658 <__addsf3>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461c      	mov	r4, r3
 8001a82:	4b62      	ldr	r3, [pc, #392]	@ (8001c0c <updatePID+0x2d0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	69f9      	ldr	r1, [r7, #28]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe feed 	bl	8000868 <__aeabi_fmul>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4619      	mov	r1, r3
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7fe fde0 	bl	8000658 <__addsf3>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	613b      	str	r3, [r7, #16]
    float angCorr  = kPw * e_ang  + /* add:*/ kIw * sumAng  + kDw * derr_ang;
 8001a9c:	4b5c      	ldr	r3, [pc, #368]	@ (8001c10 <updatePID+0x2d4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69b9      	ldr	r1, [r7, #24]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fee0 	bl	8000868 <__aeabi_fmul>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461c      	mov	r4, r3
 8001aac:	4b59      	ldr	r3, [pc, #356]	@ (8001c14 <updatePID+0x2d8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a51      	ldr	r2, [pc, #324]	@ (8001bf8 <updatePID+0x2bc>)
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fed6 	bl	8000868 <__aeabi_fmul>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f7fe fdc9 	bl	8000658 <__addsf3>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461c      	mov	r4, r3
 8001aca:	4b53      	ldr	r3, [pc, #332]	@ (8001c18 <updatePID+0x2dc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6979      	ldr	r1, [r7, #20]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fec9 	bl	8000868 <__aeabi_fmul>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4620      	mov	r0, r4
 8001adc:	f7fe fdbc 	bl	8000658 <__addsf3>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (goalAngle == 0) {
 8001ae4:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <updatePID+0x2b8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d103      	bne.n	8001af4 <updatePID+0x1b8>
    	angCorr = 0;
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001af2:	e012      	b.n	8001b1a <updatePID+0x1de>
    } else {
    	if (angCorr > 0.55f) {
 8001af4:	4949      	ldr	r1, [pc, #292]	@ (8001c1c <updatePID+0x2e0>)
 8001af6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001af8:	f7ff f872 	bl	8000be0 <__aeabi_fcmpgt>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <updatePID+0x1cc>
    	        	angCorr = 0.55f;
 8001b02:	4b46      	ldr	r3, [pc, #280]	@ (8001c1c <updatePID+0x2e0>)
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b06:	e008      	b.n	8001b1a <updatePID+0x1de>
    	        } else if (angCorr < -0.55f) {
 8001b08:	4945      	ldr	r1, [pc, #276]	@ (8001c20 <updatePID+0x2e4>)
 8001b0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001b0c:	f7ff f84a 	bl	8000ba4 <__aeabi_fcmplt>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <updatePID+0x1de>
    	        	angCorr = -0.55f;
 8001b16:	4b42      	ldr	r3, [pc, #264]	@ (8001c20 <updatePID+0x2e4>)
 8001b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    	        }
    }

         if (goalDistance != 0) {
 8001b1a:	4b32      	ldr	r3, [pc, #200]	@ (8001be4 <updatePID+0x2a8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00e      	beq.n	8001b40 <updatePID+0x204>
        	 if (fabs(e_dist) < distEps) {
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b28:	4a3e      	ldr	r2, [pc, #248]	@ (8001c24 <updatePID+0x2e8>)
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f838 	bl	8000ba4 <__aeabi_fcmplt>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <updatePID+0x204>
        		 done = 1;
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c28 <updatePID+0x2ec>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]
//        	     	 }
//        	      }

         }

         if (goalAngle != 0) {
 8001b40:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <updatePID+0x2b8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d018      	beq.n	8001b7a <updatePID+0x23e>
                 	         	 if (fabs(e_dist) < angEps) {
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fc9c 	bl	800048c <__aeabi_f2d>
 8001b54:	4604      	mov	r4, r0
 8001b56:	460d      	mov	r5, r1
 8001b58:	4b34      	ldr	r3, [pc, #208]	@ (8001c2c <updatePID+0x2f0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fc83 	bl	8000468 <__aeabi_i2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4620      	mov	r0, r4
 8001b68:	4629      	mov	r1, r5
 8001b6a:	f7fe fd47 	bl	80005fc <__aeabi_dcmplt>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <updatePID+0x23e>
                 	         		 done = 1;
 8001b74:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <updatePID+0x2ec>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
                 	 }

    // change 1: commented out angCorr
//    float angCorr = 0.0f;

    dbg_distCorr = distCorr;
 8001b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c30 <updatePID+0x2f4>)
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	6013      	str	r3, [r2, #0]
    dbg_angCorr = angCorr;
 8001b80:	4a2c      	ldr	r2, [pc, #176]	@ (8001c34 <updatePID+0x2f8>)
 8001b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b84:	6013      	str	r3, [r2, #0]

        // combine, clamp, send to motors
    float leftSpeed  = limitPWM(distCorr - angCorr);
 8001b86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b88:	6938      	ldr	r0, [r7, #16]
 8001b8a:	f7fe fd63 	bl	8000654 <__aeabi_fsub>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fe41 	bl	8001818 <limitPWM>
 8001b96:	60f8      	str	r0, [r7, #12]
    float rightSpeed = limitPWM(distCorr + angCorr);
 8001b98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b9a:	6938      	ldr	r0, [r7, #16]
 8001b9c:	f7fe fd5c 	bl	8000658 <__addsf3>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fe38 	bl	8001818 <limitPWM>
 8001ba8:	60b8      	str	r0, [r7, #8]

    dbg_leftSpeed = leftSpeed;
 8001baa:	4a23      	ldr	r2, [pc, #140]	@ (8001c38 <updatePID+0x2fc>)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6013      	str	r3, [r2, #0]
    dbg_rightSpeed = rightSpeed;
 8001bb0:	4a22      	ldr	r2, [pc, #136]	@ (8001c3c <updatePID+0x300>)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	6013      	str	r3, [r2, #0]

    setMotorLPWM(leftSpeed);
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7ff fe4e 	bl	8001858 <setMotorLPWM>
    setMotorRPWM(rightSpeed);
 8001bbc:	68b8      	ldr	r0, [r7, #8]
 8001bbe:	f7ff fe83 	bl	80018c8 <setMotorRPWM>

        // 5) save for next
    oldDistanceError = e_dist;
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf0 <updatePID+0x2b4>)
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	6013      	str	r3, [r2, #0]
    oldAngleError    = e_ang;
 8001bc8:	69b8      	ldr	r0, [r7, #24]
 8001bca:	f7ff f813 	bl	8000bf4 <__aeabi_f2iz>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <updatePID+0x2c0>)
 8001bd2:	6013      	str	r3, [r2, #0]
//    	     	 } else {
//    	     		 count = 0;
//    	     	 }
//    	      }

     }
 8001bd4:	bf00      	nop
 8001bd6:	3730      	adds	r7, #48	@ 0x30
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bdb0      	pop	{r4, r5, r7, pc}
 8001bdc:	20000318 	.word	0x20000318
 8001be0:	2000031c 	.word	0x2000031c
 8001be4:	20000354 	.word	0x20000354
 8001be8:	20000320 	.word	0x20000320
 8001bec:	2000034c 	.word	0x2000034c
 8001bf0:	2000033c 	.word	0x2000033c
 8001bf4:	20000350 	.word	0x20000350
 8001bf8:	20000348 	.word	0x20000348
 8001bfc:	20000338 	.word	0x20000338
 8001c00:	20000324 	.word	0x20000324
 8001c04:	20000010 	.word	0x20000010
 8001c08:	20000344 	.word	0x20000344
 8001c0c:	20000014 	.word	0x20000014
 8001c10:	20000008 	.word	0x20000008
 8001c14:	20000340 	.word	0x20000340
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	3f0ccccd 	.word	0x3f0ccccd
 8001c20:	bf0ccccd 	.word	0xbf0ccccd
 8001c24:	20000004 	.word	0x20000004
 8001c28:	20000358 	.word	0x20000358
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000328 	.word	0x20000328
 8001c34:	2000032c 	.word	0x2000032c
 8001c38:	20000330 	.word	0x20000330
 8001c3c:	20000334 	.word	0x20000334

08001c40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <HAL_MspInit+0x48>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c88 <HAL_MspInit+0x48>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c56:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <HAL_MspInit+0x48>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <HAL_MspInit+0x48>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <HAL_MspInit+0x48>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c72:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <HAL_MspInit+0x48>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	40023800 	.word	0x40023800

08001c8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08c      	sub	sp, #48	@ 0x30
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a49      	ldr	r2, [pc, #292]	@ (8001dd0 <HAL_ADC_MspInit+0x144>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	f040 808c 	bne.w	8001dc8 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	4b47      	ldr	r3, [pc, #284]	@ (8001dd4 <HAL_ADC_MspInit+0x148>)
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb8:	4a46      	ldr	r2, [pc, #280]	@ (8001dd4 <HAL_ADC_MspInit+0x148>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cbe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc0:	4b44      	ldr	r3, [pc, #272]	@ (8001dd4 <HAL_ADC_MspInit+0x148>)
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	4b40      	ldr	r3, [pc, #256]	@ (8001dd4 <HAL_ADC_MspInit+0x148>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd4:	4a3f      	ldr	r2, [pc, #252]	@ (8001dd4 <HAL_ADC_MspInit+0x148>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cdc:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd4 <HAL_ADC_MspInit+0x148>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	4b39      	ldr	r3, [pc, #228]	@ (8001dd4 <HAL_ADC_MspInit+0x148>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf0:	4a38      	ldr	r2, [pc, #224]	@ (8001dd4 <HAL_ADC_MspInit+0x148>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf8:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <HAL_ADC_MspInit+0x148>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <HAL_ADC_MspInit+0x148>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0c:	4a31      	ldr	r2, [pc, #196]	@ (8001dd4 <HAL_ADC_MspInit+0x148>)
 8001d0e:	f043 0302 	orr.w	r3, r3, #2
 8001d12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d14:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd4 <HAL_ADC_MspInit+0x148>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Right_Receiver_Pin|Right_Front_Receiver_Pin;
 8001d20:	2344      	movs	r3, #68	@ 0x44
 8001d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d24:	2303      	movs	r3, #3
 8001d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4619      	mov	r1, r3
 8001d32:	4829      	ldr	r0, [pc, #164]	@ (8001dd8 <HAL_ADC_MspInit+0x14c>)
 8001d34:	f001 fbbc 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_Front_Receiver_Pin;
 8001d38:	2310      	movs	r3, #16
 8001d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Left_Front_Receiver_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4824      	ldr	r0, [pc, #144]	@ (8001ddc <HAL_ADC_MspInit+0x150>)
 8001d4c:	f001 fbb0 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_Receiver_Pin;
 8001d50:	2302      	movs	r3, #2
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d54:	2303      	movs	r3, #3
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Left_Receiver_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	481f      	ldr	r0, [pc, #124]	@ (8001de0 <HAL_ADC_MspInit+0x154>)
 8001d64:	f001 fba4 	bl	80034b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d68:	4b1e      	ldr	r3, [pc, #120]	@ (8001de4 <HAL_ADC_MspInit+0x158>)
 8001d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001de8 <HAL_ADC_MspInit+0x15c>)
 8001d6c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001de4 <HAL_ADC_MspInit+0x158>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <HAL_ADC_MspInit+0x158>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001de4 <HAL_ADC_MspInit+0x158>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d80:	4b18      	ldr	r3, [pc, #96]	@ (8001de4 <HAL_ADC_MspInit+0x158>)
 8001d82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d86:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d88:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <HAL_ADC_MspInit+0x158>)
 8001d8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d8e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d90:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <HAL_ADC_MspInit+0x158>)
 8001d92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d96:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_ADC_MspInit+0x158>)
 8001d9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d9e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001da0:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <HAL_ADC_MspInit+0x158>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001da6:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <HAL_ADC_MspInit+0x158>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001dac:	480d      	ldr	r0, [pc, #52]	@ (8001de4 <HAL_ADC_MspInit+0x158>)
 8001dae:	f000 ffa3 	bl	8002cf8 <HAL_DMA_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001db8:	f7ff fd28 	bl	800180c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a09      	ldr	r2, [pc, #36]	@ (8001de4 <HAL_ADC_MspInit+0x158>)
 8001dc0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dc2:	4a08      	ldr	r2, [pc, #32]	@ (8001de4 <HAL_ADC_MspInit+0x158>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001dc8:	bf00      	nop
 8001dca:	3730      	adds	r7, #48	@ 0x30
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40012000 	.word	0x40012000
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40020400 	.word	0x40020400
 8001de4:	2000018c 	.word	0x2000018c
 8001de8:	40026410 	.word	0x40026410

08001dec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08c      	sub	sp, #48	@ 0x30
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a32      	ldr	r2, [pc, #200]	@ (8001ed4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d12d      	bne.n	8001e6a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	4a30      	ldr	r2, [pc, #192]	@ (8001ed8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a29      	ldr	r2, [pc, #164]	@ (8001ed8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Left_Encoder_1_Pin|Left_Encoder_2_Pin;
 8001e46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	481e      	ldr	r0, [pc, #120]	@ (8001edc <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e64:	f001 fb24 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e68:	e030      	b.n	8001ecc <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e72:	d12b      	bne.n	8001ecc <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	4a16      	ldr	r2, [pc, #88]	@ (8001ed8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e84:	4b14      	ldr	r3, [pc, #80]	@ (8001ed8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e98:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Right_Encoder_1_Pin|Right_Encoder_2_Pin;
 8001eac:	2303      	movs	r3, #3
 8001eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4805      	ldr	r0, [pc, #20]	@ (8001edc <HAL_TIM_Encoder_MspInit+0xf0>)
 8001ec8:	f001 faf2 	bl	80034b0 <HAL_GPIO_Init>
}
 8001ecc:	bf00      	nop
 8001ece:	3730      	adds	r7, #48	@ 0x30
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020000 	.word	0x40020000

08001ee0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1c      	ldr	r2, [pc, #112]	@ (8001f60 <HAL_TIM_PWM_MspInit+0x80>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d116      	bne.n	8001f20 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <HAL_TIM_PWM_MspInit+0x84>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	4a1a      	ldr	r2, [pc, #104]	@ (8001f64 <HAL_TIM_PWM_MspInit+0x84>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f02:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <HAL_TIM_PWM_MspInit+0x84>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	201d      	movs	r0, #29
 8001f14:	f000 feb9 	bl	8002c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f18:	201d      	movs	r0, #29
 8001f1a:	f000 fed2 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f1e:	e01a      	b.n	8001f56 <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM4)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a10      	ldr	r2, [pc, #64]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x88>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d115      	bne.n	8001f56 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <HAL_TIM_PWM_MspInit+0x84>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	4a0c      	ldr	r2, [pc, #48]	@ (8001f64 <HAL_TIM_PWM_MspInit+0x84>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <HAL_TIM_PWM_MspInit+0x84>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	201e      	movs	r0, #30
 8001f4c:	f000 fe9d 	bl	8002c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f50:	201e      	movs	r0, #30
 8001f52:	f000 feb6 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40000400 	.word	0x40000400
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40000800 	.word	0x40000800

08001f6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	@ 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a24      	ldr	r2, [pc, #144]	@ (800201c <HAL_TIM_MspPostInit+0xb0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d11e      	bne.n	8001fcc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	4b23      	ldr	r3, [pc, #140]	@ (8002020 <HAL_TIM_MspPostInit+0xb4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a22      	ldr	r2, [pc, #136]	@ (8002020 <HAL_TIM_MspPostInit+0xb4>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b20      	ldr	r3, [pc, #128]	@ (8002020 <HAL_TIM_MspPostInit+0xb4>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Driver_Input_1v2_Pin;
 8001faa:	2340      	movs	r3, #64	@ 0x40
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Driver_Input_1v2_GPIO_Port, &GPIO_InitStruct);
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4817      	ldr	r0, [pc, #92]	@ (8002024 <HAL_TIM_MspPostInit+0xb8>)
 8001fc6:	f001 fa73 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001fca:	e023      	b.n	8002014 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a15      	ldr	r2, [pc, #84]	@ (8002028 <HAL_TIM_MspPostInit+0xbc>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d11e      	bne.n	8002014 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <HAL_TIM_MspPostInit+0xb4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a10      	ldr	r2, [pc, #64]	@ (8002020 <HAL_TIM_MspPostInit+0xb4>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8002020 <HAL_TIM_MspPostInit+0xb4>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Driver_Input_2_Pin|Driver_Input_3_Pin|Driver_Input_4_Pin;
 8001ff2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002004:	2302      	movs	r3, #2
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	4807      	ldr	r0, [pc, #28]	@ (800202c <HAL_TIM_MspPostInit+0xc0>)
 8002010:	f001 fa4e 	bl	80034b0 <HAL_GPIO_Init>
}
 8002014:	bf00      	nop
 8002016:	3728      	adds	r7, #40	@ 0x28
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40000400 	.word	0x40000400
 8002020:	40023800 	.word	0x40023800
 8002024:	40020800 	.word	0x40020800
 8002028:	40000800 	.word	0x40000800
 800202c:	40020400 	.word	0x40020400

08002030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <NMI_Handler+0x4>

08002038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <HardFault_Handler+0x4>

08002040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <MemManage_Handler+0x4>

08002048 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <UsageFault_Handler+0x4>

08002058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002080:	f000 f8e2 	bl	8002248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 8002084:	f000 f826 	bl	80020d4 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}

0800208c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <TIM3_IRQHandler+0x10>)
 8002092:	f002 fa15 	bl	80044c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000027c 	.word	0x2000027c

080020a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <TIM4_IRQHandler+0x10>)
 80020a6:	f002 fa0b 	bl	80044c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200002c4 	.word	0x200002c4

080020b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <DMA2_Stream0_IRQHandler+0x10>)
 80020ba:	f000 ff93 	bl	8002fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2000018c 	.word	0x2000018c

080020c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <SysTickFunction>:

#include "main.h"
#include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */
	 updatePID(0.001);
 80020da:	481b      	ldr	r0, [pc, #108]	@ (8002148 <SysTickFunction+0x74>)
 80020dc:	f7ff fc2e 	bl	800193c <updatePID>
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 80020e0:	f7fe ff7e 	bl	8000fe0 <getRightEncoderCounts>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	f647 1318 	movw	r3, #31000	@ 0x7918
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dc15      	bgt.n	800211c <SysTickFunction+0x48>
 80020f0:	f7fe ff80 	bl	8000ff4 <getLeftEncoderCounts>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	f647 1318 	movw	r3, #31000	@ 0x7918
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dc0d      	bgt.n	800211c <SysTickFunction+0x48>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8002100:	f7fe ff6e 	bl	8000fe0 <getRightEncoderCounts>
 8002104:	4603      	mov	r3, r0
 8002106:	461a      	mov	r2, r3
 8002108:	4b10      	ldr	r3, [pc, #64]	@ (800214c <SysTickFunction+0x78>)
 800210a:	429a      	cmp	r2, r3
 800210c:	db06      	blt.n	800211c <SysTickFunction+0x48>
 800210e:	f7fe ff71 	bl	8000ff4 <getLeftEncoderCounts>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <SysTickFunction+0x78>)
 8002118:	429a      	cmp	r2, r3
 800211a:	da11      	bge.n	8002140 <SysTickFunction+0x6c>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 800211c:	f7fe ff60 	bl	8000fe0 <getRightEncoderCounts>
 8002120:	4603      	mov	r3, r0
 8002122:	b29c      	uxth	r4, r3
 8002124:	f7fe ff66 	bl	8000ff4 <getLeftEncoderCounts>
 8002128:	4603      	mov	r3, r0
 800212a:	b29b      	uxth	r3, r3
 800212c:	1ae3      	subs	r3, r4, r3
 800212e:	b29b      	uxth	r3, r3
 8002130:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 8002132:	f7fe ff6b 	bl	800100c <resetEncoders>
		TIM2->CNT = (int16_t) difference; //set right encoder counts to difference
 8002136:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800213a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800213e:	6253      	str	r3, [r2, #36]	@ 0x24
	}
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bd90      	pop	{r4, r7, pc}
 8002148:	3a83126f 	.word	0x3a83126f
 800214c:	ffff86e8 	.word	0xffff86e8

08002150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002188 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002154:	f7ff ffb8 	bl	80020c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002158:	480c      	ldr	r0, [pc, #48]	@ (800218c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800215a:	490d      	ldr	r1, [pc, #52]	@ (8002190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800215c:	4a0d      	ldr	r2, [pc, #52]	@ (8002194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002160:	e002      	b.n	8002168 <LoopCopyDataInit>

08002162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002166:	3304      	adds	r3, #4

08002168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800216c:	d3f9      	bcc.n	8002162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216e:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002170:	4c0a      	ldr	r4, [pc, #40]	@ (800219c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002174:	e001      	b.n	800217a <LoopFillZerobss>

08002176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002178:	3204      	adds	r2, #4

0800217a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800217c:	d3fb      	bcc.n	8002176 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800217e:	f002 fe8d 	bl	8004e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002182:	f7ff f82d 	bl	80011e0 <main>
  bx  lr    
 8002186:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800218c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002190:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002194:	08004f24 	.word	0x08004f24
  ldr r2, =_sbss
 8002198:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800219c:	20000360 	.word	0x20000360

080021a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC_IRQHandler>
	...

080021a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a8:	4b0e      	ldr	r3, [pc, #56]	@ (80021e4 <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0d      	ldr	r2, [pc, #52]	@ (80021e4 <HAL_Init+0x40>)
 80021ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b4:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <HAL_Init+0x40>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <HAL_Init+0x40>)
 80021ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <HAL_Init+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	@ (80021e4 <HAL_Init+0x40>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 fd51 	bl	8002c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d2:	200f      	movs	r0, #15
 80021d4:	f000 f808 	bl	80021e8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80021d8:	f7ff fd32 	bl	8001c40 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023c00 	.word	0x40023c00

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_InitTick+0x54>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b12      	ldr	r3, [pc, #72]	@ (8002240 <HAL_InitTick+0x58>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fd69 	bl	8002cde <HAL_SYSTICK_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e00e      	b.n	8002234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d80a      	bhi.n	8002232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002224:	f000 fd31 	bl	8002c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002228:	4a06      	ldr	r2, [pc, #24]	@ (8002244 <HAL_InitTick+0x5c>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000018 	.word	0x20000018
 8002240:	20000020 	.word	0x20000020
 8002244:	2000001c 	.word	0x2000001c

08002248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800224c:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_IncTick+0x1c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <HAL_IncTick+0x20>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a03      	ldr	r2, [pc, #12]	@ (8002268 <HAL_IncTick+0x20>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	20000020 	.word	0x20000020
 8002268:	2000035c 	.word	0x2000035c

0800226c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b02      	ldr	r3, [pc, #8]	@ (800227c <HAL_GetTick+0x10>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	2000035c 	.word	0x2000035c

08002280 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e033      	b.n	80022fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff fcf4 	bl	8001c8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d118      	bne.n	80022f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022c6:	f023 0302 	bic.w	r3, r3, #2
 80022ca:	f043 0202 	orr.w	r2, r3, #2
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fa7a 	bl	80027cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80022ee:	e001      	b.n	80022f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_ADC_Start_DMA+0x1e>
 8002322:	2302      	movs	r3, #2
 8002324:	e0bc      	b.n	80024a0 <HAL_ADC_Start_DMA+0x198>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d018      	beq.n	800236e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800234c:	4b56      	ldr	r3, [pc, #344]	@ (80024a8 <HAL_ADC_Start_DMA+0x1a0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a56      	ldr	r2, [pc, #344]	@ (80024ac <HAL_ADC_Start_DMA+0x1a4>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0c9a      	lsrs	r2, r3, #18
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8002360:	e002      	b.n	8002368 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	3b01      	subs	r3, #1
 8002366:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f9      	bne.n	8002362 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	f040 8084 	bne.w	8002486 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023a8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023bc:	d106      	bne.n	80023cc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	f023 0206 	bic.w	r2, r3, #6
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80023ca:	e002      	b.n	80023d2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023de:	4a34      	ldr	r2, [pc, #208]	@ (80024b0 <HAL_ADC_Start_DMA+0x1a8>)
 80023e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e6:	4a33      	ldr	r2, [pc, #204]	@ (80024b4 <HAL_ADC_Start_DMA+0x1ac>)
 80023e8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ee:	4a32      	ldr	r2, [pc, #200]	@ (80024b8 <HAL_ADC_Start_DMA+0x1b0>)
 80023f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80023fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800240a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800241a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	334c      	adds	r3, #76	@ 0x4c
 8002426:	4619      	mov	r1, r3
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f000 fd12 	bl	8002e54 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002430:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <HAL_ADC_Start_DMA+0x1b4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10f      	bne.n	800245c <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d129      	bne.n	800249e <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	e020      	b.n	800249e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a17      	ldr	r2, [pc, #92]	@ (80024c0 <HAL_ADC_Start_DMA+0x1b8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d11b      	bne.n	800249e <HAL_ADC_Start_DMA+0x196>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d114      	bne.n	800249e <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	e00b      	b.n	800249e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f043 0210 	orr.w	r2, r3, #16
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	f043 0201 	orr.w	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000018 	.word	0x20000018
 80024ac:	431bde83 	.word	0x431bde83
 80024b0:	080029d9 	.word	0x080029d9
 80024b4:	08002a93 	.word	0x08002a93
 80024b8:	08002aaf 	.word	0x08002aaf
 80024bc:	40012300 	.word	0x40012300
 80024c0:	40012000 	.word	0x40012000

080024c4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_ADC_Stop_DMA+0x1a>
 80024da:	2302      	movs	r3, #2
 80024dc:	e03f      	b.n	800255e <HAL_ADC_Stop_DMA+0x9a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d127      	bne.n	8002554 <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002512:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002518:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d118      	bne.n	8002554 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fcec 	bl	8002f04 <HAL_DMA_Abort>
 800252c:	4603      	mov	r3, r0
 800252e:	73fb      	strb	r3, [r7, #15]
      
      /* Disable ADC overrun interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800253e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
	...

0800258c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1c>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e103      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x224>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b09      	cmp	r3, #9
 80025b6:	d925      	bls.n	8002604 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68d9      	ldr	r1, [r3, #12]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	3b1e      	subs	r3, #30
 80025ce:	2207      	movs	r2, #7
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43da      	mvns	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	400a      	ands	r2, r1
 80025dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68d9      	ldr	r1, [r3, #12]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	4603      	mov	r3, r0
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4403      	add	r3, r0
 80025f6:	3b1e      	subs	r3, #30
 80025f8:	409a      	lsls	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	e022      	b.n	800264a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6919      	ldr	r1, [r3, #16]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	2207      	movs	r2, #7
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	400a      	ands	r2, r1
 8002626:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6919      	ldr	r1, [r3, #16]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	4603      	mov	r3, r0
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4403      	add	r3, r0
 8002640:	409a      	lsls	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b06      	cmp	r3, #6
 8002650:	d824      	bhi.n	800269c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	3b05      	subs	r3, #5
 8002664:	221f      	movs	r2, #31
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	400a      	ands	r2, r1
 8002672:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	4618      	mov	r0, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	3b05      	subs	r3, #5
 800268e:	fa00 f203 	lsl.w	r2, r0, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	635a      	str	r2, [r3, #52]	@ 0x34
 800269a:	e04c      	b.n	8002736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b0c      	cmp	r3, #12
 80026a2:	d824      	bhi.n	80026ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3b23      	subs	r3, #35	@ 0x23
 80026b6:	221f      	movs	r2, #31
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43da      	mvns	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	400a      	ands	r2, r1
 80026c4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	3b23      	subs	r3, #35	@ 0x23
 80026e0:	fa00 f203 	lsl.w	r2, r0, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80026ec:	e023      	b.n	8002736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	3b41      	subs	r3, #65	@ 0x41
 8002700:	221f      	movs	r2, #31
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	400a      	ands	r2, r1
 800270e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	4618      	mov	r0, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	3b41      	subs	r3, #65	@ 0x41
 800272a:	fa00 f203 	lsl.w	r2, r0, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a20      	ldr	r2, [pc, #128]	@ (80027bc <HAL_ADC_ConfigChannel+0x230>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d109      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x1c8>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b12      	cmp	r3, #18
 8002746:	d105      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002748:	4b1d      	ldr	r3, [pc, #116]	@ (80027c0 <HAL_ADC_ConfigChannel+0x234>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <HAL_ADC_ConfigChannel+0x234>)
 800274e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002752:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a18      	ldr	r2, [pc, #96]	@ (80027bc <HAL_ADC_ConfigChannel+0x230>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d123      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x21a>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b10      	cmp	r3, #16
 8002764:	d003      	beq.n	800276e <HAL_ADC_ConfigChannel+0x1e2>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b11      	cmp	r3, #17
 800276c:	d11b      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800276e:	4b14      	ldr	r3, [pc, #80]	@ (80027c0 <HAL_ADC_ConfigChannel+0x234>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4a13      	ldr	r2, [pc, #76]	@ (80027c0 <HAL_ADC_ConfigChannel+0x234>)
 8002774:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002778:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b10      	cmp	r3, #16
 8002780:	d111      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002782:	4b10      	ldr	r3, [pc, #64]	@ (80027c4 <HAL_ADC_ConfigChannel+0x238>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a10      	ldr	r2, [pc, #64]	@ (80027c8 <HAL_ADC_ConfigChannel+0x23c>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	0c9a      	lsrs	r2, r3, #18
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002798:	e002      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3b01      	subs	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f9      	bne.n	800279a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40012000 	.word	0x40012000
 80027c0:	40012300 	.word	0x40012300
 80027c4:	20000018 	.word	0x20000018
 80027c8:	431bde83 	.word	0x431bde83

080027cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80027d4:	4b7e      	ldr	r3, [pc, #504]	@ (80029d0 <ADC_Init+0x204>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a7d      	ldr	r2, [pc, #500]	@ (80029d0 <ADC_Init+0x204>)
 80027da:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80027de:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80027e0:	4b7b      	ldr	r3, [pc, #492]	@ (80029d0 <ADC_Init+0x204>)
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4979      	ldr	r1, [pc, #484]	@ (80029d0 <ADC_Init+0x204>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	021a      	lsls	r2, r3, #8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002820:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002842:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6899      	ldr	r1, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285a:	4a5e      	ldr	r2, [pc, #376]	@ (80029d4 <ADC_Init+0x208>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d022      	beq.n	80028a6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800286e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6899      	ldr	r1, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002890:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6899      	ldr	r1, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	e00f      	b.n	80028c6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0202 	bic.w	r2, r2, #2
 80028d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6899      	ldr	r1, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7e1b      	ldrb	r3, [r3, #24]
 80028e0:	005a      	lsls	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d027      	beq.n	8002944 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002902:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002912:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	3b01      	subs	r3, #1
 800291a:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800291e:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	fa92 f2a2 	rbit	r2, r2
 8002926:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	fab2 f282 	clz	r2, r2
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	fa03 f102 	lsl.w	r1, r3, r2
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	e007      	b.n	8002954 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002952:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002962:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	3b01      	subs	r3, #1
 8002970:	051a      	lsls	r2, r3, #20
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002988:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002996:	025a      	lsls	r2, r3, #9
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6899      	ldr	r1, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	029a      	lsls	r2, r3, #10
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	609a      	str	r2, [r3, #8]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40012300 	.word	0x40012300
 80029d4:	0f000001 	.word	0x0f000001

080029d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d13c      	bne.n	8002a6c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d12b      	bne.n	8002a64 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d127      	bne.n	8002a64 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d006      	beq.n	8002a30 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d119      	bne.n	8002a64 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0220 	bic.w	r2, r2, #32
 8002a3e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d105      	bne.n	8002a64 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	f043 0201 	orr.w	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f7fe fbab 	bl	80011c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a6a:	e00e      	b.n	8002a8a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff fd7d 	bl	8002578 <HAL_ADC_ErrorCallback>
}
 8002a7e:	e004      	b.n	8002a8a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	4798      	blx	r3
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f7ff fd60 	bl	8002566 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2240      	movs	r2, #64	@ 0x40
 8002ac0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	f043 0204 	orr.w	r2, r3, #4
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f7ff fd52 	bl	8002578 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aec:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002af8:	4013      	ands	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0e:	4a04      	ldr	r2, [pc, #16]	@ (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	60d3      	str	r3, [r2, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b28:	4b04      	ldr	r3, [pc, #16]	@ (8002b3c <__NVIC_GetPriorityGrouping+0x18>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	f003 0307 	and.w	r3, r3, #7
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	db0b      	blt.n	8002b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	4906      	ldr	r1, [pc, #24]	@ (8002b74 <__NVIC_EnableIRQ+0x34>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2001      	movs	r0, #1
 8002b62:	fa00 f202 	lsl.w	r2, r0, r2
 8002b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	@ (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	@ (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	@ 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf28      	it	cs
 8002bea:	2304      	movcs	r3, #4
 8002bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d902      	bls.n	8002bfc <NVIC_EncodePriority+0x30>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3b03      	subs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <NVIC_EncodePriority+0x32>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	401a      	ands	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	4313      	orrs	r3, r2
         );
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	@ 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c40:	d301      	bcc.n	8002c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c42:	2301      	movs	r3, #1
 8002c44:	e00f      	b.n	8002c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c46:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <SysTick_Config+0x40>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c4e:	210f      	movs	r1, #15
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c54:	f7ff ff90 	bl	8002b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c58:	4b05      	ldr	r3, [pc, #20]	@ (8002c70 <SysTick_Config+0x40>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5e:	4b04      	ldr	r3, [pc, #16]	@ (8002c70 <SysTick_Config+0x40>)
 8002c60:	2207      	movs	r2, #7
 8002c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	e000e010 	.word	0xe000e010

08002c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ff2d 	bl	8002adc <__NVIC_SetPriorityGrouping>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c9c:	f7ff ff42 	bl	8002b24 <__NVIC_GetPriorityGrouping>
 8002ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7ff ff90 	bl	8002bcc <NVIC_EncodePriority>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff5f 	bl	8002b78 <__NVIC_SetPriority>
}
 8002cba:	bf00      	nop
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff35 	bl	8002b40 <__NVIC_EnableIRQ>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ffa2 	bl	8002c30 <SysTick_Config>
 8002cec:	4603      	mov	r3, r0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7ff fab2 	bl	800226c <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e099      	b.n	8002e48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d34:	e00f      	b.n	8002d56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d36:	f7ff fa99 	bl	800226c <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d908      	bls.n	8002d56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e078      	b.n	8002e48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1e8      	bne.n	8002d36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4b38      	ldr	r3, [pc, #224]	@ (8002e50 <HAL_DMA_Init+0x158>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d107      	bne.n	8002dc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db8:	4313      	orrs	r3, r2
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f023 0307 	bic.w	r3, r3, #7
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d117      	bne.n	8002e1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00e      	beq.n	8002e1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fadd 	bl	80033bc <DMA_CheckFifoParam>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2240      	movs	r2, #64	@ 0x40
 8002e0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e16:	2301      	movs	r3, #1
 8002e18:	e016      	b.n	8002e48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fa96 	bl	8003354 <DMA_CalcBaseAndBitshift>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e30:	223f      	movs	r2, #63	@ 0x3f
 8002e32:	409a      	lsls	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	f010803f 	.word	0xf010803f

08002e54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_DMA_Start_IT+0x26>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e040      	b.n	8002efc <HAL_DMA_Start_IT+0xa8>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d12f      	bne.n	8002eee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fa28 	bl	80032f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eac:	223f      	movs	r2, #63	@ 0x3f
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0216 	orr.w	r2, r2, #22
 8002ec2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0208 	orr.w	r2, r2, #8
 8002eda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e005      	b.n	8002efa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f12:	f7ff f9ab 	bl	800226c <HAL_GetTick>
 8002f16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d008      	beq.n	8002f36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2280      	movs	r2, #128	@ 0x80
 8002f28:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e052      	b.n	8002fdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0216 	bic.w	r2, r2, #22
 8002f44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <HAL_DMA_Abort+0x62>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0208 	bic.w	r2, r2, #8
 8002f74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f86:	e013      	b.n	8002fb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f88:	f7ff f970 	bl	800226c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d90c      	bls.n	8002fb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e015      	b.n	8002fdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1e4      	bne.n	8002f88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	223f      	movs	r2, #63	@ 0x3f
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ff0:	4b8e      	ldr	r3, [pc, #568]	@ (800322c <HAL_DMA_IRQHandler+0x248>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a8e      	ldr	r2, [pc, #568]	@ (8003230 <HAL_DMA_IRQHandler+0x24c>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0a9b      	lsrs	r3, r3, #10
 8002ffc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003002:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300e:	2208      	movs	r2, #8
 8003010:	409a      	lsls	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d01a      	beq.n	8003050 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d013      	beq.n	8003050 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0204 	bic.w	r2, r2, #4
 8003036:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303c:	2208      	movs	r2, #8
 800303e:	409a      	lsls	r2, r3
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003048:	f043 0201 	orr.w	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003054:	2201      	movs	r2, #1
 8003056:	409a      	lsls	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d012      	beq.n	8003086 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00b      	beq.n	8003086 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003072:	2201      	movs	r2, #1
 8003074:	409a      	lsls	r2, r3
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307e:	f043 0202 	orr.w	r2, r3, #2
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308a:	2204      	movs	r2, #4
 800308c:	409a      	lsls	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d012      	beq.n	80030bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00b      	beq.n	80030bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a8:	2204      	movs	r2, #4
 80030aa:	409a      	lsls	r2, r3
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b4:	f043 0204 	orr.w	r2, r3, #4
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c0:	2210      	movs	r2, #16
 80030c2:	409a      	lsls	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d043      	beq.n	8003154 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d03c      	beq.n	8003154 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030de:	2210      	movs	r2, #16
 80030e0:	409a      	lsls	r2, r3
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d018      	beq.n	8003126 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d108      	bne.n	8003114 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d024      	beq.n	8003154 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
 8003112:	e01f      	b.n	8003154 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01b      	beq.n	8003154 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4798      	blx	r3
 8003124:	e016      	b.n	8003154 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d107      	bne.n	8003144 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0208 	bic.w	r2, r2, #8
 8003142:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003158:	2220      	movs	r2, #32
 800315a:	409a      	lsls	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 808f 	beq.w	8003284 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8087 	beq.w	8003284 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317a:	2220      	movs	r2, #32
 800317c:	409a      	lsls	r2, r3
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b05      	cmp	r3, #5
 800318c:	d136      	bne.n	80031fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0216 	bic.w	r2, r2, #22
 800319c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <HAL_DMA_IRQHandler+0x1da>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0208 	bic.w	r2, r2, #8
 80031cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d2:	223f      	movs	r2, #63	@ 0x3f
 80031d4:	409a      	lsls	r2, r3
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d07e      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	4798      	blx	r3
        }
        return;
 80031fa:	e079      	b.n	80032f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01d      	beq.n	8003246 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10d      	bne.n	8003234 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321c:	2b00      	cmp	r3, #0
 800321e:	d031      	beq.n	8003284 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
 8003228:	e02c      	b.n	8003284 <HAL_DMA_IRQHandler+0x2a0>
 800322a:	bf00      	nop
 800322c:	20000018 	.word	0x20000018
 8003230:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d023      	beq.n	8003284 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4798      	blx	r3
 8003244:	e01e      	b.n	8003284 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10f      	bne.n	8003274 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0210 	bic.w	r2, r2, #16
 8003262:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003288:	2b00      	cmp	r3, #0
 800328a:	d032      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d022      	beq.n	80032de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2205      	movs	r2, #5
 800329c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0201 	bic.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	3301      	adds	r3, #1
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d307      	bcc.n	80032cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f2      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x2cc>
 80032ca:	e000      	b.n	80032ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	4798      	blx	r3
 80032ee:	e000      	b.n	80032f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032f0:	bf00      	nop
    }
  }
}
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003314:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b40      	cmp	r3, #64	@ 0x40
 8003324:	d108      	bne.n	8003338 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003336:	e007      	b.n	8003348 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	60da      	str	r2, [r3, #12]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
	...

08003354 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	3b10      	subs	r3, #16
 8003364:	4a13      	ldr	r2, [pc, #76]	@ (80033b4 <DMA_CalcBaseAndBitshift+0x60>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800336e:	4a12      	ldr	r2, [pc, #72]	@ (80033b8 <DMA_CalcBaseAndBitshift+0x64>)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b03      	cmp	r3, #3
 8003380:	d909      	bls.n	8003396 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800338a:	f023 0303 	bic.w	r3, r3, #3
 800338e:	1d1a      	adds	r2, r3, #4
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	659a      	str	r2, [r3, #88]	@ 0x58
 8003394:	e007      	b.n	80033a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800339e:	f023 0303 	bic.w	r3, r3, #3
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	aaaaaaab 	.word	0xaaaaaaab
 80033b8:	08004f0c 	.word	0x08004f0c

080033bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d11f      	bne.n	8003416 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d856      	bhi.n	800348a <DMA_CheckFifoParam+0xce>
 80033dc:	a201      	add	r2, pc, #4	@ (adr r2, 80033e4 <DMA_CheckFifoParam+0x28>)
 80033de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e2:	bf00      	nop
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	08003407 	.word	0x08003407
 80033ec:	080033f5 	.word	0x080033f5
 80033f0:	0800348b 	.word	0x0800348b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d046      	beq.n	800348e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003404:	e043      	b.n	800348e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800340e:	d140      	bne.n	8003492 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003414:	e03d      	b.n	8003492 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800341e:	d121      	bne.n	8003464 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d837      	bhi.n	8003496 <DMA_CheckFifoParam+0xda>
 8003426:	a201      	add	r2, pc, #4	@ (adr r2, 800342c <DMA_CheckFifoParam+0x70>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	0800343d 	.word	0x0800343d
 8003430:	08003443 	.word	0x08003443
 8003434:	0800343d 	.word	0x0800343d
 8003438:	08003455 	.word	0x08003455
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
      break;
 8003440:	e030      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003446:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d025      	beq.n	800349a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003452:	e022      	b.n	800349a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800345c:	d11f      	bne.n	800349e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003462:	e01c      	b.n	800349e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d903      	bls.n	8003472 <DMA_CheckFifoParam+0xb6>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d003      	beq.n	8003478 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003470:	e018      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
      break;
 8003476:	e015      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00e      	beq.n	80034a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      break;
 8003488:	e00b      	b.n	80034a2 <DMA_CheckFifoParam+0xe6>
      break;
 800348a:	bf00      	nop
 800348c:	e00a      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 800348e:	bf00      	nop
 8003490:	e008      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003492:	bf00      	nop
 8003494:	e006      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003496:	bf00      	nop
 8003498:	e004      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 800349a:	bf00      	nop
 800349c:	e002      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 80034a2:	bf00      	nop
    }
  } 
  
  return status; 
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034be:	e16f      	b.n	80037a0 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	2101      	movs	r1, #1
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	fa01 f303 	lsl.w	r3, r1, r3
 80034cc:	4013      	ands	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8161 	beq.w	800379a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d005      	beq.n	80034f0 <HAL_GPIO_Init+0x40>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d130      	bne.n	8003552 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	2203      	movs	r2, #3
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4013      	ands	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003526:	2201      	movs	r2, #1
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f003 0201 	and.w	r2, r3, #1
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b03      	cmp	r3, #3
 800355c:	d017      	beq.n	800358e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	2203      	movs	r2, #3
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4013      	ands	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d123      	bne.n	80035e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	08da      	lsrs	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3208      	adds	r2, #8
 80035a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	220f      	movs	r2, #15
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	08da      	lsrs	r2, r3, #3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3208      	adds	r2, #8
 80035dc:	6939      	ldr	r1, [r7, #16]
 80035de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	2203      	movs	r2, #3
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 0203 	and.w	r2, r3, #3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80bb 	beq.w	800379a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003624:	2300      	movs	r3, #0
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	4b64      	ldr	r3, [pc, #400]	@ (80037bc <HAL_GPIO_Init+0x30c>)
 800362a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362c:	4a63      	ldr	r2, [pc, #396]	@ (80037bc <HAL_GPIO_Init+0x30c>)
 800362e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003632:	6453      	str	r3, [r2, #68]	@ 0x44
 8003634:	4b61      	ldr	r3, [pc, #388]	@ (80037bc <HAL_GPIO_Init+0x30c>)
 8003636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003638:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003640:	4a5f      	ldr	r2, [pc, #380]	@ (80037c0 <HAL_GPIO_Init+0x310>)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	3302      	adds	r3, #2
 8003648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	220f      	movs	r2, #15
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a57      	ldr	r2, [pc, #348]	@ (80037c4 <HAL_GPIO_Init+0x314>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d031      	beq.n	80036d0 <HAL_GPIO_Init+0x220>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a56      	ldr	r2, [pc, #344]	@ (80037c8 <HAL_GPIO_Init+0x318>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d02b      	beq.n	80036cc <HAL_GPIO_Init+0x21c>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a55      	ldr	r2, [pc, #340]	@ (80037cc <HAL_GPIO_Init+0x31c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d025      	beq.n	80036c8 <HAL_GPIO_Init+0x218>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a54      	ldr	r2, [pc, #336]	@ (80037d0 <HAL_GPIO_Init+0x320>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d01f      	beq.n	80036c4 <HAL_GPIO_Init+0x214>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a53      	ldr	r2, [pc, #332]	@ (80037d4 <HAL_GPIO_Init+0x324>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d019      	beq.n	80036c0 <HAL_GPIO_Init+0x210>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a52      	ldr	r2, [pc, #328]	@ (80037d8 <HAL_GPIO_Init+0x328>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d013      	beq.n	80036bc <HAL_GPIO_Init+0x20c>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a51      	ldr	r2, [pc, #324]	@ (80037dc <HAL_GPIO_Init+0x32c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00d      	beq.n	80036b8 <HAL_GPIO_Init+0x208>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a50      	ldr	r2, [pc, #320]	@ (80037e0 <HAL_GPIO_Init+0x330>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d007      	beq.n	80036b4 <HAL_GPIO_Init+0x204>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a4f      	ldr	r2, [pc, #316]	@ (80037e4 <HAL_GPIO_Init+0x334>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d101      	bne.n	80036b0 <HAL_GPIO_Init+0x200>
 80036ac:	2308      	movs	r3, #8
 80036ae:	e010      	b.n	80036d2 <HAL_GPIO_Init+0x222>
 80036b0:	2309      	movs	r3, #9
 80036b2:	e00e      	b.n	80036d2 <HAL_GPIO_Init+0x222>
 80036b4:	2307      	movs	r3, #7
 80036b6:	e00c      	b.n	80036d2 <HAL_GPIO_Init+0x222>
 80036b8:	2306      	movs	r3, #6
 80036ba:	e00a      	b.n	80036d2 <HAL_GPIO_Init+0x222>
 80036bc:	2305      	movs	r3, #5
 80036be:	e008      	b.n	80036d2 <HAL_GPIO_Init+0x222>
 80036c0:	2304      	movs	r3, #4
 80036c2:	e006      	b.n	80036d2 <HAL_GPIO_Init+0x222>
 80036c4:	2303      	movs	r3, #3
 80036c6:	e004      	b.n	80036d2 <HAL_GPIO_Init+0x222>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e002      	b.n	80036d2 <HAL_GPIO_Init+0x222>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_GPIO_Init+0x222>
 80036d0:	2300      	movs	r3, #0
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	f002 0203 	and.w	r2, r2, #3
 80036d8:	0092      	lsls	r2, r2, #2
 80036da:	4093      	lsls	r3, r2
 80036dc:	461a      	mov	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036e4:	4936      	ldr	r1, [pc, #216]	@ (80037c0 <HAL_GPIO_Init+0x310>)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	089b      	lsrs	r3, r3, #2
 80036ea:	3302      	adds	r3, #2
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036f2:	4b3d      	ldr	r3, [pc, #244]	@ (80037e8 <HAL_GPIO_Init+0x338>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003716:	4a34      	ldr	r2, [pc, #208]	@ (80037e8 <HAL_GPIO_Init+0x338>)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800371c:	4b32      	ldr	r3, [pc, #200]	@ (80037e8 <HAL_GPIO_Init+0x338>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	43db      	mvns	r3, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003740:	4a29      	ldr	r2, [pc, #164]	@ (80037e8 <HAL_GPIO_Init+0x338>)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003746:	4b28      	ldr	r3, [pc, #160]	@ (80037e8 <HAL_GPIO_Init+0x338>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	43db      	mvns	r3, r3
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800376a:	4a1f      	ldr	r2, [pc, #124]	@ (80037e8 <HAL_GPIO_Init+0x338>)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003770:	4b1d      	ldr	r3, [pc, #116]	@ (80037e8 <HAL_GPIO_Init+0x338>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	43db      	mvns	r3, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003794:	4a14      	ldr	r2, [pc, #80]	@ (80037e8 <HAL_GPIO_Init+0x338>)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	3301      	adds	r3, #1
 800379e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa22 f303 	lsr.w	r3, r2, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f47f ae88 	bne.w	80034c0 <HAL_GPIO_Init+0x10>
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40013800 	.word	0x40013800
 80037c4:	40020000 	.word	0x40020000
 80037c8:	40020400 	.word	0x40020400
 80037cc:	40020800 	.word	0x40020800
 80037d0:	40020c00 	.word	0x40020c00
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40021400 	.word	0x40021400
 80037dc:	40021800 	.word	0x40021800
 80037e0:	40021c00 	.word	0x40021c00
 80037e4:	40022000 	.word	0x40022000
 80037e8:	40013c00 	.word	0x40013c00

080037ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
 80037f8:	4613      	mov	r3, r2
 80037fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037fc:	787b      	ldrb	r3, [r7, #1]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003808:	e003      	b.n	8003812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800380a:	887b      	ldrh	r3, [r7, #2]
 800380c:	041a      	lsls	r2, r3, #16
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	619a      	str	r2, [r3, #24]
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08a      	sub	sp, #40	@ 0x28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e23b      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d050      	beq.n	80038dc <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800383a:	4b9e      	ldr	r3, [pc, #632]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b04      	cmp	r3, #4
 8003844:	d00c      	beq.n	8003860 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003846:	4b9b      	ldr	r3, [pc, #620]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800384e:	2b08      	cmp	r3, #8
 8003850:	d112      	bne.n	8003878 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003852:	4b98      	ldr	r3, [pc, #608]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800385a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800385e:	d10b      	bne.n	8003878 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	4b94      	ldr	r3, [pc, #592]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d036      	beq.n	80038da <HAL_RCC_OscConfig+0xbe>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d132      	bne.n	80038da <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e216      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	4b8e      	ldr	r3, [pc, #568]	@ (8003ab8 <HAL_RCC_OscConfig+0x29c>)
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d013      	beq.n	80038b2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388a:	f7fe fcef 	bl	800226c <HAL_GetTick>
 800388e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003892:	f7fe fceb 	bl	800226c <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b64      	cmp	r3, #100	@ 0x64
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e200      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a4:	4b83      	ldr	r3, [pc, #524]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x76>
 80038b0:	e014      	b.n	80038dc <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b2:	f7fe fcdb 	bl	800226c <HAL_GetTick>
 80038b6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ba:	f7fe fcd7 	bl	800226c <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b64      	cmp	r3, #100	@ 0x64
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e1ec      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038cc:	4b79      	ldr	r3, [pc, #484]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f0      	bne.n	80038ba <HAL_RCC_OscConfig+0x9e>
 80038d8:	e000      	b.n	80038dc <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d077      	beq.n	80039d8 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038e8:	4b72      	ldr	r3, [pc, #456]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f4:	4b6f      	ldr	r3, [pc, #444]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d126      	bne.n	800394e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003900:	4b6c      	ldr	r3, [pc, #432]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d120      	bne.n	800394e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390c:	4b69      	ldr	r3, [pc, #420]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_OscConfig+0x108>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d001      	beq.n	8003924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e1c0      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4b63      	ldr	r3, [pc, #396]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	21f8      	movs	r1, #248	@ 0xf8
 8003932:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	69b9      	ldr	r1, [r7, #24]
 8003936:	fa91 f1a1 	rbit	r1, r1
 800393a:	6179      	str	r1, [r7, #20]
  return result;
 800393c:	6979      	ldr	r1, [r7, #20]
 800393e:	fab1 f181 	clz	r1, r1
 8003942:	b2c9      	uxtb	r1, r1
 8003944:	408b      	lsls	r3, r1
 8003946:	495b      	ldr	r1, [pc, #364]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394c:	e044      	b.n	80039d8 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d02a      	beq.n	80039ac <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003956:	4b59      	ldr	r3, [pc, #356]	@ (8003abc <HAL_RCC_OscConfig+0x2a0>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7fe fc86 	bl	800226c <HAL_GetTick>
 8003960:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003964:	f7fe fc82 	bl	800226c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e197      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003976:	4b4f      	ldr	r3, [pc, #316]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003982:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	21f8      	movs	r1, #248	@ 0xf8
 8003990:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	6939      	ldr	r1, [r7, #16]
 8003994:	fa91 f1a1 	rbit	r1, r1
 8003998:	60f9      	str	r1, [r7, #12]
  return result;
 800399a:	68f9      	ldr	r1, [r7, #12]
 800399c:	fab1 f181 	clz	r1, r1
 80039a0:	b2c9      	uxtb	r1, r1
 80039a2:	408b      	lsls	r3, r1
 80039a4:	4943      	ldr	r1, [pc, #268]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
 80039aa:	e015      	b.n	80039d8 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ac:	4b43      	ldr	r3, [pc, #268]	@ (8003abc <HAL_RCC_OscConfig+0x2a0>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b2:	f7fe fc5b 	bl	800226c <HAL_GetTick>
 80039b6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ba:	f7fe fc57 	bl	800226c <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e16c      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039cc:	4b39      	ldr	r3, [pc, #228]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f0      	bne.n	80039ba <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d030      	beq.n	8003a46 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d016      	beq.n	8003a1a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ec:	4b34      	ldr	r3, [pc, #208]	@ (8003ac0 <HAL_RCC_OscConfig+0x2a4>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f2:	f7fe fc3b 	bl	800226c <HAL_GetTick>
 80039f6:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039fa:	f7fe fc37 	bl	800226c <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e14c      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0c:	4b29      	ldr	r3, [pc, #164]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x1de>
 8003a18:	e015      	b.n	8003a46 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a1a:	4b29      	ldr	r3, [pc, #164]	@ (8003ac0 <HAL_RCC_OscConfig+0x2a4>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a20:	f7fe fc24 	bl	800226c <HAL_GetTick>
 8003a24:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a28:	f7fe fc20 	bl	800226c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e135      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 8087 	beq.w	8003b62 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a5a:	4b16      	ldr	r3, [pc, #88]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d110      	bne.n	8003a88 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	4b12      	ldr	r3, [pc, #72]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	4a11      	ldr	r2, [pc, #68]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a76:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a88:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac4 <HAL_RCC_OscConfig+0x2a8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac4 <HAL_RCC_OscConfig+0x2a8>)
 8003a8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a92:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <HAL_RCC_OscConfig+0x2a8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d122      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa0:	4b08      	ldr	r3, [pc, #32]	@ (8003ac4 <HAL_RCC_OscConfig+0x2a8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a07      	ldr	r2, [pc, #28]	@ (8003ac4 <HAL_RCC_OscConfig+0x2a8>)
 8003aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aac:	f7fe fbde 	bl	800226c <HAL_GetTick>
 8003ab0:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab2:	e012      	b.n	8003ada <HAL_RCC_OscConfig+0x2be>
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40023802 	.word	0x40023802
 8003abc:	42470000 	.word	0x42470000
 8003ac0:	42470e80 	.word	0x42470e80
 8003ac4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac8:	f7fe fbd0 	bl	800226c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e0e5      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	4b75      	ldr	r3, [pc, #468]	@ (8003cb0 <HAL_RCC_OscConfig+0x494>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	4b72      	ldr	r3, [pc, #456]	@ (8003cb4 <HAL_RCC_OscConfig+0x498>)
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d015      	beq.n	8003b24 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af8:	f7fe fbb8 	bl	800226c <HAL_GetTick>
 8003afc:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b00:	f7fe fbb4 	bl	800226c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e0c7      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b16:	4b68      	ldr	r3, [pc, #416]	@ (8003cb8 <HAL_RCC_OscConfig+0x49c>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0ee      	beq.n	8003b00 <HAL_RCC_OscConfig+0x2e4>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b24:	f7fe fba2 	bl	800226c <HAL_GetTick>
 8003b28:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b2c:	f7fe fb9e 	bl	800226c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e0b1      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b42:	4b5d      	ldr	r3, [pc, #372]	@ (8003cb8 <HAL_RCC_OscConfig+0x49c>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1ee      	bne.n	8003b2c <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d105      	bne.n	8003b62 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b56:	4b58      	ldr	r3, [pc, #352]	@ (8003cb8 <HAL_RCC_OscConfig+0x49c>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	4a57      	ldr	r2, [pc, #348]	@ (8003cb8 <HAL_RCC_OscConfig+0x49c>)
 8003b5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b60:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 809c 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b6c:	4b52      	ldr	r3, [pc, #328]	@ (8003cb8 <HAL_RCC_OscConfig+0x49c>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d061      	beq.n	8003c3c <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d146      	bne.n	8003c0e <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b80:	4b4e      	ldr	r3, [pc, #312]	@ (8003cbc <HAL_RCC_OscConfig+0x4a0>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b86:	f7fe fb71 	bl	800226c <HAL_GetTick>
 8003b8a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8e:	f7fe fb6d 	bl	800226c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b64      	cmp	r3, #100	@ 0x64
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e082      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba0:	4b45      	ldr	r3, [pc, #276]	@ (8003cb8 <HAL_RCC_OscConfig+0x49c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f0      	bne.n	8003b8e <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bac:	4b42      	ldr	r3, [pc, #264]	@ (8003cb8 <HAL_RCC_OscConfig+0x49c>)
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	4b43      	ldr	r3, [pc, #268]	@ (8003cc0 <HAL_RCC_OscConfig+0x4a4>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	69d1      	ldr	r1, [r2, #28]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6a12      	ldr	r2, [r2, #32]
 8003bbc:	4311      	orrs	r1, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bc2:	0192      	lsls	r2, r2, #6
 8003bc4:	4311      	orrs	r1, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003bca:	0612      	lsls	r2, r2, #24
 8003bcc:	4311      	orrs	r1, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003bd2:	0852      	lsrs	r2, r2, #1
 8003bd4:	3a01      	subs	r2, #1
 8003bd6:	0412      	lsls	r2, r2, #16
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	4937      	ldr	r1, [pc, #220]	@ (8003cb8 <HAL_RCC_OscConfig+0x49c>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be0:	4b36      	ldr	r3, [pc, #216]	@ (8003cbc <HAL_RCC_OscConfig+0x4a0>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be6:	f7fe fb41 	bl	800226c <HAL_GetTick>
 8003bea:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bee:	f7fe fb3d 	bl	800226c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b64      	cmp	r3, #100	@ 0x64
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e052      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c00:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb8 <HAL_RCC_OscConfig+0x49c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x3d2>
 8003c0c:	e04a      	b.n	8003ca4 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003cbc <HAL_RCC_OscConfig+0x4a0>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe fb2a 	bl	800226c <HAL_GetTick>
 8003c18:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c1c:	f7fe fb26 	bl	800226c <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	@ 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e03b      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2e:	4b22      	ldr	r3, [pc, #136]	@ (8003cb8 <HAL_RCC_OscConfig+0x49c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0x400>
 8003c3a:	e033      	b.n	8003ca4 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e02e      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003c48:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb8 <HAL_RCC_OscConfig+0x49c>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d121      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d11a      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c70:	4013      	ands	r3, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c76:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d111      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d107      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9a:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3728      	adds	r7, #40	@ 0x28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	40023870 	.word	0x40023870
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	42470060 	.word	0x42470060
 8003cc0:	f0bc8000 	.word	0xf0bc8000

08003cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0d2      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd8:	4b6b      	ldr	r3, [pc, #428]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d90c      	bls.n	8003d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce6:	4b68      	ldr	r3, [pc, #416]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cee:	4b66      	ldr	r3, [pc, #408]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0be      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d020      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d18:	4b5c      	ldr	r3, [pc, #368]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4a5b      	ldr	r2, [pc, #364]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003d30:	4b56      	ldr	r3, [pc, #344]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4a55      	ldr	r2, [pc, #340]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d3c:	4b53      	ldr	r3, [pc, #332]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4950      	ldr	r1, [pc, #320]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d040      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d107      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	4b4a      	ldr	r3, [pc, #296]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d115      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e085      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d107      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7a:	4b44      	ldr	r3, [pc, #272]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e079      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8a:	4b40      	ldr	r3, [pc, #256]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e071      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f023 0203 	bic.w	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	4939      	ldr	r1, [pc, #228]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dac:	f7fe fa5e 	bl	800226c <HAL_GetTick>
 8003db0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db2:	e00a      	b.n	8003dca <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db4:	f7fe fa5a 	bl	800226c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e059      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dca:	4b30      	ldr	r3, [pc, #192]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 020c 	and.w	r2, r3, #12
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d1eb      	bne.n	8003db4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d20c      	bcs.n	8003e04 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dea:	4b27      	ldr	r3, [pc, #156]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	4b25      	ldr	r3, [pc, #148]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e03c      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e10:	4b1e      	ldr	r3, [pc, #120]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	491b      	ldr	r1, [pc, #108]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e2e:	4b17      	ldr	r3, [pc, #92]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4913      	ldr	r1, [pc, #76]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003e42:	f000 f82b 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003e46:	4601      	mov	r1, r0
 8003e48:	4b10      	ldr	r3, [pc, #64]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e50:	22f0      	movs	r2, #240	@ 0xf0
 8003e52:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	fa92 f2a2 	rbit	r2, r2
 8003e5a:	60fa      	str	r2, [r7, #12]
  return result;
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	fab2 f282 	clz	r2, r2
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	40d3      	lsrs	r3, r2
 8003e66:	4a0a      	ldr	r2, [pc, #40]	@ (8003e90 <HAL_RCC_ClockConfig+0x1cc>)
 8003e68:	5cd3      	ldrb	r3, [r2, r3]
 8003e6a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e6e:	4a09      	ldr	r2, [pc, #36]	@ (8003e94 <HAL_RCC_ClockConfig+0x1d0>)
 8003e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e72:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <HAL_RCC_ClockConfig+0x1d4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe f9b6 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40023c00 	.word	0x40023c00
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	08004efc 	.word	0x08004efc
 8003e94:	20000018 	.word	0x20000018
 8003e98:	2000001c 	.word	0x2000001c

08003e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea0:	b090      	sub	sp, #64	@ 0x40
 8003ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eac:	2300      	movs	r3, #0
 8003eae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eb4:	4b59      	ldr	r3, [pc, #356]	@ (800401c <HAL_RCC_GetSysClockFreq+0x180>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d00d      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x40>
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	f200 80a2 	bhi.w	800400a <HAL_RCC_GetSysClockFreq+0x16e>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ece:	e09c      	b.n	800400a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ed0:	4b53      	ldr	r3, [pc, #332]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003ed4:	e09c      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ed6:	4b53      	ldr	r3, [pc, #332]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003eda:	e099      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003edc:	4b4f      	ldr	r3, [pc, #316]	@ (800401c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ee4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ee6:	4b4d      	ldr	r3, [pc, #308]	@ (800401c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d027      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800401c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	099b      	lsrs	r3, r3, #6
 8003ef8:	2200      	movs	r2, #0
 8003efa:	623b      	str	r3, [r7, #32]
 8003efc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f04:	2100      	movs	r1, #0
 8003f06:	4b47      	ldr	r3, [pc, #284]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f08:	fb03 f201 	mul.w	r2, r3, r1
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	fb00 f303 	mul.w	r3, r0, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	4a43      	ldr	r2, [pc, #268]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f16:	fba0 2102 	umull	r2, r1, r0, r2
 8003f1a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003f1c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f20:	4413      	add	r3, r2
 8003f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f26:	2200      	movs	r2, #0
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	61fa      	str	r2, [r7, #28]
 8003f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f30:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f34:	f7fc fea4 	bl	8000c80 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f40:	e055      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f42:	4b36      	ldr	r3, [pc, #216]	@ (800401c <HAL_RCC_GetSysClockFreq+0x180>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	2200      	movs	r2, #0
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	617a      	str	r2, [r7, #20]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f54:	f04f 0b00 	mov.w	fp, #0
 8003f58:	4652      	mov	r2, sl
 8003f5a:	465b      	mov	r3, fp
 8003f5c:	f04f 0000 	mov.w	r0, #0
 8003f60:	f04f 0100 	mov.w	r1, #0
 8003f64:	0159      	lsls	r1, r3, #5
 8003f66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f6a:	0150      	lsls	r0, r2, #5
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	ebb2 080a 	subs.w	r8, r2, sl
 8003f74:	eb63 090b 	sbc.w	r9, r3, fp
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f84:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f88:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f8c:	ebb2 0408 	subs.w	r4, r2, r8
 8003f90:	eb63 0509 	sbc.w	r5, r3, r9
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	00eb      	lsls	r3, r5, #3
 8003f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fa2:	00e2      	lsls	r2, r4, #3
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	461d      	mov	r5, r3
 8003fa8:	eb14 030a 	adds.w	r3, r4, sl
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	eb45 030b 	adc.w	r3, r5, fp
 8003fb2:	607b      	str	r3, [r7, #4]
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	028b      	lsls	r3, r1, #10
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	4604      	mov	r4, r0
 8003fca:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003fce:	4601      	mov	r1, r0
 8003fd0:	028a      	lsls	r2, r1, #10
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd8:	2200      	movs	r2, #0
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	60fa      	str	r2, [r7, #12]
 8003fde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fe2:	f7fc fe4d 	bl	8000c80 <__aeabi_uldivmod>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4613      	mov	r3, r2
 8003fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fee:	4b0b      	ldr	r3, [pc, #44]	@ (800401c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	0c1b      	lsrs	r3, r3, #16
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003ffe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	fbb2 f3f3 	udiv	r3, r2, r3
 8004006:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004008:	e002      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800400a:	4b05      	ldr	r3, [pc, #20]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x184>)
 800400c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800400e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004012:	4618      	mov	r0, r3
 8004014:	3740      	adds	r7, #64	@ 0x40
 8004016:	46bd      	mov	sp, r7
 8004018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800401c:	40023800 	.word	0x40023800
 8004020:	00f42400 	.word	0x00f42400
 8004024:	017d7840 	.word	0x017d7840

08004028 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e041      	b.n	80040be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fd ff46 	bl	8001ee0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f000 fc0a 	bl	8004880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <HAL_TIM_PWM_Start+0x24>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	bf14      	ite	ne
 80040e4:	2301      	movne	r3, #1
 80040e6:	2300      	moveq	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e022      	b.n	8004132 <HAL_TIM_PWM_Start+0x6a>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d109      	bne.n	8004106 <HAL_TIM_PWM_Start+0x3e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	bf14      	ite	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	2300      	moveq	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	e015      	b.n	8004132 <HAL_TIM_PWM_Start+0x6a>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d109      	bne.n	8004120 <HAL_TIM_PWM_Start+0x58>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e008      	b.n	8004132 <HAL_TIM_PWM_Start+0x6a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	bf14      	ite	ne
 800412c:	2301      	movne	r3, #1
 800412e:	2300      	moveq	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e07c      	b.n	8004234 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d104      	bne.n	800414a <HAL_TIM_PWM_Start+0x82>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004148:	e013      	b.n	8004172 <HAL_TIM_PWM_Start+0xaa>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b04      	cmp	r3, #4
 800414e:	d104      	bne.n	800415a <HAL_TIM_PWM_Start+0x92>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004158:	e00b      	b.n	8004172 <HAL_TIM_PWM_Start+0xaa>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b08      	cmp	r3, #8
 800415e:	d104      	bne.n	800416a <HAL_TIM_PWM_Start+0xa2>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004168:	e003      	b.n	8004172 <HAL_TIM_PWM_Start+0xaa>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2202      	movs	r2, #2
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2201      	movs	r2, #1
 8004178:	6839      	ldr	r1, [r7, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fdd6 	bl	8004d2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a2d      	ldr	r2, [pc, #180]	@ (800423c <HAL_TIM_PWM_Start+0x174>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_TIM_PWM_Start+0xcc>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a2c      	ldr	r2, [pc, #176]	@ (8004240 <HAL_TIM_PWM_Start+0x178>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d101      	bne.n	8004198 <HAL_TIM_PWM_Start+0xd0>
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_TIM_PWM_Start+0xd2>
 8004198:	2300      	movs	r3, #0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a22      	ldr	r2, [pc, #136]	@ (800423c <HAL_TIM_PWM_Start+0x174>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d022      	beq.n	80041fe <HAL_TIM_PWM_Start+0x136>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c0:	d01d      	beq.n	80041fe <HAL_TIM_PWM_Start+0x136>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004244 <HAL_TIM_PWM_Start+0x17c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d018      	beq.n	80041fe <HAL_TIM_PWM_Start+0x136>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004248 <HAL_TIM_PWM_Start+0x180>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <HAL_TIM_PWM_Start+0x136>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1c      	ldr	r2, [pc, #112]	@ (800424c <HAL_TIM_PWM_Start+0x184>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00e      	beq.n	80041fe <HAL_TIM_PWM_Start+0x136>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a16      	ldr	r2, [pc, #88]	@ (8004240 <HAL_TIM_PWM_Start+0x178>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d009      	beq.n	80041fe <HAL_TIM_PWM_Start+0x136>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a18      	ldr	r2, [pc, #96]	@ (8004250 <HAL_TIM_PWM_Start+0x188>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d004      	beq.n	80041fe <HAL_TIM_PWM_Start+0x136>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a16      	ldr	r2, [pc, #88]	@ (8004254 <HAL_TIM_PWM_Start+0x18c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d111      	bne.n	8004222 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b06      	cmp	r3, #6
 800420e:	d010      	beq.n	8004232 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004220:	e007      	b.n	8004232 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0201 	orr.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40010000 	.word	0x40010000
 8004240:	40010400 	.word	0x40010400
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800
 800424c:	40000c00 	.word	0x40000c00
 8004250:	40014000 	.word	0x40014000
 8004254:	40001800 	.word	0x40001800

08004258 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e097      	b.n	800439c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d106      	bne.n	8004286 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fd fdb3 	bl	8001dec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800429c:	f023 0307 	bic.w	r3, r3, #7
 80042a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3304      	adds	r3, #4
 80042aa:	4619      	mov	r1, r3
 80042ac:	4610      	mov	r0, r2
 80042ae:	f000 fae7 	bl	8004880 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042da:	f023 0303 	bic.w	r3, r3, #3
 80042de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	4313      	orrs	r3, r2
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80042f8:	f023 030c 	bic.w	r3, r3, #12
 80042fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004304:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004308:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	011a      	lsls	r2, r3, #4
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	031b      	lsls	r3, r3, #12
 8004328:	4313      	orrs	r3, r2
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004336:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	4313      	orrs	r3, r2
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d110      	bne.n	80043f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d102      	bne.n	80043e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043da:	7b7b      	ldrb	r3, [r7, #13]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d001      	beq.n	80043e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e069      	b.n	80044b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043f4:	e031      	b.n	800445a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d110      	bne.n	800441e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043fc:	7bbb      	ldrb	r3, [r7, #14]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d102      	bne.n	8004408 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004402:	7b3b      	ldrb	r3, [r7, #12]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d001      	beq.n	800440c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e055      	b.n	80044b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800441c:	e01d      	b.n	800445a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d108      	bne.n	8004436 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004424:	7bbb      	ldrb	r3, [r7, #14]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d105      	bne.n	8004436 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800442a:	7b7b      	ldrb	r3, [r7, #13]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d102      	bne.n	8004436 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004430:	7b3b      	ldrb	r3, [r7, #12]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d001      	beq.n	800443a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e03e      	b.n	80044b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2202      	movs	r2, #2
 8004456:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_TIM_Encoder_Start+0xc4>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b04      	cmp	r3, #4
 8004464:	d008      	beq.n	8004478 <HAL_TIM_Encoder_Start+0xd4>
 8004466:	e00f      	b.n	8004488 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2201      	movs	r2, #1
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fc5b 	bl	8004d2c <TIM_CCxChannelCmd>
      break;
 8004476:	e016      	b.n	80044a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2201      	movs	r2, #1
 800447e:	2104      	movs	r1, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fc53 	bl	8004d2c <TIM_CCxChannelCmd>
      break;
 8004486:	e00e      	b.n	80044a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2201      	movs	r2, #1
 800448e:	2100      	movs	r1, #0
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fc4b 	bl	8004d2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2201      	movs	r2, #1
 800449c:	2104      	movs	r1, #4
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fc44 	bl	8004d2c <TIM_CCxChannelCmd>
      break;
 80044a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0201 	orr.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d020      	beq.n	8004524 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0202 	mvn.w	r2, #2
 80044f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f99c 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f98f 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f99e 	bl	800485a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b00      	cmp	r3, #0
 800452c:	d020      	beq.n	8004570 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01b      	beq.n	8004570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0204 	mvn.w	r2, #4
 8004540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f976 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f969 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f978 	bl	800485a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d020      	beq.n	80045bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01b      	beq.n	80045bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0208 	mvn.w	r2, #8
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2204      	movs	r2, #4
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f950 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f943 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f952 	bl	800485a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d020      	beq.n	8004608 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01b      	beq.n	8004608 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0210 	mvn.w	r2, #16
 80045d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2208      	movs	r2, #8
 80045de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f92a 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 80045f4:	e005      	b.n	8004602 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f91d 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f92c 	bl	800485a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00c      	beq.n	800462c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0201 	mvn.w	r2, #1
 8004624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f8fc 	bl	8004824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00c      	beq.n	8004650 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fc15 	bl	8004e7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00c      	beq.n	8004674 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d007      	beq.n	8004674 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800466c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8fc 	bl	800486c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00c      	beq.n	8004698 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d007      	beq.n	8004698 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0220 	mvn.w	r2, #32
 8004690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fbe8 	bl	8004e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e0ae      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b0c      	cmp	r3, #12
 80046ca:	f200 809f 	bhi.w	800480c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046ce:	a201      	add	r2, pc, #4	@ (adr r2, 80046d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d4:	08004709 	.word	0x08004709
 80046d8:	0800480d 	.word	0x0800480d
 80046dc:	0800480d 	.word	0x0800480d
 80046e0:	0800480d 	.word	0x0800480d
 80046e4:	08004749 	.word	0x08004749
 80046e8:	0800480d 	.word	0x0800480d
 80046ec:	0800480d 	.word	0x0800480d
 80046f0:	0800480d 	.word	0x0800480d
 80046f4:	0800478b 	.word	0x0800478b
 80046f8:	0800480d 	.word	0x0800480d
 80046fc:	0800480d 	.word	0x0800480d
 8004700:	0800480d 	.word	0x0800480d
 8004704:	080047cb 	.word	0x080047cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f960 	bl	80049d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0208 	orr.w	r2, r2, #8
 8004722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0204 	bic.w	r2, r2, #4
 8004732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6999      	ldr	r1, [r3, #24]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	619a      	str	r2, [r3, #24]
      break;
 8004746:	e064      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 f9b0 	bl	8004ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6999      	ldr	r1, [r3, #24]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	021a      	lsls	r2, r3, #8
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	619a      	str	r2, [r3, #24]
      break;
 8004788:	e043      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fa03 	bl	8004b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0208 	orr.w	r2, r2, #8
 80047a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0204 	bic.w	r2, r2, #4
 80047b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69d9      	ldr	r1, [r3, #28]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	61da      	str	r2, [r3, #28]
      break;
 80047c8:	e023      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fa57 	bl	8004c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69d9      	ldr	r1, [r3, #28]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	021a      	lsls	r2, r3, #8
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	61da      	str	r2, [r3, #28]
      break;
 800480a:	e002      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	75fb      	strb	r3, [r7, #23]
      break;
 8004810:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800481a:	7dfb      	ldrb	r3, [r7, #23]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr

0800485a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr
	...

08004880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a45      	ldr	r2, [pc, #276]	@ (80049a8 <TIM_Base_SetConfig+0x128>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d013      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800489e:	d00f      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a42      	ldr	r2, [pc, #264]	@ (80049ac <TIM_Base_SetConfig+0x12c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a41      	ldr	r2, [pc, #260]	@ (80049b0 <TIM_Base_SetConfig+0x130>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a40      	ldr	r2, [pc, #256]	@ (80049b4 <TIM_Base_SetConfig+0x134>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3f      	ldr	r2, [pc, #252]	@ (80049b8 <TIM_Base_SetConfig+0x138>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d108      	bne.n	80048d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a34      	ldr	r2, [pc, #208]	@ (80049a8 <TIM_Base_SetConfig+0x128>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e0:	d027      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a31      	ldr	r2, [pc, #196]	@ (80049ac <TIM_Base_SetConfig+0x12c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d023      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a30      	ldr	r2, [pc, #192]	@ (80049b0 <TIM_Base_SetConfig+0x130>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01f      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2f      	ldr	r2, [pc, #188]	@ (80049b4 <TIM_Base_SetConfig+0x134>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2e      	ldr	r2, [pc, #184]	@ (80049b8 <TIM_Base_SetConfig+0x138>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d017      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2d      	ldr	r2, [pc, #180]	@ (80049bc <TIM_Base_SetConfig+0x13c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2c      	ldr	r2, [pc, #176]	@ (80049c0 <TIM_Base_SetConfig+0x140>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00f      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a2b      	ldr	r2, [pc, #172]	@ (80049c4 <TIM_Base_SetConfig+0x144>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a2a      	ldr	r2, [pc, #168]	@ (80049c8 <TIM_Base_SetConfig+0x148>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d007      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a29      	ldr	r2, [pc, #164]	@ (80049cc <TIM_Base_SetConfig+0x14c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d003      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a28      	ldr	r2, [pc, #160]	@ (80049d0 <TIM_Base_SetConfig+0x150>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d108      	bne.n	8004944 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a0f      	ldr	r2, [pc, #60]	@ (80049a8 <TIM_Base_SetConfig+0x128>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_Base_SetConfig+0xf8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a11      	ldr	r2, [pc, #68]	@ (80049b8 <TIM_Base_SetConfig+0x138>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d103      	bne.n	8004980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b01      	cmp	r3, #1
 8004990:	d105      	bne.n	800499e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f023 0201 	bic.w	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	611a      	str	r2, [r3, #16]
  }
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40010400 	.word	0x40010400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800
 80049c8:	40001800 	.word	0x40001800
 80049cc:	40001c00 	.word	0x40001c00
 80049d0:	40002000 	.word	0x40002000

080049d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f023 0201 	bic.w	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 0302 	bic.w	r3, r3, #2
 8004a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a20      	ldr	r2, [pc, #128]	@ (8004aac <TIM_OC1_SetConfig+0xd8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <TIM_OC1_SetConfig+0x64>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab0 <TIM_OC1_SetConfig+0xdc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d10c      	bne.n	8004a52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f023 0308 	bic.w	r3, r3, #8
 8004a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f023 0304 	bic.w	r3, r3, #4
 8004a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a15      	ldr	r2, [pc, #84]	@ (8004aac <TIM_OC1_SetConfig+0xd8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d003      	beq.n	8004a62 <TIM_OC1_SetConfig+0x8e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a14      	ldr	r2, [pc, #80]	@ (8004ab0 <TIM_OC1_SetConfig+0xdc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d111      	bne.n	8004a86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40010400 	.word	0x40010400

08004ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	f023 0210 	bic.w	r2, r3, #16
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f023 0320 	bic.w	r3, r3, #32
 8004afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a21      	ldr	r2, [pc, #132]	@ (8004b94 <TIM_OC2_SetConfig+0xe0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_OC2_SetConfig+0x68>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a20      	ldr	r2, [pc, #128]	@ (8004b98 <TIM_OC2_SetConfig+0xe4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d10d      	bne.n	8004b38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a16      	ldr	r2, [pc, #88]	@ (8004b94 <TIM_OC2_SetConfig+0xe0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <TIM_OC2_SetConfig+0x94>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a15      	ldr	r2, [pc, #84]	@ (8004b98 <TIM_OC2_SetConfig+0xe4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d113      	bne.n	8004b70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	40010000 	.word	0x40010000
 8004b98:	40010400 	.word	0x40010400

08004b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a21      	ldr	r2, [pc, #132]	@ (8004c7c <TIM_OC3_SetConfig+0xe0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_OC3_SetConfig+0x66>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a20      	ldr	r2, [pc, #128]	@ (8004c80 <TIM_OC3_SetConfig+0xe4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d10d      	bne.n	8004c1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a16      	ldr	r2, [pc, #88]	@ (8004c7c <TIM_OC3_SetConfig+0xe0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d003      	beq.n	8004c2e <TIM_OC3_SetConfig+0x92>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a15      	ldr	r2, [pc, #84]	@ (8004c80 <TIM_OC3_SetConfig+0xe4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d113      	bne.n	8004c56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	621a      	str	r2, [r3, #32]
}
 8004c70:	bf00      	nop
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40010400 	.word	0x40010400

08004c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	021b      	lsls	r3, r3, #8
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	031b      	lsls	r3, r3, #12
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a11      	ldr	r2, [pc, #68]	@ (8004d24 <TIM_OC4_SetConfig+0xa0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_OC4_SetConfig+0x68>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a10      	ldr	r2, [pc, #64]	@ (8004d28 <TIM_OC4_SetConfig+0xa4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d109      	bne.n	8004d00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	019b      	lsls	r3, r3, #6
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	621a      	str	r2, [r3, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	371c      	adds	r7, #28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr
 8004d24:	40010000 	.word	0x40010000
 8004d28:	40010400 	.word	0x40010400

08004d2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	2201      	movs	r2, #1
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a1a      	ldr	r2, [r3, #32]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	401a      	ands	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a1a      	ldr	r2, [r3, #32]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	fa01 f303 	lsl.w	r3, r1, r3
 8004d64:	431a      	orrs	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	621a      	str	r2, [r3, #32]
}
 8004d6a:	bf00      	nop
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e05a      	b.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a20      	ldr	r2, [pc, #128]	@ (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d022      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd8:	d01d      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1c      	ldr	r2, [pc, #112]	@ (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d018      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a19      	ldr	r2, [pc, #100]	@ (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00e      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a17      	ldr	r2, [pc, #92]	@ (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d009      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a16      	ldr	r2, [pc, #88]	@ (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d004      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a14      	ldr	r2, [pc, #80]	@ (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d10c      	bne.n	8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40010400 	.word	0x40010400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40001800 	.word	0x40001800

08004e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr

08004e7a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <memset>:
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4402      	add	r2, r0
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d100      	bne.n	8004e96 <memset+0xa>
 8004e94:	4770      	bx	lr
 8004e96:	f803 1b01 	strb.w	r1, [r3], #1
 8004e9a:	e7f9      	b.n	8004e90 <memset+0x4>

08004e9c <__libc_init_array>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	4d0c      	ldr	r5, [pc, #48]	@ (8004ed4 <__libc_init_array+0x38>)
 8004ea2:	4c0d      	ldr	r4, [pc, #52]	@ (8004ed8 <__libc_init_array+0x3c>)
 8004ea4:	1b64      	subs	r4, r4, r5
 8004ea6:	10a4      	asrs	r4, r4, #2
 8004ea8:	42a6      	cmp	r6, r4
 8004eaa:	d109      	bne.n	8004ec0 <__libc_init_array+0x24>
 8004eac:	f000 f81a 	bl	8004ee4 <_init>
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	4d0a      	ldr	r5, [pc, #40]	@ (8004edc <__libc_init_array+0x40>)
 8004eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8004ee0 <__libc_init_array+0x44>)
 8004eb6:	1b64      	subs	r4, r4, r5
 8004eb8:	10a4      	asrs	r4, r4, #2
 8004eba:	42a6      	cmp	r6, r4
 8004ebc:	d105      	bne.n	8004eca <__libc_init_array+0x2e>
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec4:	4798      	blx	r3
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7ee      	b.n	8004ea8 <__libc_init_array+0xc>
 8004eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ece:	4798      	blx	r3
 8004ed0:	3601      	adds	r6, #1
 8004ed2:	e7f2      	b.n	8004eba <__libc_init_array+0x1e>
 8004ed4:	08004f1c 	.word	0x08004f1c
 8004ed8:	08004f1c 	.word	0x08004f1c
 8004edc:	08004f1c 	.word	0x08004f1c
 8004ee0:	08004f20 	.word	0x08004f20

08004ee4 <_init>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	bf00      	nop
 8004ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eea:	bc08      	pop	{r3}
 8004eec:	469e      	mov	lr, r3
 8004eee:	4770      	bx	lr

08004ef0 <_fini>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr
