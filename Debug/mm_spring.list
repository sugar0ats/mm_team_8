
mm_spring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004938  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004ac0  08004ac0  00005ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad8  08004ad8  00006018  2**0
                  CONTENTS
  4 .ARM          00000008  08004ad8  08004ad8  00005ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ae0  08004ae0  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ae0  08004ae0  00005ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ae4  08004ae4  00005ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08004ae8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000018  08004b00  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08004b00  00006258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b88d  00000000  00000000  00006041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002103  00000000  00000000  000118ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  000139d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000947  00000000  00000000  000145f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ea17  00000000  00000000  00014f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd36  00000000  00000000  00033956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba763  00000000  00000000  0004368c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fddef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034b4  00000000  00000000  000fde34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001012e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004aa8 	.word	0x08004aa8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08004aa8 	.word	0x08004aa8

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2f>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008ac:	bf24      	itt	cs
 80008ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008b6:	d90d      	bls.n	80008d4 <__aeabi_d2f+0x30>
 80008b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008cc:	bf08      	it	eq
 80008ce:	f020 0001 	biceq.w	r0, r0, #1
 80008d2:	4770      	bx	lr
 80008d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008d8:	d121      	bne.n	800091e <__aeabi_d2f+0x7a>
 80008da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008de:	bfbc      	itt	lt
 80008e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008e4:	4770      	bxlt	lr
 80008e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ee:	f1c2 0218 	rsb	r2, r2, #24
 80008f2:	f1c2 0c20 	rsb	ip, r2, #32
 80008f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008fa:	fa20 f002 	lsr.w	r0, r0, r2
 80008fe:	bf18      	it	ne
 8000900:	f040 0001 	orrne.w	r0, r0, #1
 8000904:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000908:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800090c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000910:	ea40 000c 	orr.w	r0, r0, ip
 8000914:	fa23 f302 	lsr.w	r3, r3, r2
 8000918:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800091c:	e7cc      	b.n	80008b8 <__aeabi_d2f+0x14>
 800091e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000922:	d107      	bne.n	8000934 <__aeabi_d2f+0x90>
 8000924:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000928:	bf1e      	ittt	ne
 800092a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800092e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000932:	4770      	bxne	lr
 8000934:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000938:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800093c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_frsub>:
 8000944:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000948:	e002      	b.n	8000950 <__addsf3>
 800094a:	bf00      	nop

0800094c <__aeabi_fsub>:
 800094c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000950 <__addsf3>:
 8000950:	0042      	lsls	r2, r0, #1
 8000952:	bf1f      	itttt	ne
 8000954:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000958:	ea92 0f03 	teqne	r2, r3
 800095c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000960:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000964:	d06a      	beq.n	8000a3c <__addsf3+0xec>
 8000966:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800096a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800096e:	bfc1      	itttt	gt
 8000970:	18d2      	addgt	r2, r2, r3
 8000972:	4041      	eorgt	r1, r0
 8000974:	4048      	eorgt	r0, r1
 8000976:	4041      	eorgt	r1, r0
 8000978:	bfb8      	it	lt
 800097a:	425b      	neglt	r3, r3
 800097c:	2b19      	cmp	r3, #25
 800097e:	bf88      	it	hi
 8000980:	4770      	bxhi	lr
 8000982:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000986:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800098a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000996:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800099a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800099e:	bf18      	it	ne
 80009a0:	4249      	negne	r1, r1
 80009a2:	ea92 0f03 	teq	r2, r3
 80009a6:	d03f      	beq.n	8000a28 <__addsf3+0xd8>
 80009a8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ac:	fa41 fc03 	asr.w	ip, r1, r3
 80009b0:	eb10 000c 	adds.w	r0, r0, ip
 80009b4:	f1c3 0320 	rsb	r3, r3, #32
 80009b8:	fa01 f103 	lsl.w	r1, r1, r3
 80009bc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009c0:	d502      	bpl.n	80009c8 <__addsf3+0x78>
 80009c2:	4249      	negs	r1, r1
 80009c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009cc:	d313      	bcc.n	80009f6 <__addsf3+0xa6>
 80009ce:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009d2:	d306      	bcc.n	80009e2 <__addsf3+0x92>
 80009d4:	0840      	lsrs	r0, r0, #1
 80009d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80009da:	f102 0201 	add.w	r2, r2, #1
 80009de:	2afe      	cmp	r2, #254	@ 0xfe
 80009e0:	d251      	bcs.n	8000a86 <__addsf3+0x136>
 80009e2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ea:	bf08      	it	eq
 80009ec:	f020 0001 	biceq.w	r0, r0, #1
 80009f0:	ea40 0003 	orr.w	r0, r0, r3
 80009f4:	4770      	bx	lr
 80009f6:	0049      	lsls	r1, r1, #1
 80009f8:	eb40 0000 	adc.w	r0, r0, r0
 80009fc:	3a01      	subs	r2, #1
 80009fe:	bf28      	it	cs
 8000a00:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a04:	d2ed      	bcs.n	80009e2 <__addsf3+0x92>
 8000a06:	fab0 fc80 	clz	ip, r0
 8000a0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a16:	bfaa      	itet	ge
 8000a18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a1c:	4252      	neglt	r2, r2
 8000a1e:	4318      	orrge	r0, r3
 8000a20:	bfbc      	itt	lt
 8000a22:	40d0      	lsrlt	r0, r2
 8000a24:	4318      	orrlt	r0, r3
 8000a26:	4770      	bx	lr
 8000a28:	f092 0f00 	teq	r2, #0
 8000a2c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a30:	bf06      	itte	eq
 8000a32:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a36:	3201      	addeq	r2, #1
 8000a38:	3b01      	subne	r3, #1
 8000a3a:	e7b5      	b.n	80009a8 <__addsf3+0x58>
 8000a3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a44:	bf18      	it	ne
 8000a46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4a:	d021      	beq.n	8000a90 <__addsf3+0x140>
 8000a4c:	ea92 0f03 	teq	r2, r3
 8000a50:	d004      	beq.n	8000a5c <__addsf3+0x10c>
 8000a52:	f092 0f00 	teq	r2, #0
 8000a56:	bf08      	it	eq
 8000a58:	4608      	moveq	r0, r1
 8000a5a:	4770      	bx	lr
 8000a5c:	ea90 0f01 	teq	r0, r1
 8000a60:	bf1c      	itt	ne
 8000a62:	2000      	movne	r0, #0
 8000a64:	4770      	bxne	lr
 8000a66:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a6a:	d104      	bne.n	8000a76 <__addsf3+0x126>
 8000a6c:	0040      	lsls	r0, r0, #1
 8000a6e:	bf28      	it	cs
 8000a70:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a74:	4770      	bx	lr
 8000a76:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a7a:	bf3c      	itt	cc
 8000a7c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a80:	4770      	bxcc	lr
 8000a82:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a86:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a8e:	4770      	bx	lr
 8000a90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a94:	bf16      	itet	ne
 8000a96:	4608      	movne	r0, r1
 8000a98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a9c:	4601      	movne	r1, r0
 8000a9e:	0242      	lsls	r2, r0, #9
 8000aa0:	bf06      	itte	eq
 8000aa2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aa6:	ea90 0f01 	teqeq	r0, r1
 8000aaa:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_ui2f>:
 8000ab0:	f04f 0300 	mov.w	r3, #0
 8000ab4:	e004      	b.n	8000ac0 <__aeabi_i2f+0x8>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_i2f>:
 8000ab8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000abc:	bf48      	it	mi
 8000abe:	4240      	negmi	r0, r0
 8000ac0:	ea5f 0c00 	movs.w	ip, r0
 8000ac4:	bf08      	it	eq
 8000ac6:	4770      	bxeq	lr
 8000ac8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000acc:	4601      	mov	r1, r0
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	e01c      	b.n	8000b0e <__aeabi_l2f+0x2a>

08000ad4 <__aeabi_ul2f>:
 8000ad4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad8:	bf08      	it	eq
 8000ada:	4770      	bxeq	lr
 8000adc:	f04f 0300 	mov.w	r3, #0
 8000ae0:	e00a      	b.n	8000af8 <__aeabi_l2f+0x14>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_l2f>:
 8000ae4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae8:	bf08      	it	eq
 8000aea:	4770      	bxeq	lr
 8000aec:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000af0:	d502      	bpl.n	8000af8 <__aeabi_l2f+0x14>
 8000af2:	4240      	negs	r0, r0
 8000af4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af8:	ea5f 0c01 	movs.w	ip, r1
 8000afc:	bf02      	ittt	eq
 8000afe:	4684      	moveq	ip, r0
 8000b00:	4601      	moveq	r1, r0
 8000b02:	2000      	moveq	r0, #0
 8000b04:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b08:	bf08      	it	eq
 8000b0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b0e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b12:	fabc f28c 	clz	r2, ip
 8000b16:	3a08      	subs	r2, #8
 8000b18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b1c:	db10      	blt.n	8000b40 <__aeabi_l2f+0x5c>
 8000b1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b22:	4463      	add	r3, ip
 8000b24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b28:	f1c2 0220 	rsb	r2, r2, #32
 8000b2c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b30:	fa20 f202 	lsr.w	r2, r0, r2
 8000b34:	eb43 0002 	adc.w	r0, r3, r2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f102 0220 	add.w	r2, r2, #32
 8000b44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b48:	f1c2 0220 	rsb	r2, r2, #32
 8000b4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b50:	fa21 f202 	lsr.w	r2, r1, r2
 8000b54:	eb43 0002 	adc.w	r0, r3, r2
 8000b58:	bf08      	it	eq
 8000b5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_fmul>:
 8000b60:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b68:	bf1e      	ittt	ne
 8000b6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b6e:	ea92 0f0c 	teqne	r2, ip
 8000b72:	ea93 0f0c 	teqne	r3, ip
 8000b76:	d06f      	beq.n	8000c58 <__aeabi_fmul+0xf8>
 8000b78:	441a      	add	r2, r3
 8000b7a:	ea80 0c01 	eor.w	ip, r0, r1
 8000b7e:	0240      	lsls	r0, r0, #9
 8000b80:	bf18      	it	ne
 8000b82:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b86:	d01e      	beq.n	8000bc6 <__aeabi_fmul+0x66>
 8000b88:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b8c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b90:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b94:	fba0 3101 	umull	r3, r1, r0, r1
 8000b98:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b9c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ba0:	bf3e      	ittt	cc
 8000ba2:	0049      	lslcc	r1, r1, #1
 8000ba4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba8:	005b      	lslcc	r3, r3, #1
 8000baa:	ea40 0001 	orr.w	r0, r0, r1
 8000bae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bb2:	2afd      	cmp	r2, #253	@ 0xfd
 8000bb4:	d81d      	bhi.n	8000bf2 <__aeabi_fmul+0x92>
 8000bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	4770      	bx	lr
 8000bc6:	f090 0f00 	teq	r0, #0
 8000bca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bce:	bf08      	it	eq
 8000bd0:	0249      	lsleq	r1, r1, #9
 8000bd2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bd6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bda:	3a7f      	subs	r2, #127	@ 0x7f
 8000bdc:	bfc2      	ittt	gt
 8000bde:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000be2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000be6:	4770      	bxgt	lr
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	3a01      	subs	r2, #1
 8000bf2:	dc5d      	bgt.n	8000cb0 <__aeabi_fmul+0x150>
 8000bf4:	f112 0f19 	cmn.w	r2, #25
 8000bf8:	bfdc      	itt	le
 8000bfa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bxle	lr
 8000c00:	f1c2 0200 	rsb	r2, r2, #0
 8000c04:	0041      	lsls	r1, r0, #1
 8000c06:	fa21 f102 	lsr.w	r1, r1, r2
 8000c0a:	f1c2 0220 	rsb	r2, r2, #32
 8000c0e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c12:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c16:	f140 0000 	adc.w	r0, r0, #0
 8000c1a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c1e:	bf08      	it	eq
 8000c20:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c24:	4770      	bx	lr
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c2e:	bf02      	ittt	eq
 8000c30:	0040      	lsleq	r0, r0, #1
 8000c32:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c36:	3a01      	subeq	r2, #1
 8000c38:	d0f9      	beq.n	8000c2e <__aeabi_fmul+0xce>
 8000c3a:	ea40 000c 	orr.w	r0, r0, ip
 8000c3e:	f093 0f00 	teq	r3, #0
 8000c42:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c46:	bf02      	ittt	eq
 8000c48:	0049      	lsleq	r1, r1, #1
 8000c4a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c4e:	3b01      	subeq	r3, #1
 8000c50:	d0f9      	beq.n	8000c46 <__aeabi_fmul+0xe6>
 8000c52:	ea41 010c 	orr.w	r1, r1, ip
 8000c56:	e78f      	b.n	8000b78 <__aeabi_fmul+0x18>
 8000c58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	bf18      	it	ne
 8000c62:	ea93 0f0c 	teqne	r3, ip
 8000c66:	d00a      	beq.n	8000c7e <__aeabi_fmul+0x11e>
 8000c68:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c6c:	bf18      	it	ne
 8000c6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c72:	d1d8      	bne.n	8000c26 <__aeabi_fmul+0xc6>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c7c:	4770      	bx	lr
 8000c7e:	f090 0f00 	teq	r0, #0
 8000c82:	bf17      	itett	ne
 8000c84:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	f091 0f00 	teqne	r1, #0
 8000c8e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c92:	d014      	beq.n	8000cbe <__aeabi_fmul+0x15e>
 8000c94:	ea92 0f0c 	teq	r2, ip
 8000c98:	d101      	bne.n	8000c9e <__aeabi_fmul+0x13e>
 8000c9a:	0242      	lsls	r2, r0, #9
 8000c9c:	d10f      	bne.n	8000cbe <__aeabi_fmul+0x15e>
 8000c9e:	ea93 0f0c 	teq	r3, ip
 8000ca2:	d103      	bne.n	8000cac <__aeabi_fmul+0x14c>
 8000ca4:	024b      	lsls	r3, r1, #9
 8000ca6:	bf18      	it	ne
 8000ca8:	4608      	movne	r0, r1
 8000caa:	d108      	bne.n	8000cbe <__aeabi_fmul+0x15e>
 8000cac:	ea80 0001 	eor.w	r0, r0, r1
 8000cb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cb4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cbc:	4770      	bx	lr
 8000cbe:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_fdiv>:
 8000cc8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ccc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd6:	ea92 0f0c 	teqne	r2, ip
 8000cda:	ea93 0f0c 	teqne	r3, ip
 8000cde:	d069      	beq.n	8000db4 <__aeabi_fdiv+0xec>
 8000ce0:	eba2 0203 	sub.w	r2, r2, r3
 8000ce4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce8:	0249      	lsls	r1, r1, #9
 8000cea:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cee:	d037      	beq.n	8000d60 <__aeabi_fdiv+0x98>
 8000cf0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cf4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cfc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d00:	428b      	cmp	r3, r1
 8000d02:	bf38      	it	cc
 8000d04:	005b      	lslcc	r3, r3, #1
 8000d06:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d0a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	bf24      	itt	cs
 8000d12:	1a5b      	subcs	r3, r3, r1
 8000d14:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d18:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d1c:	bf24      	itt	cs
 8000d1e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d22:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d26:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d2a:	bf24      	itt	cs
 8000d2c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d34:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d38:	bf24      	itt	cs
 8000d3a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d3e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d4a:	d1e0      	bne.n	8000d0e <__aeabi_fdiv+0x46>
 8000d4c:	2afd      	cmp	r2, #253	@ 0xfd
 8000d4e:	f63f af50 	bhi.w	8000bf2 <__aeabi_fmul+0x92>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d64:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d68:	327f      	adds	r2, #127	@ 0x7f
 8000d6a:	bfc2      	ittt	gt
 8000d6c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d70:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d74:	4770      	bxgt	lr
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	f04f 0300 	mov.w	r3, #0
 8000d7e:	3a01      	subs	r2, #1
 8000d80:	e737      	b.n	8000bf2 <__aeabi_fmul+0x92>
 8000d82:	f092 0f00 	teq	r2, #0
 8000d86:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0040      	lsleq	r0, r0, #1
 8000d8e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d92:	3a01      	subeq	r2, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fdiv+0xc2>
 8000d96:	ea40 000c 	orr.w	r0, r0, ip
 8000d9a:	f093 0f00 	teq	r3, #0
 8000d9e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0049      	lsleq	r1, r1, #1
 8000da6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000daa:	3b01      	subeq	r3, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fdiv+0xda>
 8000dae:	ea41 010c 	orr.w	r1, r1, ip
 8000db2:	e795      	b.n	8000ce0 <__aeabi_fdiv+0x18>
 8000db4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db8:	ea92 0f0c 	teq	r2, ip
 8000dbc:	d108      	bne.n	8000dd0 <__aeabi_fdiv+0x108>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	f47f af7d 	bne.w	8000cbe <__aeabi_fmul+0x15e>
 8000dc4:	ea93 0f0c 	teq	r3, ip
 8000dc8:	f47f af70 	bne.w	8000cac <__aeabi_fmul+0x14c>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e776      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000dd0:	ea93 0f0c 	teq	r3, ip
 8000dd4:	d104      	bne.n	8000de0 <__aeabi_fdiv+0x118>
 8000dd6:	024b      	lsls	r3, r1, #9
 8000dd8:	f43f af4c 	beq.w	8000c74 <__aeabi_fmul+0x114>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e76e      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000de0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000de4:	bf18      	it	ne
 8000de6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dea:	d1ca      	bne.n	8000d82 <__aeabi_fdiv+0xba>
 8000dec:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000df0:	f47f af5c 	bne.w	8000cac <__aeabi_fmul+0x14c>
 8000df4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000df8:	f47f af3c 	bne.w	8000c74 <__aeabi_fmul+0x114>
 8000dfc:	e75f      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000dfe:	bf00      	nop

08000e00 <__gesf2>:
 8000e00:	f04f 3cff 	mov.w	ip, #4294967295
 8000e04:	e006      	b.n	8000e14 <__cmpsf2+0x4>
 8000e06:	bf00      	nop

08000e08 <__lesf2>:
 8000e08:	f04f 0c01 	mov.w	ip, #1
 8000e0c:	e002      	b.n	8000e14 <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__cmpsf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e24:	bf18      	it	ne
 8000e26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e2a:	d011      	beq.n	8000e50 <__cmpsf2+0x40>
 8000e2c:	b001      	add	sp, #4
 8000e2e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e32:	bf18      	it	ne
 8000e34:	ea90 0f01 	teqne	r0, r1
 8000e38:	bf58      	it	pl
 8000e3a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e3e:	bf88      	it	hi
 8000e40:	17c8      	asrhi	r0, r1, #31
 8000e42:	bf38      	it	cc
 8000e44:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e48:	bf18      	it	ne
 8000e4a:	f040 0001 	orrne.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e54:	d102      	bne.n	8000e5c <__cmpsf2+0x4c>
 8000e56:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e5a:	d105      	bne.n	8000e68 <__cmpsf2+0x58>
 8000e5c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e60:	d1e4      	bne.n	8000e2c <__cmpsf2+0x1c>
 8000e62:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e66:	d0e1      	beq.n	8000e2c <__cmpsf2+0x1c>
 8000e68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <__aeabi_cfrcmple>:
 8000e70:	4684      	mov	ip, r0
 8000e72:	4608      	mov	r0, r1
 8000e74:	4661      	mov	r1, ip
 8000e76:	e7ff      	b.n	8000e78 <__aeabi_cfcmpeq>

08000e78 <__aeabi_cfcmpeq>:
 8000e78:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e7a:	f7ff ffc9 	bl	8000e10 <__cmpsf2>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	bf48      	it	mi
 8000e82:	f110 0f00 	cmnmi.w	r0, #0
 8000e86:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e88 <__aeabi_fcmpeq>:
 8000e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e8c:	f7ff fff4 	bl	8000e78 <__aeabi_cfcmpeq>
 8000e90:	bf0c      	ite	eq
 8000e92:	2001      	moveq	r0, #1
 8000e94:	2000      	movne	r0, #0
 8000e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9a:	bf00      	nop

08000e9c <__aeabi_fcmplt>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff ffea 	bl	8000e78 <__aeabi_cfcmpeq>
 8000ea4:	bf34      	ite	cc
 8000ea6:	2001      	movcc	r0, #1
 8000ea8:	2000      	movcs	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_fcmple>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffe0 	bl	8000e78 <__aeabi_cfcmpeq>
 8000eb8:	bf94      	ite	ls
 8000eba:	2001      	movls	r0, #1
 8000ebc:	2000      	movhi	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_fcmpge>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffd2 	bl	8000e70 <__aeabi_cfrcmple>
 8000ecc:	bf94      	ite	ls
 8000ece:	2001      	movls	r0, #1
 8000ed0:	2000      	movhi	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_fcmpgt>:
 8000ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000edc:	f7ff ffc8 	bl	8000e70 <__aeabi_cfrcmple>
 8000ee0:	bf34      	ite	cc
 8000ee2:	2001      	movcc	r0, #1
 8000ee4:	2000      	movcs	r0, #0
 8000ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eea:	bf00      	nop

08000eec <__aeabi_f2iz>:
 8000eec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ef4:	d30f      	bcc.n	8000f16 <__aeabi_f2iz+0x2a>
 8000ef6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d90d      	bls.n	8000f1c <__aeabi_f2iz+0x30>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f08:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f10:	bf18      	it	ne
 8000f12:	4240      	negne	r0, r0
 8000f14:	4770      	bx	lr
 8000f16:	f04f 0000 	mov.w	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f20:	d101      	bne.n	8000f26 <__aeabi_f2iz+0x3a>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d105      	bne.n	8000f32 <__aeabi_f2iz+0x46>
 8000f26:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f2a:	bf08      	it	eq
 8000f2c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_f2uiz>:
 8000f38:	0042      	lsls	r2, r0, #1
 8000f3a:	d20e      	bcs.n	8000f5a <__aeabi_f2uiz+0x22>
 8000f3c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f40:	d30b      	bcc.n	8000f5a <__aeabi_f2uiz+0x22>
 8000f42:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f46:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f4a:	d409      	bmi.n	8000f60 <__aeabi_f2uiz+0x28>
 8000f4c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	4770      	bx	lr
 8000f5a:	f04f 0000 	mov.w	r0, #0
 8000f5e:	4770      	bx	lr
 8000f60:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f64:	d101      	bne.n	8000f6a <__aeabi_f2uiz+0x32>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	d102      	bne.n	8000f70 <__aeabi_f2uiz+0x38>
 8000f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6e:	4770      	bx	lr
 8000f70:	f04f 0000 	mov.w	r0, #0
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <__aeabi_uldivmod>:
 8000f78:	b953      	cbnz	r3, 8000f90 <__aeabi_uldivmod+0x18>
 8000f7a:	b94a      	cbnz	r2, 8000f90 <__aeabi_uldivmod+0x18>
 8000f7c:	2900      	cmp	r1, #0
 8000f7e:	bf08      	it	eq
 8000f80:	2800      	cmpeq	r0, #0
 8000f82:	bf1c      	itt	ne
 8000f84:	f04f 31ff 	movne.w	r1, #4294967295
 8000f88:	f04f 30ff 	movne.w	r0, #4294967295
 8000f8c:	f000 b968 	b.w	8001260 <__aeabi_idiv0>
 8000f90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f98:	f000 f806 	bl	8000fa8 <__udivmoddi4>
 8000f9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fa4:	b004      	add	sp, #16
 8000fa6:	4770      	bx	lr

08000fa8 <__udivmoddi4>:
 8000fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fac:	9d08      	ldr	r5, [sp, #32]
 8000fae:	460c      	mov	r4, r1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d14e      	bne.n	8001052 <__udivmoddi4+0xaa>
 8000fb4:	4694      	mov	ip, r2
 8000fb6:	458c      	cmp	ip, r1
 8000fb8:	4686      	mov	lr, r0
 8000fba:	fab2 f282 	clz	r2, r2
 8000fbe:	d962      	bls.n	8001086 <__udivmoddi4+0xde>
 8000fc0:	b14a      	cbz	r2, 8000fd6 <__udivmoddi4+0x2e>
 8000fc2:	f1c2 0320 	rsb	r3, r2, #32
 8000fc6:	4091      	lsls	r1, r2
 8000fc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000fcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fd0:	4319      	orrs	r1, r3
 8000fd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fda:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fde:	fb07 1114 	mls	r1, r7, r4, r1
 8000fe2:	fa1f f68c 	uxth.w	r6, ip
 8000fe6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fee:	fb04 f106 	mul.w	r1, r4, r6
 8000ff2:	4299      	cmp	r1, r3
 8000ff4:	d90a      	bls.n	800100c <__udivmoddi4+0x64>
 8000ff6:	eb1c 0303 	adds.w	r3, ip, r3
 8000ffa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ffe:	f080 8110 	bcs.w	8001222 <__udivmoddi4+0x27a>
 8001002:	4299      	cmp	r1, r3
 8001004:	f240 810d 	bls.w	8001222 <__udivmoddi4+0x27a>
 8001008:	3c02      	subs	r4, #2
 800100a:	4463      	add	r3, ip
 800100c:	1a59      	subs	r1, r3, r1
 800100e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001012:	fb07 1110 	mls	r1, r7, r0, r1
 8001016:	fb00 f606 	mul.w	r6, r0, r6
 800101a:	fa1f f38e 	uxth.w	r3, lr
 800101e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001022:	429e      	cmp	r6, r3
 8001024:	d90a      	bls.n	800103c <__udivmoddi4+0x94>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 31ff 	add.w	r1, r0, #4294967295
 800102e:	f080 80fa 	bcs.w	8001226 <__udivmoddi4+0x27e>
 8001032:	429e      	cmp	r6, r3
 8001034:	f240 80f7 	bls.w	8001226 <__udivmoddi4+0x27e>
 8001038:	4463      	add	r3, ip
 800103a:	3802      	subs	r0, #2
 800103c:	2100      	movs	r1, #0
 800103e:	1b9b      	subs	r3, r3, r6
 8001040:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001044:	b11d      	cbz	r5, 800104e <__udivmoddi4+0xa6>
 8001046:	40d3      	lsrs	r3, r2
 8001048:	2200      	movs	r2, #0
 800104a:	e9c5 3200 	strd	r3, r2, [r5]
 800104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001052:	428b      	cmp	r3, r1
 8001054:	d905      	bls.n	8001062 <__udivmoddi4+0xba>
 8001056:	b10d      	cbz	r5, 800105c <__udivmoddi4+0xb4>
 8001058:	e9c5 0100 	strd	r0, r1, [r5]
 800105c:	2100      	movs	r1, #0
 800105e:	4608      	mov	r0, r1
 8001060:	e7f5      	b.n	800104e <__udivmoddi4+0xa6>
 8001062:	fab3 f183 	clz	r1, r3
 8001066:	2900      	cmp	r1, #0
 8001068:	d146      	bne.n	80010f8 <__udivmoddi4+0x150>
 800106a:	42a3      	cmp	r3, r4
 800106c:	d302      	bcc.n	8001074 <__udivmoddi4+0xcc>
 800106e:	4290      	cmp	r0, r2
 8001070:	f0c0 80ee 	bcc.w	8001250 <__udivmoddi4+0x2a8>
 8001074:	1a86      	subs	r6, r0, r2
 8001076:	eb64 0303 	sbc.w	r3, r4, r3
 800107a:	2001      	movs	r0, #1
 800107c:	2d00      	cmp	r5, #0
 800107e:	d0e6      	beq.n	800104e <__udivmoddi4+0xa6>
 8001080:	e9c5 6300 	strd	r6, r3, [r5]
 8001084:	e7e3      	b.n	800104e <__udivmoddi4+0xa6>
 8001086:	2a00      	cmp	r2, #0
 8001088:	f040 808f 	bne.w	80011aa <__udivmoddi4+0x202>
 800108c:	eba1 040c 	sub.w	r4, r1, ip
 8001090:	2101      	movs	r1, #1
 8001092:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001096:	fa1f f78c 	uxth.w	r7, ip
 800109a:	fbb4 f6f8 	udiv	r6, r4, r8
 800109e:	fb08 4416 	mls	r4, r8, r6, r4
 80010a2:	fb07 f006 	mul.w	r0, r7, r6
 80010a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80010aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010ae:	4298      	cmp	r0, r3
 80010b0:	d908      	bls.n	80010c4 <__udivmoddi4+0x11c>
 80010b2:	eb1c 0303 	adds.w	r3, ip, r3
 80010b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80010ba:	d202      	bcs.n	80010c2 <__udivmoddi4+0x11a>
 80010bc:	4298      	cmp	r0, r3
 80010be:	f200 80cb 	bhi.w	8001258 <__udivmoddi4+0x2b0>
 80010c2:	4626      	mov	r6, r4
 80010c4:	1a1c      	subs	r4, r3, r0
 80010c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80010ca:	fb08 4410 	mls	r4, r8, r0, r4
 80010ce:	fb00 f707 	mul.w	r7, r0, r7
 80010d2:	fa1f f38e 	uxth.w	r3, lr
 80010d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010da:	429f      	cmp	r7, r3
 80010dc:	d908      	bls.n	80010f0 <__udivmoddi4+0x148>
 80010de:	eb1c 0303 	adds.w	r3, ip, r3
 80010e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80010e6:	d202      	bcs.n	80010ee <__udivmoddi4+0x146>
 80010e8:	429f      	cmp	r7, r3
 80010ea:	f200 80ae 	bhi.w	800124a <__udivmoddi4+0x2a2>
 80010ee:	4620      	mov	r0, r4
 80010f0:	1bdb      	subs	r3, r3, r7
 80010f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010f6:	e7a5      	b.n	8001044 <__udivmoddi4+0x9c>
 80010f8:	f1c1 0720 	rsb	r7, r1, #32
 80010fc:	408b      	lsls	r3, r1
 80010fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8001102:	ea4c 0c03 	orr.w	ip, ip, r3
 8001106:	fa24 f607 	lsr.w	r6, r4, r7
 800110a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800110e:	fbb6 f8f9 	udiv	r8, r6, r9
 8001112:	fa1f fe8c 	uxth.w	lr, ip
 8001116:	fb09 6618 	mls	r6, r9, r8, r6
 800111a:	fa20 f307 	lsr.w	r3, r0, r7
 800111e:	408c      	lsls	r4, r1
 8001120:	fa00 fa01 	lsl.w	sl, r0, r1
 8001124:	fb08 f00e 	mul.w	r0, r8, lr
 8001128:	431c      	orrs	r4, r3
 800112a:	0c23      	lsrs	r3, r4, #16
 800112c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001130:	4298      	cmp	r0, r3
 8001132:	fa02 f201 	lsl.w	r2, r2, r1
 8001136:	d90a      	bls.n	800114e <__udivmoddi4+0x1a6>
 8001138:	eb1c 0303 	adds.w	r3, ip, r3
 800113c:	f108 36ff 	add.w	r6, r8, #4294967295
 8001140:	f080 8081 	bcs.w	8001246 <__udivmoddi4+0x29e>
 8001144:	4298      	cmp	r0, r3
 8001146:	d97e      	bls.n	8001246 <__udivmoddi4+0x29e>
 8001148:	f1a8 0802 	sub.w	r8, r8, #2
 800114c:	4463      	add	r3, ip
 800114e:	1a1e      	subs	r6, r3, r0
 8001150:	fbb6 f3f9 	udiv	r3, r6, r9
 8001154:	fb09 6613 	mls	r6, r9, r3, r6
 8001158:	fb03 fe0e 	mul.w	lr, r3, lr
 800115c:	b2a4      	uxth	r4, r4
 800115e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001162:	45a6      	cmp	lr, r4
 8001164:	d908      	bls.n	8001178 <__udivmoddi4+0x1d0>
 8001166:	eb1c 0404 	adds.w	r4, ip, r4
 800116a:	f103 30ff 	add.w	r0, r3, #4294967295
 800116e:	d266      	bcs.n	800123e <__udivmoddi4+0x296>
 8001170:	45a6      	cmp	lr, r4
 8001172:	d964      	bls.n	800123e <__udivmoddi4+0x296>
 8001174:	3b02      	subs	r3, #2
 8001176:	4464      	add	r4, ip
 8001178:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800117c:	fba0 8302 	umull	r8, r3, r0, r2
 8001180:	eba4 040e 	sub.w	r4, r4, lr
 8001184:	429c      	cmp	r4, r3
 8001186:	46c6      	mov	lr, r8
 8001188:	461e      	mov	r6, r3
 800118a:	d350      	bcc.n	800122e <__udivmoddi4+0x286>
 800118c:	d04d      	beq.n	800122a <__udivmoddi4+0x282>
 800118e:	b155      	cbz	r5, 80011a6 <__udivmoddi4+0x1fe>
 8001190:	ebba 030e 	subs.w	r3, sl, lr
 8001194:	eb64 0406 	sbc.w	r4, r4, r6
 8001198:	fa04 f707 	lsl.w	r7, r4, r7
 800119c:	40cb      	lsrs	r3, r1
 800119e:	431f      	orrs	r7, r3
 80011a0:	40cc      	lsrs	r4, r1
 80011a2:	e9c5 7400 	strd	r7, r4, [r5]
 80011a6:	2100      	movs	r1, #0
 80011a8:	e751      	b.n	800104e <__udivmoddi4+0xa6>
 80011aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80011ae:	f1c2 0320 	rsb	r3, r2, #32
 80011b2:	40d9      	lsrs	r1, r3
 80011b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011b8:	fa20 f303 	lsr.w	r3, r0, r3
 80011bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80011c0:	fbb1 f0f8 	udiv	r0, r1, r8
 80011c4:	fb08 1110 	mls	r1, r8, r0, r1
 80011c8:	4094      	lsls	r4, r2
 80011ca:	431c      	orrs	r4, r3
 80011cc:	fa1f f78c 	uxth.w	r7, ip
 80011d0:	0c23      	lsrs	r3, r4, #16
 80011d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011d6:	fb00 f107 	mul.w	r1, r0, r7
 80011da:	4299      	cmp	r1, r3
 80011dc:	d908      	bls.n	80011f0 <__udivmoddi4+0x248>
 80011de:	eb1c 0303 	adds.w	r3, ip, r3
 80011e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80011e6:	d22c      	bcs.n	8001242 <__udivmoddi4+0x29a>
 80011e8:	4299      	cmp	r1, r3
 80011ea:	d92a      	bls.n	8001242 <__udivmoddi4+0x29a>
 80011ec:	3802      	subs	r0, #2
 80011ee:	4463      	add	r3, ip
 80011f0:	1a5b      	subs	r3, r3, r1
 80011f2:	fbb3 f1f8 	udiv	r1, r3, r8
 80011f6:	fb08 3311 	mls	r3, r8, r1, r3
 80011fa:	b2a4      	uxth	r4, r4
 80011fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001200:	fb01 f307 	mul.w	r3, r1, r7
 8001204:	42a3      	cmp	r3, r4
 8001206:	d908      	bls.n	800121a <__udivmoddi4+0x272>
 8001208:	eb1c 0404 	adds.w	r4, ip, r4
 800120c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001210:	d213      	bcs.n	800123a <__udivmoddi4+0x292>
 8001212:	42a3      	cmp	r3, r4
 8001214:	d911      	bls.n	800123a <__udivmoddi4+0x292>
 8001216:	3902      	subs	r1, #2
 8001218:	4464      	add	r4, ip
 800121a:	1ae4      	subs	r4, r4, r3
 800121c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001220:	e73b      	b.n	800109a <__udivmoddi4+0xf2>
 8001222:	4604      	mov	r4, r0
 8001224:	e6f2      	b.n	800100c <__udivmoddi4+0x64>
 8001226:	4608      	mov	r0, r1
 8001228:	e708      	b.n	800103c <__udivmoddi4+0x94>
 800122a:	45c2      	cmp	sl, r8
 800122c:	d2af      	bcs.n	800118e <__udivmoddi4+0x1e6>
 800122e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001232:	eb63 060c 	sbc.w	r6, r3, ip
 8001236:	3801      	subs	r0, #1
 8001238:	e7a9      	b.n	800118e <__udivmoddi4+0x1e6>
 800123a:	4631      	mov	r1, r6
 800123c:	e7ed      	b.n	800121a <__udivmoddi4+0x272>
 800123e:	4603      	mov	r3, r0
 8001240:	e79a      	b.n	8001178 <__udivmoddi4+0x1d0>
 8001242:	4630      	mov	r0, r6
 8001244:	e7d4      	b.n	80011f0 <__udivmoddi4+0x248>
 8001246:	46b0      	mov	r8, r6
 8001248:	e781      	b.n	800114e <__udivmoddi4+0x1a6>
 800124a:	4463      	add	r3, ip
 800124c:	3802      	subs	r0, #2
 800124e:	e74f      	b.n	80010f0 <__udivmoddi4+0x148>
 8001250:	4606      	mov	r6, r0
 8001252:	4623      	mov	r3, r4
 8001254:	4608      	mov	r0, r1
 8001256:	e711      	b.n	800107c <__udivmoddi4+0xd4>
 8001258:	3e02      	subs	r6, #2
 800125a:	4463      	add	r3, ip
 800125c:	e732      	b.n	80010c4 <__udivmoddi4+0x11c>
 800125e:	bf00      	nop

08001260 <__aeabi_idiv0>:
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <turn>:

/*
 * We recommend you implement this function so that turn(1) turns your rat 90 degrees in your positive rotation
 * direction and turn(-1) turns the other way.
 */
void turn(int8_t n) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]

	setPIDGoalD(0.0);
 800126e:	2000      	movs	r0, #0
 8001270:	f000 fd56 	bl	8001d20 <setPIDGoalD>
	if (n == 1) {
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d103      	bne.n	8001284 <turn+0x20>
		setPIDGoalA(-293.0 * 2); // -215
 800127c:	4809      	ldr	r0, [pc, #36]	@ (80012a4 <turn+0x40>)
 800127e:	f000 fd5f 	bl	8001d40 <setPIDGoalA>
 8001282:	e003      	b.n	800128c <turn+0x28>
	} else {
		setPIDGoalA(293.0 * 2);
 8001284:	f240 204a 	movw	r0, #586	@ 0x24a
 8001288:	f000 fd5a 	bl	8001d40 <setPIDGoalA>
	}

	while (!PIDdone()) {
 800128c:	bf00      	nop
 800128e:	f000 fd67 	bl	8001d60 <PIDdone>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0fa      	beq.n	800128e <turn+0x2a>
//		updatePID();
	}
	resetPID();
 8001298:	f000 fbcc 	bl	8001a34 <resetPID>
	 *
	 * HINT: Use a while loop to wait until the turn is complete
	 *
	 * You should also call resetPID before exiting this function so your rat is ready for the next instruction.
	 */
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	fffffdb6 	.word	0xfffffdb6

080012a8 <getRightEncoderCounts>:
#include "encoders.h"

/*
 * Implement this function so it returns the right encoder value
 */
int16_t getRightEncoderCounts() {
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	return  (int16_t) TIM2->CNT;
 80012ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b2:	b21b      	sxth	r3, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <getLeftEncoderCounts>:

/*
 * Implement this function so it returns the left encoder value
 */
int16_t getLeftEncoderCounts() {
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <getLeftEncoderCounts+0x14>)
 80012c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c4:	b21b      	sxth	r3, r3
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40010000 	.word	0x40010000

080012d4 <resetEncoders>:

/*
 * This function has already been implemented for you. Enjoy! :)
 */
void resetEncoders() {
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <resetEncoders+0x1c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 80012de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40010000 	.word	0x40010000

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f8:	f000 fff0 	bl	80022dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fc:	f000 f844 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001300:	f000 fa66 	bl	80017d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001304:	f000 fa44 	bl	8001790 <MX_DMA_Init>
  MX_ADC1_Init();
 8001308:	f000 f87a 	bl	8001400 <MX_ADC1_Init>
  MX_TIM1_Init();
 800130c:	f000 f8ca 	bl	80014a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001310:	f000 f920 	bl	8001554 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001314:	f000 f9cc 	bl	80016b0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001318:	f000 f970 	bl	80015fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800131c:	213c      	movs	r1, #60	@ 0x3c
 800131e:	4813      	ldr	r0, [pc, #76]	@ (800136c <main+0x78>)
 8001320:	f002 fe22 	bl	8003f68 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001324:	213c      	movs	r1, #60	@ 0x3c
 8001326:	4812      	ldr	r0, [pc, #72]	@ (8001370 <main+0x7c>)
 8001328:	f002 fe1e 	bl	8003f68 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800132c:	2100      	movs	r1, #0
 800132e:	4811      	ldr	r0, [pc, #68]	@ (8001374 <main+0x80>)
 8001330:	f002 fcac 	bl	8003c8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001334:	2104      	movs	r1, #4
 8001336:	4810      	ldr	r0, [pc, #64]	@ (8001378 <main+0x84>)
 8001338:	f002 fca8 	bl	8003c8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800133c:	2108      	movs	r1, #8
 800133e:	480e      	ldr	r0, [pc, #56]	@ (8001378 <main+0x84>)
 8001340:	f002 fca4 	bl	8003c8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001344:	210c      	movs	r1, #12
 8001346:	480c      	ldr	r0, [pc, #48]	@ (8001378 <main+0x84>)
 8001348:	f002 fca0 	bl	8003c8c <HAL_TIM_PWM_Start>
//  setMotorLPWM(1.8f);
//  setMotorRPWM(1.8f);
//  move(1);
//  turn(-1);
//  move(3);
turn(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f7ff ff89 	bl	8001264 <turn>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  left_counts = (int16_t) TIM1->CNT;
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <main+0x88>)
 8001354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001356:	b21a      	sxth	r2, r3
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <main+0x8c>)
 800135a:	801a      	strh	r2, [r3, #0]
	  right_counts = (int16_t) TIM2->CNT;
 800135c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001362:	b21a      	sxth	r2, r3
 8001364:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <main+0x90>)
 8001366:	801a      	strh	r2, [r3, #0]
	  left_counts = (int16_t) TIM1->CNT;
 8001368:	bf00      	nop
 800136a:	e7f2      	b.n	8001352 <main+0x5e>
 800136c:	200000dc 	.word	0x200000dc
 8001370:	20000124 	.word	0x20000124
 8001374:	2000016c 	.word	0x2000016c
 8001378:	200001b4 	.word	0x200001b4
 800137c:	40010000 	.word	0x40010000
 8001380:	200001fc 	.word	0x200001fc
 8001384:	200001fe 	.word	0x200001fe

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b092      	sub	sp, #72	@ 0x48
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0318 	add.w	r3, r7, #24
 8001392:	2230      	movs	r2, #48	@ 0x30
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fb5a 	bl	8004a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ae:	2301      	movs	r3, #1
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b2:	2310      	movs	r3, #16
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ba:	f107 0318 	add.w	r3, r7, #24
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 f80e 	bl	80033e0 <HAL_RCC_OscConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013ca:	f000 fa7f 	bl	80018cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ce:	230f      	movs	r3, #15
 80013d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fa4e 	bl	8003888 <HAL_RCC_ClockConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013f2:	f000 fa6b 	bl	80018cc <Error_Handler>
  }
}
 80013f6:	bf00      	nop
 80013f8:	3748      	adds	r7, #72	@ 0x48
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001406:	463b      	mov	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001412:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <MX_ADC1_Init+0x98>)
 8001414:	4a21      	ldr	r2, [pc, #132]	@ (800149c <MX_ADC1_Init+0x9c>)
 8001416:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001418:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <MX_ADC1_Init+0x98>)
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <MX_ADC1_Init+0x98>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001424:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <MX_ADC1_Init+0x98>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800142a:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <MX_ADC1_Init+0x98>)
 800142c:	2201      	movs	r2, #1
 800142e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001430:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <MX_ADC1_Init+0x98>)
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001438:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <MX_ADC1_Init+0x98>)
 800143a:	2200      	movs	r2, #0
 800143c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143e:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <MX_ADC1_Init+0x98>)
 8001440:	4a17      	ldr	r2, [pc, #92]	@ (80014a0 <MX_ADC1_Init+0xa0>)
 8001442:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <MX_ADC1_Init+0x98>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800144a:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <MX_ADC1_Init+0x98>)
 800144c:	2201      	movs	r2, #1
 800144e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_ADC1_Init+0x98>)
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <MX_ADC1_Init+0x98>)
 800145a:	2201      	movs	r2, #1
 800145c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800145e:	480e      	ldr	r0, [pc, #56]	@ (8001498 <MX_ADC1_Init+0x98>)
 8001460:	f000 ffaa 	bl	80023b8 <HAL_ADC_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800146a:	f000 fa2f 	bl	80018cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800146e:	2309      	movs	r3, #9
 8001470:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001472:	2301      	movs	r3, #1
 8001474:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	@ (8001498 <MX_ADC1_Init+0x98>)
 8001480:	f000 ffde 	bl	8002440 <HAL_ADC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800148a:	f000 fa1f 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000034 	.word	0x20000034
 800149c:	40012000 	.word	0x40012000
 80014a0:	0f000001 	.word	0x0f000001

080014a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	@ 0x30
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	2224      	movs	r2, #36	@ 0x24
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 facc 	bl	8004a50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c0:	4b22      	ldr	r3, [pc, #136]	@ (800154c <MX_TIM1_Init+0xa8>)
 80014c2:	4a23      	ldr	r2, [pc, #140]	@ (8001550 <MX_TIM1_Init+0xac>)
 80014c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014c6:	4b21      	ldr	r3, [pc, #132]	@ (800154c <MX_TIM1_Init+0xa8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <MX_TIM1_Init+0xa8>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014d2:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <MX_TIM1_Init+0xa8>)
 80014d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <MX_TIM1_Init+0xa8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <MX_TIM1_Init+0xa8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b19      	ldr	r3, [pc, #100]	@ (800154c <MX_TIM1_Init+0xa8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ec:	2303      	movs	r3, #3
 80014ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f4:	2301      	movs	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001504:	2301      	movs	r3, #1
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	4619      	mov	r1, r3
 8001516:	480d      	ldr	r0, [pc, #52]	@ (800154c <MX_TIM1_Init+0xa8>)
 8001518:	f002 fc80 	bl	8003e1c <HAL_TIM_Encoder_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001522:	f000 f9d3 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4619      	mov	r1, r3
 8001532:	4806      	ldr	r0, [pc, #24]	@ (800154c <MX_TIM1_Init+0xa8>)
 8001534:	f003 fa00 	bl	8004938 <HAL_TIMEx_MasterConfigSynchronization>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800153e:	f000 f9c5 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	3730      	adds	r7, #48	@ 0x30
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200000dc 	.word	0x200000dc
 8001550:	40010000 	.word	0x40010000

08001554 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	@ 0x30
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	2224      	movs	r2, #36	@ 0x24
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f003 fa74 	bl	8004a50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001570:	4b21      	ldr	r3, [pc, #132]	@ (80015f8 <MX_TIM2_Init+0xa4>)
 8001572:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001576:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001578:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <MX_TIM2_Init+0xa4>)
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <MX_TIM2_Init+0xa4>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001584:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <MX_TIM2_Init+0xa4>)
 8001586:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800158a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <MX_TIM2_Init+0xa4>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001592:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <MX_TIM2_Init+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001598:	2301      	movs	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015a0:	2301      	movs	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015b0:	2301      	movs	r3, #1
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	4619      	mov	r1, r3
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <MX_TIM2_Init+0xa4>)
 80015c4:	f002 fc2a 	bl	8003e1c <HAL_TIM_Encoder_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80015ce:	f000 f97d 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	4806      	ldr	r0, [pc, #24]	@ (80015f8 <MX_TIM2_Init+0xa4>)
 80015e0:	f003 f9aa 	bl	8004938 <HAL_TIMEx_MasterConfigSynchronization>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80015ea:	f000 f96f 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3730      	adds	r7, #48	@ 0x30
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000124 	.word	0x20000124

080015fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	@ 0x28
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001602:	f107 0320 	add.w	r3, r7, #32
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	615a      	str	r2, [r3, #20]
 800161c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800161e:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <MX_TIM3_Init+0xac>)
 8001620:	4a22      	ldr	r2, [pc, #136]	@ (80016ac <MX_TIM3_Init+0xb0>)
 8001622:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001624:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <MX_TIM3_Init+0xac>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <MX_TIM3_Init+0xac>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3199;
 8001630:	4b1d      	ldr	r3, [pc, #116]	@ (80016a8 <MX_TIM3_Init+0xac>)
 8001632:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001636:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <MX_TIM3_Init+0xac>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <MX_TIM3_Init+0xac>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001644:	4818      	ldr	r0, [pc, #96]	@ (80016a8 <MX_TIM3_Init+0xac>)
 8001646:	f002 fad1 	bl	8003bec <HAL_TIM_PWM_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001650:	f000 f93c 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800165c:	f107 0320 	add.w	r3, r7, #32
 8001660:	4619      	mov	r1, r3
 8001662:	4811      	ldr	r0, [pc, #68]	@ (80016a8 <MX_TIM3_Init+0xac>)
 8001664:	f003 f968 	bl	8004938 <HAL_TIMEx_MasterConfigSynchronization>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800166e:	f000 f92d 	bl	80018cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001672:	2360      	movs	r3, #96	@ 0x60
 8001674:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	4807      	ldr	r0, [pc, #28]	@ (80016a8 <MX_TIM3_Init+0xac>)
 800168a:	f002 fdeb 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001694:	f000 f91a 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001698:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <MX_TIM3_Init+0xac>)
 800169a:	f000 fd03 	bl	80020a4 <HAL_TIM_MspPostInit>

}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	@ 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000016c 	.word	0x2000016c
 80016ac:	40000400 	.word	0x40000400

080016b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	@ 0x28
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001788 <MX_TIM4_Init+0xd8>)
 80016d4:	4a2d      	ldr	r2, [pc, #180]	@ (800178c <MX_TIM4_Init+0xdc>)
 80016d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <MX_TIM4_Init+0xd8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016de:	4b2a      	ldr	r3, [pc, #168]	@ (8001788 <MX_TIM4_Init+0xd8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3199;
 80016e4:	4b28      	ldr	r3, [pc, #160]	@ (8001788 <MX_TIM4_Init+0xd8>)
 80016e6:	f640 427f 	movw	r2, #3199	@ 0xc7f
 80016ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ec:	4b26      	ldr	r3, [pc, #152]	@ (8001788 <MX_TIM4_Init+0xd8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f2:	4b25      	ldr	r3, [pc, #148]	@ (8001788 <MX_TIM4_Init+0xd8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016f8:	4823      	ldr	r0, [pc, #140]	@ (8001788 <MX_TIM4_Init+0xd8>)
 80016fa:	f002 fa77 	bl	8003bec <HAL_TIM_PWM_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001704:	f000 f8e2 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001710:	f107 0320 	add.w	r3, r7, #32
 8001714:	4619      	mov	r1, r3
 8001716:	481c      	ldr	r0, [pc, #112]	@ (8001788 <MX_TIM4_Init+0xd8>)
 8001718:	f003 f90e 	bl	8004938 <HAL_TIMEx_MasterConfigSynchronization>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001722:	f000 f8d3 	bl	80018cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001726:	2360      	movs	r3, #96	@ 0x60
 8001728:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2204      	movs	r2, #4
 800173a:	4619      	mov	r1, r3
 800173c:	4812      	ldr	r0, [pc, #72]	@ (8001788 <MX_TIM4_Init+0xd8>)
 800173e:	f002 fd91 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001748:	f000 f8c0 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2208      	movs	r2, #8
 8001750:	4619      	mov	r1, r3
 8001752:	480d      	ldr	r0, [pc, #52]	@ (8001788 <MX_TIM4_Init+0xd8>)
 8001754:	f002 fd86 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800175e:	f000 f8b5 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	220c      	movs	r2, #12
 8001766:	4619      	mov	r1, r3
 8001768:	4807      	ldr	r0, [pc, #28]	@ (8001788 <MX_TIM4_Init+0xd8>)
 800176a:	f002 fd7b 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001774:	f000 f8aa 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001778:	4803      	ldr	r0, [pc, #12]	@ (8001788 <MX_TIM4_Init+0xd8>)
 800177a:	f000 fc93 	bl	80020a4 <HAL_TIM_MspPostInit>

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200001b4 	.word	0x200001b4
 800178c:	40000800 	.word	0x40000800

08001790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MX_DMA_Init+0x3c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a0b      	ldr	r2, [pc, #44]	@ (80017cc <MX_DMA_Init+0x3c>)
 80017a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_DMA_Init+0x3c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2038      	movs	r0, #56	@ 0x38
 80017b8:	f001 f93f 	bl	8002a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017bc:	2038      	movs	r0, #56	@ 0x38
 80017be:	f001 f958 	bl	8002a72 <HAL_NVIC_EnableIRQ>

}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b34      	ldr	r3, [pc, #208]	@ (80018bc <MX_GPIO_Init+0xec>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	4a33      	ldr	r2, [pc, #204]	@ (80018bc <MX_GPIO_Init+0xec>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f6:	4b31      	ldr	r3, [pc, #196]	@ (80018bc <MX_GPIO_Init+0xec>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b2d      	ldr	r3, [pc, #180]	@ (80018bc <MX_GPIO_Init+0xec>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a2c      	ldr	r2, [pc, #176]	@ (80018bc <MX_GPIO_Init+0xec>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b2a      	ldr	r3, [pc, #168]	@ (80018bc <MX_GPIO_Init+0xec>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	4b26      	ldr	r3, [pc, #152]	@ (80018bc <MX_GPIO_Init+0xec>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a25      	ldr	r2, [pc, #148]	@ (80018bc <MX_GPIO_Init+0xec>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <MX_GPIO_Init+0xec>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, User_LED_2_Pin|User_LED_1_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001840:	481f      	ldr	r0, [pc, #124]	@ (80018c0 <MX_GPIO_Init+0xf0>)
 8001842:	f001 fdb5 	bl	80033b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Right_Emitter_Pin|Right_Front_Emitter_Pin|Left_Front_Emitter_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	21a8      	movs	r1, #168	@ 0xa8
 800184a:	481e      	ldr	r0, [pc, #120]	@ (80018c4 <MX_GPIO_Init+0xf4>)
 800184c:	f001 fdb0 	bl	80033b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Left_Emitter_GPIO_Port, Left_Emitter_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001856:	481c      	ldr	r0, [pc, #112]	@ (80018c8 <MX_GPIO_Init+0xf8>)
 8001858:	f001 fdaa 	bl	80033b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : User_LED_2_Pin User_LED_1_Pin */
  GPIO_InitStruct.Pin = User_LED_2_Pin|User_LED_1_Pin;
 800185c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001860:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	2301      	movs	r3, #1
 8001864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4619      	mov	r1, r3
 8001874:	4812      	ldr	r0, [pc, #72]	@ (80018c0 <MX_GPIO_Init+0xf0>)
 8001876:	f001 fbfd 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_Emitter_Pin Right_Front_Emitter_Pin Left_Front_Emitter_Pin */
  GPIO_InitStruct.Pin = Right_Emitter_Pin|Right_Front_Emitter_Pin|Left_Front_Emitter_Pin;
 800187a:	23a8      	movs	r3, #168	@ 0xa8
 800187c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	4619      	mov	r1, r3
 8001890:	480c      	ldr	r0, [pc, #48]	@ (80018c4 <MX_GPIO_Init+0xf4>)
 8001892:	f001 fbef 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pin : Left_Emitter_Pin */
  GPIO_InitStruct.Pin = Left_Emitter_Pin;
 8001896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800189a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Left_Emitter_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	4619      	mov	r1, r3
 80018ae:	4806      	ldr	r0, [pc, #24]	@ (80018c8 <MX_GPIO_Init+0xf8>)
 80018b0:	f001 fbe0 	bl	8003074 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b4:	bf00      	nop
 80018b6:	3720      	adds	r7, #32
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020800 	.word	0x40020800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020400 	.word	0x40020400

080018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <Error_Handler+0x8>

080018d8 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
    if (pwm > PWM_MAX)
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7fe feff 	bl	80006e4 <__aeabi_f2d>
 80018e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8001920 <limitPWM+0x48>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe ffd0 	bl	8000890 <__aeabi_dcmpgt>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <limitPWM+0x22>
        return PWM_MAX;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <limitPWM+0x58>)
 80018f8:	e00d      	b.n	8001916 <limitPWM+0x3e>
    else if (pwm < -PWM_MAX)
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7fe fef2 	bl	80006e4 <__aeabi_f2d>
 8001900:	a309      	add	r3, pc, #36	@ (adr r3, 8001928 <limitPWM+0x50>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe ffa5 	bl	8000854 <__aeabi_dcmplt>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <limitPWM+0x3c>
        return -PWM_MAX;
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <limitPWM+0x5c>)
 8001912:	e000      	b.n	8001916 <limitPWM+0x3e>
    else
        return pwm;
 8001914:	687b      	ldr	r3, [r7, #4]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	9999999a 	.word	0x9999999a
 8001924:	3fe99999 	.word	0x3fe99999
 8001928:	9999999a 	.word	0x9999999a
 800192c:	bfe99999 	.word	0xbfe99999
 8001930:	3f4ccccd 	.word	0x3f4ccccd
 8001934:	bf4ccccd 	.word	0xbf4ccccd

08001938 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
    float limitedPWM = limitPWM(pwm);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ffc9 	bl	80018d8 <limitPWM>
 8001946:	60f8      	str	r0, [r7, #12]

    if (limitedPWM >= 0.0f) {
 8001948:	f04f 0100 	mov.w	r1, #0
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7ff fab9 	bl	8000ec4 <__aeabi_fcmpge>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00e      	beq.n	8001976 <setMotorLPWM+0x3e>
        // Set backward channel to zero first
        TIM4->CCR4 = 0;
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <setMotorLPWM+0x68>)
 800195a:	2200      	movs	r2, #0
 800195c:	641a      	str	r2, [r3, #64]	@ 0x40
        // Set forward channel
        TIM4->CCR3 = (uint32_t)(limitedPWM * MAX_TIMER_COUNTS);
 800195e:	4911      	ldr	r1, [pc, #68]	@ (80019a4 <setMotorLPWM+0x6c>)
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f7ff f8fd 	bl	8000b60 <__aeabi_fmul>
 8001966:	4603      	mov	r3, r0
 8001968:	4c0d      	ldr	r4, [pc, #52]	@ (80019a0 <setMotorLPWM+0x68>)
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fae4 	bl	8000f38 <__aeabi_f2uiz>
 8001970:	4603      	mov	r3, r0
 8001972:	63e3      	str	r3, [r4, #60]	@ 0x3c
        // Set forward channel to zero first
        TIM4->CCR3 = 0;
        // Set backward channel
        TIM4->CCR4 = (uint32_t)(-limitedPWM * MAX_TIMER_COUNTS);
    }
}
 8001974:	e010      	b.n	8001998 <setMotorLPWM+0x60>
        TIM4->CCR3 = 0;
 8001976:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <setMotorLPWM+0x68>)
 8001978:	2200      	movs	r2, #0
 800197a:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM4->CCR4 = (uint32_t)(-limitedPWM * MAX_TIMER_COUNTS);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001982:	4908      	ldr	r1, [pc, #32]	@ (80019a4 <setMotorLPWM+0x6c>)
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f8eb 	bl	8000b60 <__aeabi_fmul>
 800198a:	4603      	mov	r3, r0
 800198c:	4c04      	ldr	r4, [pc, #16]	@ (80019a0 <setMotorLPWM+0x68>)
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fad2 	bl	8000f38 <__aeabi_f2uiz>
 8001994:	4603      	mov	r3, r0
 8001996:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	bd90      	pop	{r4, r7, pc}
 80019a0:	40000800 	.word	0x40000800
 80019a4:	4547f000 	.word	0x4547f000

080019a8 <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
    float limitedPWM = limitPWM(pwm);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff91 	bl	80018d8 <limitPWM>
 80019b6:	60f8      	str	r0, [r7, #12]

    if (limitedPWM >= 0.0f) {
 80019b8:	f04f 0100 	mov.w	r1, #0
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f7ff fa81 	bl	8000ec4 <__aeabi_fcmpge>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00e      	beq.n	80019e6 <setMotorRPWM+0x3e>
        // Set backward channel to zero first
        TIM4->CCR2 = 0;
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <setMotorRPWM+0x68>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	639a      	str	r2, [r3, #56]	@ 0x38
        // Set forward channel
        TIM3->CCR1 = (uint32_t)(limitedPWM * MAX_TIMER_COUNTS);
 80019ce:	4911      	ldr	r1, [pc, #68]	@ (8001a14 <setMotorRPWM+0x6c>)
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f7ff f8c5 	bl	8000b60 <__aeabi_fmul>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4c0f      	ldr	r4, [pc, #60]	@ (8001a18 <setMotorRPWM+0x70>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff faac 	bl	8000f38 <__aeabi_f2uiz>
 80019e0:	4603      	mov	r3, r0
 80019e2:	6363      	str	r3, [r4, #52]	@ 0x34
        // Set forward channel to zero first
        TIM3->CCR1 = 0;
        // Set backward channel
        TIM4->CCR2 = (uint32_t)(-limitedPWM * MAX_TIMER_COUNTS);
    }
}
 80019e4:	e010      	b.n	8001a08 <setMotorRPWM+0x60>
        TIM3->CCR1 = 0;
 80019e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <setMotorRPWM+0x70>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM4->CCR2 = (uint32_t)(-limitedPWM * MAX_TIMER_COUNTS);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80019f2:	4908      	ldr	r1, [pc, #32]	@ (8001a14 <setMotorRPWM+0x6c>)
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f8b3 	bl	8000b60 <__aeabi_fmul>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4c04      	ldr	r4, [pc, #16]	@ (8001a10 <setMotorRPWM+0x68>)
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fa9a 	bl	8000f38 <__aeabi_f2uiz>
 8001a04:	4603      	mov	r3, r0
 8001a06:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd90      	pop	{r4, r7, pc}
 8001a10:	40000800 	.word	0x40000800
 8001a14:	4547f000 	.word	0x4547f000
 8001a18:	40000400 	.word	0x40000400

08001a1c <resetMotors>:

/*
 * Using the two previous setMotorPWM functions, implement resetMotors to set the PWM for both wheels to zero, effectively stopping them.
 */
void resetMotors() {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
    setMotorLPWM(0.0f);
 8001a20:	f04f 0000 	mov.w	r0, #0
 8001a24:	f7ff ff88 	bl	8001938 <setMotorLPWM>
    setMotorRPWM(0.0f);
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	f7ff ffbc 	bl	80019a8 <setMotorRPWM>
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <resetPID>:

int goalAngle = 0;
int goalDistance = 0;
int8_t done = 0;

void resetPID(void) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	count = 0;
 8001a38:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <resetPID+0x48>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
	angleError = 0;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <resetPID+0x4c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
	distanceError = 0;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <resetPID+0x50>)
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
	oldAngleError = 0;
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a88 <resetPID+0x54>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
	oldDistanceError = 0;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <resetPID+0x58>)
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
	sumAng  = 0.0f;
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a90 <resetPID+0x5c>)
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
	sumDist = 0.0f;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <resetPID+0x60>)
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
	resetEncoders();
 8001a6a:	f7ff fc33 	bl	80012d4 <resetEncoders>
	resetMotors();
 8001a6e:	f7ff ffd5 	bl	8001a1c <resetMotors>
	done = 0;
 8001a72:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <resetPID+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000023c 	.word	0x2000023c
 8001a80:	20000220 	.word	0x20000220
 8001a84:	20000228 	.word	0x20000228
 8001a88:	20000224 	.word	0x20000224
 8001a8c:	2000022c 	.word	0x2000022c
 8001a90:	20000240 	.word	0x20000240
 8001a94:	20000244 	.word	0x20000244
 8001a98:	20000250 	.word	0x20000250
 8001a9c:	00000000 	.word	0x00000000

08001aa0 <updatePID>:

void updatePID(float dt)  {
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b08d      	sub	sp, #52	@ 0x34
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

	int16_t leftEncoder  = getLeftEncoderCounts();
 8001aa8:	f7ff fc08 	bl	80012bc <getLeftEncoderCounts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int16_t rightEncoder = getRightEncoderCounts();
 8001ab0:	f7ff fbfa 	bl	80012a8 <getRightEncoderCounts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	resetEncoders();
 8001ab8:	f7ff fc0c 	bl	80012d4 <resetEncoders>

	dbg_leftCounts = leftEncoder;
 8001abc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fff9 	bl	8000ab8 <__aeabi_i2f>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4a81      	ldr	r2, [pc, #516]	@ (8001cd0 <updatePID+0x230>)
 8001aca:	6013      	str	r3, [r2, #0]
	dbg_rightCounts = rightEncoder;
 8001acc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fff1 	bl	8000ab8 <__aeabi_i2f>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a7e      	ldr	r2, [pc, #504]	@ (8001cd4 <updatePID+0x234>)
 8001ada:	6013      	str	r3, [r2, #0]

	    // distance measure & error
	float distMeas = (leftEncoder + rightEncoder) * 0.5f;
 8001adc:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8001ae0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe ffe6 	bl	8000ab8 <__aeabi_i2f>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f834 	bl	8000b60 <__aeabi_fmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	62bb      	str	r3, [r7, #40]	@ 0x28
	float e_dist   = goalDistance - distMeas;
 8001afc:	4b76      	ldr	r3, [pc, #472]	@ (8001cd8 <updatePID+0x238>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe ffd9 	bl	8000ab8 <__aeabi_i2f>
 8001b06:	4603      	mov	r3, r0
 8001b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe ff1e 	bl	800094c <__aeabi_fsub>
 8001b10:	4603      	mov	r3, r0
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24

	dbg_e_dist = e_dist;
 8001b14:	4a71      	ldr	r2, [pc, #452]	@ (8001cdc <updatePID+0x23c>)
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	6013      	str	r3, [r2, #0]

	    // **use** the file‐scope accumulator here, not a new one
	sumDist       += e_dist * dt;
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b1e:	f7ff f81f 	bl	8000b60 <__aeabi_fmul>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b6e      	ldr	r3, [pc, #440]	@ (8001ce0 <updatePID+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	f7fe ff0f 	bl	8000950 <__addsf3>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce0 <updatePID+0x240>)
 8001b38:	601a      	str	r2, [r3, #0]
	float derr_dist = (e_dist - oldDistanceError) / dt;
 8001b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce4 <updatePID+0x244>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b42:	f7fe ff03 	bl	800094c <__aeabi_fsub>
 8001b46:	4603      	mov	r3, r0
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f8bc 	bl	8000cc8 <__aeabi_fdiv>
 8001b50:	4603      	mov	r3, r0
 8001b52:	623b      	str	r3, [r7, #32]

	    // 2) angle measure & error
	float e_ang     = goalAngle - (leftEncoder - rightEncoder);
 8001b54:	4b64      	ldr	r3, [pc, #400]	@ (8001ce8 <updatePID+0x248>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	@ 0x2e
 8001b5c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001b60:	1acb      	subs	r3, r1, r3
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe ffa7 	bl	8000ab8 <__aeabi_i2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	61fb      	str	r3, [r7, #28]
	    sumAng        += e_ang * dt;
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	69f8      	ldr	r0, [r7, #28]
 8001b72:	f7fe fff5 	bl	8000b60 <__aeabi_fmul>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001cec <updatePID+0x24c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4610      	mov	r0, r2
 8001b82:	f7fe fee5 	bl	8000950 <__addsf3>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b58      	ldr	r3, [pc, #352]	@ (8001cec <updatePID+0x24c>)
 8001b8c:	601a      	str	r2, [r3, #0]
	float derr_ang  = (e_ang - oldAngleError) / dt;
 8001b8e:	4b58      	ldr	r3, [pc, #352]	@ (8001cf0 <updatePID+0x250>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe ff90 	bl	8000ab8 <__aeabi_i2f>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	69f8      	ldr	r0, [r7, #28]
 8001b9e:	f7fe fed5 	bl	800094c <__aeabi_fsub>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f88e 	bl	8000cc8 <__aeabi_fdiv>
 8001bac:	4603      	mov	r3, r0
 8001bae:	61bb      	str	r3, [r7, #24]

	dbg_e_ang = e_ang;
 8001bb0:	4a50      	ldr	r2, [pc, #320]	@ (8001cf4 <updatePID+0x254>)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	6013      	str	r3, [r2, #0]

        // PID outputs with integral terms added
    float distCorr = kPx * e_dist + /* add:*/ kIx * sumDist + kDx * derr_dist;
 8001bb6:	4b50      	ldr	r3, [pc, #320]	@ (8001cf8 <updatePID+0x258>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe ffcf 	bl	8000b60 <__aeabi_fmul>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461c      	mov	r4, r3
 8001bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8001cfc <updatePID+0x25c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a45      	ldr	r2, [pc, #276]	@ (8001ce0 <updatePID+0x240>)
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe ffc5 	bl	8000b60 <__aeabi_fmul>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f7fe feb8 	bl	8000950 <__addsf3>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461c      	mov	r4, r3
 8001be4:	4b46      	ldr	r3, [pc, #280]	@ (8001d00 <updatePID+0x260>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6a39      	ldr	r1, [r7, #32]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe ffb8 	bl	8000b60 <__aeabi_fmul>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7fe feab 	bl	8000950 <__addsf3>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	617b      	str	r3, [r7, #20]
    float angCorr  = kPw * e_ang  + /* add:*/ kIw * sumAng  + kDw * derr_ang;
 8001bfe:	4b41      	ldr	r3, [pc, #260]	@ (8001d04 <updatePID+0x264>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69f9      	ldr	r1, [r7, #28]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe ffab 	bl	8000b60 <__aeabi_fmul>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461c      	mov	r4, r3
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d08 <updatePID+0x268>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a36      	ldr	r2, [pc, #216]	@ (8001cec <updatePID+0x24c>)
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe ffa1 	bl	8000b60 <__aeabi_fmul>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4619      	mov	r1, r3
 8001c22:	4620      	mov	r0, r4
 8001c24:	f7fe fe94 	bl	8000950 <__addsf3>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461c      	mov	r4, r3
 8001c2c:	4b37      	ldr	r3, [pc, #220]	@ (8001d0c <updatePID+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69b9      	ldr	r1, [r7, #24]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe ff94 	bl	8000b60 <__aeabi_fmul>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f7fe fe87 	bl	8000950 <__addsf3>
 8001c42:	4603      	mov	r3, r0
 8001c44:	613b      	str	r3, [r7, #16]

    dbg_distCorr = distCorr;
 8001c46:	4a32      	ldr	r2, [pc, #200]	@ (8001d10 <updatePID+0x270>)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	6013      	str	r3, [r2, #0]
    dbg_angCorr = angCorr;
 8001c4c:	4a31      	ldr	r2, [pc, #196]	@ (8001d14 <updatePID+0x274>)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	6013      	str	r3, [r2, #0]

        // combine, clamp, send to motors
    float leftSpeed  = limitPWM(distCorr + angCorr);
 8001c52:	6939      	ldr	r1, [r7, #16]
 8001c54:	6978      	ldr	r0, [r7, #20]
 8001c56:	f7fe fe7b 	bl	8000950 <__addsf3>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fe3b 	bl	80018d8 <limitPWM>
 8001c62:	60f8      	str	r0, [r7, #12]
    float rightSpeed = limitPWM(distCorr - angCorr);
 8001c64:	6939      	ldr	r1, [r7, #16]
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f7fe fe70 	bl	800094c <__aeabi_fsub>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fe32 	bl	80018d8 <limitPWM>
 8001c74:	60b8      	str	r0, [r7, #8]

    dbg_leftSpeed = leftSpeed;
 8001c76:	4a28      	ldr	r2, [pc, #160]	@ (8001d18 <updatePID+0x278>)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6013      	str	r3, [r2, #0]
    dbg_rightSpeed = rightSpeed;
 8001c7c:	4a27      	ldr	r2, [pc, #156]	@ (8001d1c <updatePID+0x27c>)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	6013      	str	r3, [r2, #0]

    setMotorLPWM(leftSpeed);
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f7ff fe58 	bl	8001938 <setMotorLPWM>
    setMotorRPWM(0.912 * rightSpeed);
 8001c88:	68b8      	ldr	r0, [r7, #8]
 8001c8a:	f7fe fd2b 	bl	80006e4 <__aeabi_f2d>
 8001c8e:	a30e      	add	r3, pc, #56	@ (adr r3, 8001cc8 <updatePID+0x228>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fa98 	bl	80001c8 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7fe fe00 	bl	80008a4 <__aeabi_d2f>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fe7e 	bl	80019a8 <setMotorRPWM>

        // 5) save for next
    oldDistanceError = e_dist;
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <updatePID+0x244>)
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	6013      	str	r3, [r2, #0]
    oldAngleError    = e_ang;
 8001cb2:	69f8      	ldr	r0, [r7, #28]
 8001cb4:	f7ff f91a 	bl	8000eec <__aeabi_f2iz>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf0 <updatePID+0x250>)
 8001cbc:	6013      	str	r3, [r2, #0]
//    	     	 } else {
//    	     		 count = 0;
//    	     	 }
//    	      }

     }
 8001cbe:	bf00      	nop
 8001cc0:	3734      	adds	r7, #52	@ 0x34
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd90      	pop	{r4, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	9fbe76c9 	.word	0x9fbe76c9
 8001ccc:	3fed2f1a 	.word	0x3fed2f1a
 8001cd0:	20000200 	.word	0x20000200
 8001cd4:	20000204 	.word	0x20000204
 8001cd8:	2000024c 	.word	0x2000024c
 8001cdc:	20000208 	.word	0x20000208
 8001ce0:	20000244 	.word	0x20000244
 8001ce4:	2000022c 	.word	0x2000022c
 8001ce8:	20000248 	.word	0x20000248
 8001cec:	20000240 	.word	0x20000240
 8001cf0:	20000224 	.word	0x20000224
 8001cf4:	2000020c 	.word	0x2000020c
 8001cf8:	20000004 	.word	0x20000004
 8001cfc:	20000238 	.word	0x20000238
 8001d00:	20000008 	.word	0x20000008
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000234 	.word	0x20000234
 8001d0c:	20000230 	.word	0x20000230
 8001d10:	20000210 	.word	0x20000210
 8001d14:	20000214 	.word	0x20000214
 8001d18:	20000218 	.word	0x20000218
 8001d1c:	2000021c 	.word	0x2000021c

08001d20 <setPIDGoalD>:

//    setMotorLPWM(leftSpeed);
//    setMotorRPWM(rightSpeed);
//

void setPIDGoalD(int16_t distance) {
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	80fb      	strh	r3, [r7, #6]
	/*
	 * For assignment 3.1: this function does not need to do anything.
	 * For assignment 3.2: this function should set a variable that stores the goal distance.
	 */
	goalDistance = distance;
 8001d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2e:	4a03      	ldr	r2, [pc, #12]	@ (8001d3c <setPIDGoalD+0x1c>)
 8001d30:	6013      	str	r3, [r2, #0]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	2000024c 	.word	0x2000024c

08001d40 <setPIDGoalA>:

void setPIDGoalA(int16_t angle) {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
	/*
	 * For assignment 3.1: this function does not need to do anything
	 * For assignment 3.2: This function should set a variable that stores the goal angle.
	 */
	goalAngle = angle;
 8001d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d4e:	4a03      	ldr	r2, [pc, #12]	@ (8001d5c <setPIDGoalA+0x1c>)
 8001d50:	6013      	str	r3, [r2, #0]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000248 	.word	0x20000248

08001d60 <PIDdone>:

int8_t PIDdone(void) { // There is no bool type in C. True/False values are represented as 1 or 0.
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
//	if (distErrorCopy < 0) {
//		distErrorCopy *= -1;

//	}

	return done;
 8001d64:	4b03      	ldr	r3, [pc, #12]	@ (8001d74 <PIDdone+0x14>)
 8001d66:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000250 	.word	0x20000250

08001d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc0 <HAL_MspInit+0x48>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc0 <HAL_MspInit+0x48>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <HAL_MspInit+0x48>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <HAL_MspInit+0x48>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	4a07      	ldr	r2, [pc, #28]	@ (8001dc0 <HAL_MspInit+0x48>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001daa:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <HAL_MspInit+0x48>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	@ 0x30
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a49      	ldr	r2, [pc, #292]	@ (8001f08 <HAL_ADC_MspInit+0x144>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	f040 808c 	bne.w	8001f00 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	4b47      	ldr	r3, [pc, #284]	@ (8001f0c <HAL_ADC_MspInit+0x148>)
 8001dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df0:	4a46      	ldr	r2, [pc, #280]	@ (8001f0c <HAL_ADC_MspInit+0x148>)
 8001df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df8:	4b44      	ldr	r3, [pc, #272]	@ (8001f0c <HAL_ADC_MspInit+0x148>)
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	4b40      	ldr	r3, [pc, #256]	@ (8001f0c <HAL_ADC_MspInit+0x148>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8001f0c <HAL_ADC_MspInit+0x148>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e14:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <HAL_ADC_MspInit+0x148>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	4b39      	ldr	r3, [pc, #228]	@ (8001f0c <HAL_ADC_MspInit+0x148>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e28:	4a38      	ldr	r2, [pc, #224]	@ (8001f0c <HAL_ADC_MspInit+0x148>)
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e30:	4b36      	ldr	r3, [pc, #216]	@ (8001f0c <HAL_ADC_MspInit+0x148>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	4b32      	ldr	r3, [pc, #200]	@ (8001f0c <HAL_ADC_MspInit+0x148>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e44:	4a31      	ldr	r2, [pc, #196]	@ (8001f0c <HAL_ADC_MspInit+0x148>)
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f0c <HAL_ADC_MspInit+0x148>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Right_Receiver_Pin|Right_Front_Receiver_Pin;
 8001e58:	2344      	movs	r3, #68	@ 0x44
 8001e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 031c 	add.w	r3, r7, #28
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4829      	ldr	r0, [pc, #164]	@ (8001f10 <HAL_ADC_MspInit+0x14c>)
 8001e6c:	f001 f902 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_Front_Receiver_Pin;
 8001e70:	2310      	movs	r3, #16
 8001e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e74:	2303      	movs	r3, #3
 8001e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Left_Front_Receiver_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	4824      	ldr	r0, [pc, #144]	@ (8001f14 <HAL_ADC_MspInit+0x150>)
 8001e84:	f001 f8f6 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_Receiver_Pin;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Left_Receiver_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4619      	mov	r1, r3
 8001e9a:	481f      	ldr	r0, [pc, #124]	@ (8001f18 <HAL_ADC_MspInit+0x154>)
 8001e9c:	f001 f8ea 	bl	8003074 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f1c <HAL_ADC_MspInit+0x158>)
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f20 <HAL_ADC_MspInit+0x15c>)
 8001ea4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <HAL_ADC_MspInit+0x158>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <HAL_ADC_MspInit+0x158>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f1c <HAL_ADC_MspInit+0x158>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <HAL_ADC_MspInit+0x158>)
 8001eba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ebe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	@ (8001f1c <HAL_ADC_MspInit+0x158>)
 8001ec2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ec6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <HAL_ADC_MspInit+0x158>)
 8001eca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ece:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ed0:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <HAL_ADC_MspInit+0x158>)
 8001ed2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ed6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ed8:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <HAL_ADC_MspInit+0x158>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ede:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <HAL_ADC_MspInit+0x158>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ee4:	480d      	ldr	r0, [pc, #52]	@ (8001f1c <HAL_ADC_MspInit+0x158>)
 8001ee6:	f000 fddf 	bl	8002aa8 <HAL_DMA_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001ef0:	f7ff fcec 	bl	80018cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a09      	ldr	r2, [pc, #36]	@ (8001f1c <HAL_ADC_MspInit+0x158>)
 8001ef8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001efa:	4a08      	ldr	r2, [pc, #32]	@ (8001f1c <HAL_ADC_MspInit+0x158>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f00:	bf00      	nop
 8001f02:	3730      	adds	r7, #48	@ 0x30
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40012000 	.word	0x40012000
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	2000007c 	.word	0x2000007c
 8001f20:	40026410 	.word	0x40026410

08001f24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	@ 0x30
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a32      	ldr	r2, [pc, #200]	@ (800200c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d12d      	bne.n	8001fa2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	4b31      	ldr	r3, [pc, #196]	@ (8002010 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	4a30      	ldr	r2, [pc, #192]	@ (8002010 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f56:	4b2e      	ldr	r3, [pc, #184]	@ (8002010 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	4b2a      	ldr	r3, [pc, #168]	@ (8002010 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	4a29      	ldr	r2, [pc, #164]	@ (8002010 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f72:	4b27      	ldr	r3, [pc, #156]	@ (8002010 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Left_Encoder_1_Pin|Left_Encoder_2_Pin;
 8001f7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	4619      	mov	r1, r3
 8001f9a:	481e      	ldr	r0, [pc, #120]	@ (8002014 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f9c:	f001 f86a 	bl	8003074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fa0:	e030      	b.n	8002004 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001faa:	d12b      	bne.n	8002004 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	4b17      	ldr	r3, [pc, #92]	@ (8002010 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	4a16      	ldr	r2, [pc, #88]	@ (8002010 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fbc:	4b14      	ldr	r3, [pc, #80]	@ (8002010 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8002010 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8002010 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Right_Encoder_1_Pin|Right_Encoder_2_Pin;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4805      	ldr	r0, [pc, #20]	@ (8002014 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002000:	f001 f838 	bl	8003074 <HAL_GPIO_Init>
}
 8002004:	bf00      	nop
 8002006:	3730      	adds	r7, #48	@ 0x30
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40010000 	.word	0x40010000
 8002010:	40023800 	.word	0x40023800
 8002014:	40020000 	.word	0x40020000

08002018 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1c      	ldr	r2, [pc, #112]	@ (8002098 <HAL_TIM_PWM_MspInit+0x80>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d116      	bne.n	8002058 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <HAL_TIM_PWM_MspInit+0x84>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	4a1a      	ldr	r2, [pc, #104]	@ (800209c <HAL_TIM_PWM_MspInit+0x84>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	6413      	str	r3, [r2, #64]	@ 0x40
 800203a:	4b18      	ldr	r3, [pc, #96]	@ (800209c <HAL_TIM_PWM_MspInit+0x84>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	201d      	movs	r0, #29
 800204c:	f000 fcf5 	bl	8002a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002050:	201d      	movs	r0, #29
 8002052:	f000 fd0e 	bl	8002a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002056:	e01a      	b.n	800208e <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM4)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a10      	ldr	r2, [pc, #64]	@ (80020a0 <HAL_TIM_PWM_MspInit+0x88>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d115      	bne.n	800208e <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <HAL_TIM_PWM_MspInit+0x84>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	4a0c      	ldr	r2, [pc, #48]	@ (800209c <HAL_TIM_PWM_MspInit+0x84>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6413      	str	r3, [r2, #64]	@ 0x40
 8002072:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <HAL_TIM_PWM_MspInit+0x84>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	201e      	movs	r0, #30
 8002084:	f000 fcd9 	bl	8002a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002088:	201e      	movs	r0, #30
 800208a:	f000 fcf2 	bl	8002a72 <HAL_NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40000400 	.word	0x40000400
 800209c:	40023800 	.word	0x40023800
 80020a0:	40000800 	.word	0x40000800

080020a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	@ 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a24      	ldr	r2, [pc, #144]	@ (8002154 <HAL_TIM_MspPostInit+0xb0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d11e      	bne.n	8002104 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <HAL_TIM_MspPostInit+0xb4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4a22      	ldr	r2, [pc, #136]	@ (8002158 <HAL_TIM_MspPostInit+0xb4>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d6:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <HAL_TIM_MspPostInit+0xb4>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Driver_Input_1v2_Pin;
 80020e2:	2340      	movs	r3, #64	@ 0x40
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020f2:	2302      	movs	r3, #2
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Driver_Input_1v2_GPIO_Port, &GPIO_InitStruct);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4619      	mov	r1, r3
 80020fc:	4817      	ldr	r0, [pc, #92]	@ (800215c <HAL_TIM_MspPostInit+0xb8>)
 80020fe:	f000 ffb9 	bl	8003074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002102:	e023      	b.n	800214c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a15      	ldr	r2, [pc, #84]	@ (8002160 <HAL_TIM_MspPostInit+0xbc>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d11e      	bne.n	800214c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <HAL_TIM_MspPostInit+0xb4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a10      	ldr	r2, [pc, #64]	@ (8002158 <HAL_TIM_MspPostInit+0xb4>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <HAL_TIM_MspPostInit+0xb4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Driver_Input_2_Pin|Driver_Input_3_Pin|Driver_Input_4_Pin;
 800212a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800212e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800213c:	2302      	movs	r3, #2
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	4807      	ldr	r0, [pc, #28]	@ (8002164 <HAL_TIM_MspPostInit+0xc0>)
 8002148:	f000 ff94 	bl	8003074 <HAL_GPIO_Init>
}
 800214c:	bf00      	nop
 800214e:	3728      	adds	r7, #40	@ 0x28
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40000400 	.word	0x40000400
 8002158:	40023800 	.word	0x40023800
 800215c:	40020800 	.word	0x40020800
 8002160:	40000800 	.word	0x40000800
 8002164:	40020400 	.word	0x40020400

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <NMI_Handler+0x4>

08002170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <HardFault_Handler+0x4>

08002178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <MemManage_Handler+0x4>

08002180 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <UsageFault_Handler+0x4>

08002190 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b8:	f000 f8e2 	bl	8002380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 80021bc:	f000 f826 	bl	800220c <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021c8:	4802      	ldr	r0, [pc, #8]	@ (80021d4 <TIM3_IRQHandler+0x10>)
 80021ca:	f001 ff5b 	bl	8004084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000016c 	.word	0x2000016c

080021d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021dc:	4802      	ldr	r0, [pc, #8]	@ (80021e8 <TIM4_IRQHandler+0x10>)
 80021de:	f001 ff51 	bl	8004084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200001b4 	.word	0x200001b4

080021ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021f0:	4802      	ldr	r0, [pc, #8]	@ (80021fc <DMA2_Stream0_IRQHandler+0x10>)
 80021f2:	f000 fd07 	bl	8002c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000007c 	.word	0x2000007c

08002200 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <SysTickFunction>:

#include "main.h"
#include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */
	 updatePID(0.001);
 8002212:	481b      	ldr	r0, [pc, #108]	@ (8002280 <SysTickFunction+0x74>)
 8002214:	f7ff fc44 	bl	8001aa0 <updatePID>
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8002218:	f7ff f846 	bl	80012a8 <getRightEncoderCounts>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	f647 1318 	movw	r3, #31000	@ 0x7918
 8002224:	429a      	cmp	r2, r3
 8002226:	dc15      	bgt.n	8002254 <SysTickFunction+0x48>
 8002228:	f7ff f848 	bl	80012bc <getLeftEncoderCounts>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	f647 1318 	movw	r3, #31000	@ 0x7918
 8002234:	429a      	cmp	r2, r3
 8002236:	dc0d      	bgt.n	8002254 <SysTickFunction+0x48>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8002238:	f7ff f836 	bl	80012a8 <getRightEncoderCounts>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <SysTickFunction+0x78>)
 8002242:	429a      	cmp	r2, r3
 8002244:	db06      	blt.n	8002254 <SysTickFunction+0x48>
 8002246:	f7ff f839 	bl	80012bc <getLeftEncoderCounts>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <SysTickFunction+0x78>)
 8002250:	429a      	cmp	r2, r3
 8002252:	da11      	bge.n	8002278 <SysTickFunction+0x6c>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8002254:	f7ff f828 	bl	80012a8 <getRightEncoderCounts>
 8002258:	4603      	mov	r3, r0
 800225a:	b29c      	uxth	r4, r3
 800225c:	f7ff f82e 	bl	80012bc <getLeftEncoderCounts>
 8002260:	4603      	mov	r3, r0
 8002262:	b29b      	uxth	r3, r3
 8002264:	1ae3      	subs	r3, r4, r3
 8002266:	b29b      	uxth	r3, r3
 8002268:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 800226a:	f7ff f833 	bl	80012d4 <resetEncoders>
		TIM2->CNT = (int16_t) difference; //set right encoder counts to difference
 800226e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002276:	6253      	str	r3, [r2, #36]	@ 0x24
	}
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bd90      	pop	{r4, r7, pc}
 8002280:	3a83126f 	.word	0x3a83126f
 8002284:	ffff86e8 	.word	0xffff86e8

08002288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 800228c:	f7ff ffb8 	bl	8002200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002290:	480c      	ldr	r0, [pc, #48]	@ (80022c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002292:	490d      	ldr	r1, [pc, #52]	@ (80022c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002294:	4a0d      	ldr	r2, [pc, #52]	@ (80022cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002298:	e002      	b.n	80022a0 <LoopCopyDataInit>

0800229a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800229c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229e:	3304      	adds	r3, #4

080022a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a4:	d3f9      	bcc.n	800229a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a6:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022a8:	4c0a      	ldr	r4, [pc, #40]	@ (80022d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ac:	e001      	b.n	80022b2 <LoopFillZerobss>

080022ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b0:	3204      	adds	r2, #4

080022b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b4:	d3fb      	bcc.n	80022ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022b6:	f002 fbd3 	bl	8004a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ba:	f7ff f81b 	bl	80012f4 <main>
  bx  lr    
 80022be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80022cc:	08004ae8 	.word	0x08004ae8
  ldr r2, =_sbss
 80022d0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80022d4:	20000258 	.word	0x20000258

080022d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d8:	e7fe      	b.n	80022d8 <ADC_IRQHandler>
	...

080022dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022e0:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <HAL_Init+0x40>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <HAL_Init+0x40>)
 80022e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <HAL_Init+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	@ (800231c <HAL_Init+0x40>)
 80022f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f8:	4b08      	ldr	r3, [pc, #32]	@ (800231c <HAL_Init+0x40>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a07      	ldr	r2, [pc, #28]	@ (800231c <HAL_Init+0x40>)
 80022fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002304:	2003      	movs	r0, #3
 8002306:	f000 fb8d 	bl	8002a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800230a:	200f      	movs	r0, #15
 800230c:	f000 f808 	bl	8002320 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002310:	f7ff fd32 	bl	8001d78 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023c00 	.word	0x40023c00

08002320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002328:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <HAL_InitTick+0x54>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <HAL_InitTick+0x58>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002336:	fbb3 f3f1 	udiv	r3, r3, r1
 800233a:	fbb2 f3f3 	udiv	r3, r2, r3
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fba5 	bl	8002a8e <HAL_SYSTICK_Config>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e00e      	b.n	800236c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b0f      	cmp	r3, #15
 8002352:	d80a      	bhi.n	800236a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002354:	2200      	movs	r2, #0
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	f000 fb6d 	bl	8002a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002360:	4a06      	ldr	r2, [pc, #24]	@ (800237c <HAL_InitTick+0x5c>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e000      	b.n	800236c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	2000000c 	.word	0x2000000c
 8002378:	20000014 	.word	0x20000014
 800237c:	20000010 	.word	0x20000010

08002380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_IncTick+0x1c>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <HAL_IncTick+0x20>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4413      	add	r3, r2
 8002390:	4a03      	ldr	r2, [pc, #12]	@ (80023a0 <HAL_IncTick+0x20>)
 8002392:	6013      	str	r3, [r2, #0]
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	20000014 	.word	0x20000014
 80023a0:	20000254 	.word	0x20000254

080023a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return uwTick;
 80023a8:	4b02      	ldr	r3, [pc, #8]	@ (80023b4 <HAL_GetTick+0x10>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	20000254 	.word	0x20000254

080023b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e033      	b.n	8002436 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff fcf4 	bl	8001dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d118      	bne.n	8002428 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023fe:	f023 0302 	bic.w	r3, r3, #2
 8002402:	f043 0202 	orr.w	r2, r3, #2
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f938 	bl	8002680 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	f023 0303 	bic.w	r3, r3, #3
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	641a      	str	r2, [r3, #64]	@ 0x40
 8002426:	e001      	b.n	800242c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002434:	7bfb      	ldrb	r3, [r7, #15]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_ADC_ConfigChannel+0x1c>
 8002458:	2302      	movs	r3, #2
 800245a:	e103      	b.n	8002664 <HAL_ADC_ConfigChannel+0x224>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b09      	cmp	r3, #9
 800246a:	d925      	bls.n	80024b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68d9      	ldr	r1, [r3, #12]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	3b1e      	subs	r3, #30
 8002482:	2207      	movs	r2, #7
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43da      	mvns	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	400a      	ands	r2, r1
 8002490:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68d9      	ldr	r1, [r3, #12]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	4603      	mov	r3, r0
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4403      	add	r3, r0
 80024aa:	3b1e      	subs	r3, #30
 80024ac:	409a      	lsls	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	e022      	b.n	80024fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6919      	ldr	r1, [r3, #16]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	2207      	movs	r2, #7
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	400a      	ands	r2, r1
 80024da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6919      	ldr	r1, [r3, #16]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	4618      	mov	r0, r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4403      	add	r3, r0
 80024f4:	409a      	lsls	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b06      	cmp	r3, #6
 8002504:	d824      	bhi.n	8002550 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	3b05      	subs	r3, #5
 8002518:	221f      	movs	r2, #31
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43da      	mvns	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	400a      	ands	r2, r1
 8002526:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	4618      	mov	r0, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	3b05      	subs	r3, #5
 8002542:	fa00 f203 	lsl.w	r2, r0, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	635a      	str	r2, [r3, #52]	@ 0x34
 800254e:	e04c      	b.n	80025ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b0c      	cmp	r3, #12
 8002556:	d824      	bhi.n	80025a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	3b23      	subs	r3, #35	@ 0x23
 800256a:	221f      	movs	r2, #31
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43da      	mvns	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	400a      	ands	r2, r1
 8002578:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	4618      	mov	r0, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	3b23      	subs	r3, #35	@ 0x23
 8002594:	fa00 f203 	lsl.w	r2, r0, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	631a      	str	r2, [r3, #48]	@ 0x30
 80025a0:	e023      	b.n	80025ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	3b41      	subs	r3, #65	@ 0x41
 80025b4:	221f      	movs	r2, #31
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	400a      	ands	r2, r1
 80025c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	4618      	mov	r0, r3
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	3b41      	subs	r3, #65	@ 0x41
 80025de:	fa00 f203 	lsl.w	r2, r0, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a20      	ldr	r2, [pc, #128]	@ (8002670 <HAL_ADC_ConfigChannel+0x230>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d109      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x1c8>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b12      	cmp	r3, #18
 80025fa:	d105      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80025fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <HAL_ADC_ConfigChannel+0x234>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a1c      	ldr	r2, [pc, #112]	@ (8002674 <HAL_ADC_ConfigChannel+0x234>)
 8002602:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002606:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a18      	ldr	r2, [pc, #96]	@ (8002670 <HAL_ADC_ConfigChannel+0x230>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d123      	bne.n	800265a <HAL_ADC_ConfigChannel+0x21a>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b10      	cmp	r3, #16
 8002618:	d003      	beq.n	8002622 <HAL_ADC_ConfigChannel+0x1e2>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b11      	cmp	r3, #17
 8002620:	d11b      	bne.n	800265a <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002622:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_ADC_ConfigChannel+0x234>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4a13      	ldr	r2, [pc, #76]	@ (8002674 <HAL_ADC_ConfigChannel+0x234>)
 8002628:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800262c:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b10      	cmp	r3, #16
 8002634:	d111      	bne.n	800265a <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002636:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <HAL_ADC_ConfigChannel+0x238>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a10      	ldr	r2, [pc, #64]	@ (800267c <HAL_ADC_ConfigChannel+0x23c>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	0c9a      	lsrs	r2, r3, #18
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800264c:	e002      	b.n	8002654 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3b01      	subs	r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f9      	bne.n	800264e <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40012000 	.word	0x40012000
 8002674:	40012300 	.word	0x40012300
 8002678:	2000000c 	.word	0x2000000c
 800267c:	431bde83 	.word	0x431bde83

08002680 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002688:	4b7e      	ldr	r3, [pc, #504]	@ (8002884 <ADC_Init+0x204>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a7d      	ldr	r2, [pc, #500]	@ (8002884 <ADC_Init+0x204>)
 800268e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002692:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002694:	4b7b      	ldr	r3, [pc, #492]	@ (8002884 <ADC_Init+0x204>)
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4979      	ldr	r1, [pc, #484]	@ (8002884 <ADC_Init+0x204>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	021a      	lsls	r2, r3, #8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80026d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6899      	ldr	r1, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270e:	4a5e      	ldr	r2, [pc, #376]	@ (8002888 <ADC_Init+0x208>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d022      	beq.n	800275a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002722:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6899      	ldr	r1, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002744:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6899      	ldr	r1, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	e00f      	b.n	800277a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002768:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002778:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0202 	bic.w	r2, r2, #2
 8002788:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6899      	ldr	r1, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7e1b      	ldrb	r3, [r3, #24]
 8002794:	005a      	lsls	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d027      	beq.n	80027f8 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80027c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	3b01      	subs	r3, #1
 80027ce:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80027d2:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	fa92 f2a2 	rbit	r2, r2
 80027da:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	fab2 f282 	clz	r2, r2
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	fa03 f102 	lsl.w	r1, r3, r2
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	e007      	b.n	8002808 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002806:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002816:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	3b01      	subs	r3, #1
 8002824:	051a      	lsls	r2, r3, #20
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800283c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6899      	ldr	r1, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800284a:	025a      	lsls	r2, r3, #9
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002862:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6899      	ldr	r1, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	029a      	lsls	r2, r3, #10
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	609a      	str	r2, [r3, #8]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40012300 	.word	0x40012300
 8002888:	0f000001 	.word	0x0f000001

0800288c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800289c:	4b0c      	ldr	r3, [pc, #48]	@ (80028d0 <__NVIC_SetPriorityGrouping+0x44>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028be:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <__NVIC_SetPriorityGrouping+0x44>)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	60d3      	str	r3, [r2, #12]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d8:	4b04      	ldr	r3, [pc, #16]	@ (80028ec <__NVIC_GetPriorityGrouping+0x18>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	f003 0307 	and.w	r3, r3, #7
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	db0b      	blt.n	800291a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4906      	ldr	r1, [pc, #24]	@ (8002924 <__NVIC_EnableIRQ+0x34>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	2001      	movs	r0, #1
 8002912:	fa00 f202 	lsl.w	r2, r0, r2
 8002916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	e000e100 	.word	0xe000e100

08002928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002938:	2b00      	cmp	r3, #0
 800293a:	db0a      	blt.n	8002952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	b2da      	uxtb	r2, r3
 8002940:	490c      	ldr	r1, [pc, #48]	@ (8002974 <__NVIC_SetPriority+0x4c>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	0112      	lsls	r2, r2, #4
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	440b      	add	r3, r1
 800294c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002950:	e00a      	b.n	8002968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4908      	ldr	r1, [pc, #32]	@ (8002978 <__NVIC_SetPriority+0x50>)
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	3b04      	subs	r3, #4
 8002960:	0112      	lsls	r2, r2, #4
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	440b      	add	r3, r1
 8002966:	761a      	strb	r2, [r3, #24]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000e100 	.word	0xe000e100
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800297c:	b480      	push	{r7}
 800297e:	b089      	sub	sp, #36	@ 0x24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f1c3 0307 	rsb	r3, r3, #7
 8002996:	2b04      	cmp	r3, #4
 8002998:	bf28      	it	cs
 800299a:	2304      	movcs	r3, #4
 800299c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3304      	adds	r3, #4
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	d902      	bls.n	80029ac <NVIC_EncodePriority+0x30>
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3b03      	subs	r3, #3
 80029aa:	e000      	b.n	80029ae <NVIC_EncodePriority+0x32>
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b0:	f04f 32ff 	mov.w	r2, #4294967295
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43da      	mvns	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	401a      	ands	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c4:	f04f 31ff 	mov.w	r1, #4294967295
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fa01 f303 	lsl.w	r3, r1, r3
 80029ce:	43d9      	mvns	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	4313      	orrs	r3, r2
         );
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3724      	adds	r7, #36	@ 0x24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029f0:	d301      	bcc.n	80029f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00f      	b.n	8002a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a20 <SysTick_Config+0x40>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029fe:	210f      	movs	r1, #15
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295
 8002a04:	f7ff ff90 	bl	8002928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a08:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <SysTick_Config+0x40>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a0e:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <SysTick_Config+0x40>)
 8002a10:	2207      	movs	r2, #7
 8002a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	e000e010 	.word	0xe000e010

08002a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff ff2d 	bl	800288c <__NVIC_SetPriorityGrouping>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b086      	sub	sp, #24
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a4c:	f7ff ff42 	bl	80028d4 <__NVIC_GetPriorityGrouping>
 8002a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	6978      	ldr	r0, [r7, #20]
 8002a58:	f7ff ff90 	bl	800297c <NVIC_EncodePriority>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff5f 	bl	8002928 <__NVIC_SetPriority>
}
 8002a6a:	bf00      	nop
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	4603      	mov	r3, r0
 8002a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff35 	bl	80028f0 <__NVIC_EnableIRQ>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ffa2 	bl	80029e0 <SysTick_Config>
 8002a9c:	4603      	mov	r3, r0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ab4:	f7ff fc76 	bl	80023a4 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e099      	b.n	8002bf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae4:	e00f      	b.n	8002b06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ae6:	f7ff fc5d 	bl	80023a4 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b05      	cmp	r3, #5
 8002af2:	d908      	bls.n	8002b06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2203      	movs	r2, #3
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e078      	b.n	8002bf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e8      	bne.n	8002ae6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4b38      	ldr	r3, [pc, #224]	@ (8002c00 <HAL_DMA_Init+0x158>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d107      	bne.n	8002b70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f023 0307 	bic.w	r3, r3, #7
 8002b86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d117      	bne.n	8002bca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00e      	beq.n	8002bca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f9e7 	bl	8002f80 <DMA_CheckFifoParam>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2240      	movs	r2, #64	@ 0x40
 8002bbc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e016      	b.n	8002bf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f9a0 	bl	8002f18 <DMA_CalcBaseAndBitshift>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be0:	223f      	movs	r2, #63	@ 0x3f
 8002be2:	409a      	lsls	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	f010803f 	.word	0xf010803f

08002c04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c10:	4b8e      	ldr	r3, [pc, #568]	@ (8002e4c <HAL_DMA_IRQHandler+0x248>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a8e      	ldr	r2, [pc, #568]	@ (8002e50 <HAL_DMA_IRQHandler+0x24c>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	0a9b      	lsrs	r3, r3, #10
 8002c1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2e:	2208      	movs	r2, #8
 8002c30:	409a      	lsls	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01a      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d013      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0204 	bic.w	r2, r2, #4
 8002c56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c68:	f043 0201 	orr.w	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c74:	2201      	movs	r2, #1
 8002c76:	409a      	lsls	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d012      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c92:	2201      	movs	r2, #1
 8002c94:	409a      	lsls	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9e:	f043 0202 	orr.w	r2, r3, #2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002caa:	2204      	movs	r2, #4
 8002cac:	409a      	lsls	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d012      	beq.n	8002cdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc8:	2204      	movs	r2, #4
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd4:	f043 0204 	orr.w	r2, r3, #4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d043      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d03c      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfe:	2210      	movs	r2, #16
 8002d00:	409a      	lsls	r2, r3
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d018      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d108      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d024      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	4798      	blx	r3
 8002d32:	e01f      	b.n	8002d74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01b      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
 8002d44:	e016      	b.n	8002d74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d107      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0208 	bic.w	r2, r2, #8
 8002d62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d78:	2220      	movs	r2, #32
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 808f 	beq.w	8002ea4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 8087 	beq.w	8002ea4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	d136      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0216 	bic.w	r2, r2, #22
 8002dbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d103      	bne.n	8002dde <HAL_DMA_IRQHandler+0x1da>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0208 	bic.w	r2, r2, #8
 8002dec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df2:	223f      	movs	r2, #63	@ 0x3f
 8002df4:	409a      	lsls	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d07e      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
        }
        return;
 8002e1a:	e079      	b.n	8002f10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01d      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10d      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d031      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
 8002e48:	e02c      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x2a0>
 8002e4a:	bf00      	nop
 8002e4c:	2000000c 	.word	0x2000000c
 8002e50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d023      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
 8002e64:	e01e      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10f      	bne.n	8002e94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0210 	bic.w	r2, r2, #16
 8002e82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d032      	beq.n	8002f12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d022      	beq.n	8002efe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2205      	movs	r2, #5
 8002ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d307      	bcc.n	8002eec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f2      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x2cc>
 8002eea:	e000      	b.n	8002eee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002eec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d005      	beq.n	8002f12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
 8002f0e:	e000      	b.n	8002f12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f10:	bf00      	nop
    }
  }
}
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	3b10      	subs	r3, #16
 8002f28:	4a13      	ldr	r2, [pc, #76]	@ (8002f78 <DMA_CalcBaseAndBitshift+0x60>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f32:	4a12      	ldr	r2, [pc, #72]	@ (8002f7c <DMA_CalcBaseAndBitshift+0x64>)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d909      	bls.n	8002f5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	1d1a      	adds	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f58:	e007      	b.n	8002f6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f62:	f023 0303 	bic.w	r3, r3, #3
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	aaaaaaab 	.word	0xaaaaaaab
 8002f7c:	08004ad0 	.word	0x08004ad0

08002f80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d11f      	bne.n	8002fda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d856      	bhi.n	800304e <DMA_CheckFifoParam+0xce>
 8002fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa8 <DMA_CheckFifoParam+0x28>)
 8002fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa6:	bf00      	nop
 8002fa8:	08002fb9 	.word	0x08002fb9
 8002fac:	08002fcb 	.word	0x08002fcb
 8002fb0:	08002fb9 	.word	0x08002fb9
 8002fb4:	0800304f 	.word	0x0800304f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d046      	beq.n	8003052 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc8:	e043      	b.n	8003052 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fd2:	d140      	bne.n	8003056 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd8:	e03d      	b.n	8003056 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe2:	d121      	bne.n	8003028 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d837      	bhi.n	800305a <DMA_CheckFifoParam+0xda>
 8002fea:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff0 <DMA_CheckFifoParam+0x70>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	08003001 	.word	0x08003001
 8002ff4:	08003007 	.word	0x08003007
 8002ff8:	08003001 	.word	0x08003001
 8002ffc:	08003019 	.word	0x08003019
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      break;
 8003004:	e030      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d025      	beq.n	800305e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003016:	e022      	b.n	800305e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003020:	d11f      	bne.n	8003062 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003026:	e01c      	b.n	8003062 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d903      	bls.n	8003036 <DMA_CheckFifoParam+0xb6>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d003      	beq.n	800303c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003034:	e018      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
      break;
 800303a:	e015      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003040:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00e      	beq.n	8003066 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
      break;
 800304c:	e00b      	b.n	8003066 <DMA_CheckFifoParam+0xe6>
      break;
 800304e:	bf00      	nop
 8003050:	e00a      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 8003052:	bf00      	nop
 8003054:	e008      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 8003056:	bf00      	nop
 8003058:	e006      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 800305a:	bf00      	nop
 800305c:	e004      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 800305e:	bf00      	nop
 8003060:	e002      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;   
 8003062:	bf00      	nop
 8003064:	e000      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 8003066:	bf00      	nop
    }
  } 
  
  return status; 
 8003068:	7bfb      	ldrb	r3, [r7, #15]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003082:	e16f      	b.n	8003364 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	4013      	ands	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8161 	beq.w	800335e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d005      	beq.n	80030b4 <HAL_GPIO_Init+0x40>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d130      	bne.n	8003116 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030ea:	2201      	movs	r2, #1
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	f003 0201 	and.w	r2, r3, #1
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b03      	cmp	r3, #3
 8003120:	d017      	beq.n	8003152 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	2203      	movs	r2, #3
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d123      	bne.n	80031a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	08da      	lsrs	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3208      	adds	r2, #8
 8003166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800316a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	220f      	movs	r2, #15
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	08da      	lsrs	r2, r3, #3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3208      	adds	r2, #8
 80031a0:	6939      	ldr	r1, [r7, #16]
 80031a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	2203      	movs	r2, #3
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 0203 	and.w	r2, r3, #3
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80bb 	beq.w	800335e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e8:	2300      	movs	r3, #0
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	4b64      	ldr	r3, [pc, #400]	@ (8003380 <HAL_GPIO_Init+0x30c>)
 80031ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f0:	4a63      	ldr	r2, [pc, #396]	@ (8003380 <HAL_GPIO_Init+0x30c>)
 80031f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80031f8:	4b61      	ldr	r3, [pc, #388]	@ (8003380 <HAL_GPIO_Init+0x30c>)
 80031fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003204:	4a5f      	ldr	r2, [pc, #380]	@ (8003384 <HAL_GPIO_Init+0x310>)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	3302      	adds	r3, #2
 800320c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	220f      	movs	r2, #15
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a57      	ldr	r2, [pc, #348]	@ (8003388 <HAL_GPIO_Init+0x314>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d031      	beq.n	8003294 <HAL_GPIO_Init+0x220>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a56      	ldr	r2, [pc, #344]	@ (800338c <HAL_GPIO_Init+0x318>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d02b      	beq.n	8003290 <HAL_GPIO_Init+0x21c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a55      	ldr	r2, [pc, #340]	@ (8003390 <HAL_GPIO_Init+0x31c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d025      	beq.n	800328c <HAL_GPIO_Init+0x218>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a54      	ldr	r2, [pc, #336]	@ (8003394 <HAL_GPIO_Init+0x320>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d01f      	beq.n	8003288 <HAL_GPIO_Init+0x214>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a53      	ldr	r2, [pc, #332]	@ (8003398 <HAL_GPIO_Init+0x324>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d019      	beq.n	8003284 <HAL_GPIO_Init+0x210>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a52      	ldr	r2, [pc, #328]	@ (800339c <HAL_GPIO_Init+0x328>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <HAL_GPIO_Init+0x20c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a51      	ldr	r2, [pc, #324]	@ (80033a0 <HAL_GPIO_Init+0x32c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00d      	beq.n	800327c <HAL_GPIO_Init+0x208>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a50      	ldr	r2, [pc, #320]	@ (80033a4 <HAL_GPIO_Init+0x330>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d007      	beq.n	8003278 <HAL_GPIO_Init+0x204>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a4f      	ldr	r2, [pc, #316]	@ (80033a8 <HAL_GPIO_Init+0x334>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d101      	bne.n	8003274 <HAL_GPIO_Init+0x200>
 8003270:	2308      	movs	r3, #8
 8003272:	e010      	b.n	8003296 <HAL_GPIO_Init+0x222>
 8003274:	2309      	movs	r3, #9
 8003276:	e00e      	b.n	8003296 <HAL_GPIO_Init+0x222>
 8003278:	2307      	movs	r3, #7
 800327a:	e00c      	b.n	8003296 <HAL_GPIO_Init+0x222>
 800327c:	2306      	movs	r3, #6
 800327e:	e00a      	b.n	8003296 <HAL_GPIO_Init+0x222>
 8003280:	2305      	movs	r3, #5
 8003282:	e008      	b.n	8003296 <HAL_GPIO_Init+0x222>
 8003284:	2304      	movs	r3, #4
 8003286:	e006      	b.n	8003296 <HAL_GPIO_Init+0x222>
 8003288:	2303      	movs	r3, #3
 800328a:	e004      	b.n	8003296 <HAL_GPIO_Init+0x222>
 800328c:	2302      	movs	r3, #2
 800328e:	e002      	b.n	8003296 <HAL_GPIO_Init+0x222>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <HAL_GPIO_Init+0x222>
 8003294:	2300      	movs	r3, #0
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	f002 0203 	and.w	r2, r2, #3
 800329c:	0092      	lsls	r2, r2, #2
 800329e:	4093      	lsls	r3, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032a8:	4936      	ldr	r1, [pc, #216]	@ (8003384 <HAL_GPIO_Init+0x310>)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	3302      	adds	r3, #2
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032b6:	4b3d      	ldr	r3, [pc, #244]	@ (80033ac <HAL_GPIO_Init+0x338>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	43db      	mvns	r3, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032da:	4a34      	ldr	r2, [pc, #208]	@ (80033ac <HAL_GPIO_Init+0x338>)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032e0:	4b32      	ldr	r3, [pc, #200]	@ (80033ac <HAL_GPIO_Init+0x338>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003304:	4a29      	ldr	r2, [pc, #164]	@ (80033ac <HAL_GPIO_Init+0x338>)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800330a:	4b28      	ldr	r3, [pc, #160]	@ (80033ac <HAL_GPIO_Init+0x338>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	43db      	mvns	r3, r3
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4013      	ands	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800332e:	4a1f      	ldr	r2, [pc, #124]	@ (80033ac <HAL_GPIO_Init+0x338>)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003334:	4b1d      	ldr	r3, [pc, #116]	@ (80033ac <HAL_GPIO_Init+0x338>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	43db      	mvns	r3, r3
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003358:	4a14      	ldr	r2, [pc, #80]	@ (80033ac <HAL_GPIO_Init+0x338>)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	3301      	adds	r3, #1
 8003362:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa22 f303 	lsr.w	r3, r2, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	f47f ae88 	bne.w	8003084 <HAL_GPIO_Init+0x10>
  }
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	40023800 	.word	0x40023800
 8003384:	40013800 	.word	0x40013800
 8003388:	40020000 	.word	0x40020000
 800338c:	40020400 	.word	0x40020400
 8003390:	40020800 	.word	0x40020800
 8003394:	40020c00 	.word	0x40020c00
 8003398:	40021000 	.word	0x40021000
 800339c:	40021400 	.word	0x40021400
 80033a0:	40021800 	.word	0x40021800
 80033a4:	40021c00 	.word	0x40021c00
 80033a8:	40022000 	.word	0x40022000
 80033ac:	40013c00 	.word	0x40013c00

080033b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	807b      	strh	r3, [r7, #2]
 80033bc:	4613      	mov	r3, r2
 80033be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033c0:	787b      	ldrb	r3, [r7, #1]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033cc:	e003      	b.n	80033d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033ce:	887b      	ldrh	r3, [r7, #2]
 80033d0:	041a      	lsls	r2, r3, #16
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	619a      	str	r2, [r3, #24]
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	@ 0x28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e23b      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d050      	beq.n	80034a0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033fe:	4b9e      	ldr	r3, [pc, #632]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b04      	cmp	r3, #4
 8003408:	d00c      	beq.n	8003424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340a:	4b9b      	ldr	r3, [pc, #620]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003412:	2b08      	cmp	r3, #8
 8003414:	d112      	bne.n	800343c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003416:	4b98      	ldr	r3, [pc, #608]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800341e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003422:	d10b      	bne.n	800343c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003424:	4b94      	ldr	r3, [pc, #592]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d036      	beq.n	800349e <HAL_RCC_OscConfig+0xbe>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d132      	bne.n	800349e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e216      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	4b8e      	ldr	r3, [pc, #568]	@ (800367c <HAL_RCC_OscConfig+0x29c>)
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d013      	beq.n	8003476 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fe ffa9 	bl	80023a4 <HAL_GetTick>
 8003452:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003456:	f7fe ffa5 	bl	80023a4 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b64      	cmp	r3, #100	@ 0x64
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e200      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003468:	4b83      	ldr	r3, [pc, #524]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x76>
 8003474:	e014      	b.n	80034a0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe ff95 	bl	80023a4 <HAL_GetTick>
 800347a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800347e:	f7fe ff91 	bl	80023a4 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b64      	cmp	r3, #100	@ 0x64
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e1ec      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003490:	4b79      	ldr	r3, [pc, #484]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f0      	bne.n	800347e <HAL_RCC_OscConfig+0x9e>
 800349c:	e000      	b.n	80034a0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d077      	beq.n	800359c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ac:	4b72      	ldr	r3, [pc, #456]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00b      	beq.n	80034d0 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d126      	bne.n	8003512 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d120      	bne.n	8003512 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d0:	4b69      	ldr	r3, [pc, #420]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_OscConfig+0x108>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e1c0      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b63      	ldr	r3, [pc, #396]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	21f8      	movs	r1, #248	@ 0xf8
 80034f6:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	69b9      	ldr	r1, [r7, #24]
 80034fa:	fa91 f1a1 	rbit	r1, r1
 80034fe:	6179      	str	r1, [r7, #20]
  return result;
 8003500:	6979      	ldr	r1, [r7, #20]
 8003502:	fab1 f181 	clz	r1, r1
 8003506:	b2c9      	uxtb	r1, r1
 8003508:	408b      	lsls	r3, r1
 800350a:	495b      	ldr	r1, [pc, #364]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003510:	e044      	b.n	800359c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02a      	beq.n	8003570 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800351a:	4b59      	ldr	r3, [pc, #356]	@ (8003680 <HAL_RCC_OscConfig+0x2a0>)
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe ff40 	bl	80023a4 <HAL_GetTick>
 8003524:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003528:	f7fe ff3c 	bl	80023a4 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e197      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	4b4f      	ldr	r3, [pc, #316]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003546:	4b4c      	ldr	r3, [pc, #304]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	21f8      	movs	r1, #248	@ 0xf8
 8003554:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	6939      	ldr	r1, [r7, #16]
 8003558:	fa91 f1a1 	rbit	r1, r1
 800355c:	60f9      	str	r1, [r7, #12]
  return result;
 800355e:	68f9      	ldr	r1, [r7, #12]
 8003560:	fab1 f181 	clz	r1, r1
 8003564:	b2c9      	uxtb	r1, r1
 8003566:	408b      	lsls	r3, r1
 8003568:	4943      	ldr	r1, [pc, #268]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]
 800356e:	e015      	b.n	800359c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003570:	4b43      	ldr	r3, [pc, #268]	@ (8003680 <HAL_RCC_OscConfig+0x2a0>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7fe ff15 	bl	80023a4 <HAL_GetTick>
 800357a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800357e:	f7fe ff11 	bl	80023a4 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e16c      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003590:	4b39      	ldr	r3, [pc, #228]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f0      	bne.n	800357e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d030      	beq.n	800360a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d016      	beq.n	80035de <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b0:	4b34      	ldr	r3, [pc, #208]	@ (8003684 <HAL_RCC_OscConfig+0x2a4>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b6:	f7fe fef5 	bl	80023a4 <HAL_GetTick>
 80035ba:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035be:	f7fe fef1 	bl	80023a4 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e14c      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d0:	4b29      	ldr	r3, [pc, #164]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 80035d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x1de>
 80035dc:	e015      	b.n	800360a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035de:	4b29      	ldr	r3, [pc, #164]	@ (8003684 <HAL_RCC_OscConfig+0x2a4>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e4:	f7fe fede 	bl	80023a4 <HAL_GetTick>
 80035e8:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ec:	f7fe feda 	bl	80023a4 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e135      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 8003600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8087 	beq.w	8003726 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003618:	2300      	movs	r3, #0
 800361a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361e:	4b16      	ldr	r3, [pc, #88]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d110      	bne.n	800364c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	4b12      	ldr	r3, [pc, #72]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	4a11      	ldr	r2, [pc, #68]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003638:	6413      	str	r3, [r2, #64]	@ 0x40
 800363a:	4b0f      	ldr	r3, [pc, #60]	@ (8003678 <HAL_RCC_OscConfig+0x298>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800364c:	4b0e      	ldr	r3, [pc, #56]	@ (8003688 <HAL_RCC_OscConfig+0x2a8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0d      	ldr	r2, [pc, #52]	@ (8003688 <HAL_RCC_OscConfig+0x2a8>)
 8003652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003656:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <HAL_RCC_OscConfig+0x2a8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d122      	bne.n	80036aa <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003664:	4b08      	ldr	r3, [pc, #32]	@ (8003688 <HAL_RCC_OscConfig+0x2a8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a07      	ldr	r2, [pc, #28]	@ (8003688 <HAL_RCC_OscConfig+0x2a8>)
 800366a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800366e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003670:	f7fe fe98 	bl	80023a4 <HAL_GetTick>
 8003674:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003676:	e012      	b.n	800369e <HAL_RCC_OscConfig+0x2be>
 8003678:	40023800 	.word	0x40023800
 800367c:	40023802 	.word	0x40023802
 8003680:	42470000 	.word	0x42470000
 8003684:	42470e80 	.word	0x42470e80
 8003688:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368c:	f7fe fe8a 	bl	80023a4 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e0e5      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369e:	4b75      	ldr	r3, [pc, #468]	@ (8003874 <HAL_RCC_OscConfig+0x494>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	4b72      	ldr	r3, [pc, #456]	@ (8003878 <HAL_RCC_OscConfig+0x498>)
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036bc:	f7fe fe72 	bl	80023a4 <HAL_GetTick>
 80036c0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c2:	e00a      	b.n	80036da <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fe fe6e 	bl	80023a4 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e0c7      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036da:	4b68      	ldr	r3, [pc, #416]	@ (800387c <HAL_RCC_OscConfig+0x49c>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0ee      	beq.n	80036c4 <HAL_RCC_OscConfig+0x2e4>
 80036e6:	e014      	b.n	8003712 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e8:	f7fe fe5c 	bl	80023a4 <HAL_GetTick>
 80036ec:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f0:	f7fe fe58 	bl	80023a4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e0b1      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003706:	4b5d      	ldr	r3, [pc, #372]	@ (800387c <HAL_RCC_OscConfig+0x49c>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ee      	bne.n	80036f0 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003712:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003716:	2b01      	cmp	r3, #1
 8003718:	d105      	bne.n	8003726 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371a:	4b58      	ldr	r3, [pc, #352]	@ (800387c <HAL_RCC_OscConfig+0x49c>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	4a57      	ldr	r2, [pc, #348]	@ (800387c <HAL_RCC_OscConfig+0x49c>)
 8003720:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003724:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 809c 	beq.w	8003868 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003730:	4b52      	ldr	r3, [pc, #328]	@ (800387c <HAL_RCC_OscConfig+0x49c>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b08      	cmp	r3, #8
 800373a:	d061      	beq.n	8003800 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d146      	bne.n	80037d2 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003744:	4b4e      	ldr	r3, [pc, #312]	@ (8003880 <HAL_RCC_OscConfig+0x4a0>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374a:	f7fe fe2b 	bl	80023a4 <HAL_GetTick>
 800374e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003752:	f7fe fe27 	bl	80023a4 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b64      	cmp	r3, #100	@ 0x64
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e082      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003764:	4b45      	ldr	r3, [pc, #276]	@ (800387c <HAL_RCC_OscConfig+0x49c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1f0      	bne.n	8003752 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003770:	4b42      	ldr	r3, [pc, #264]	@ (800387c <HAL_RCC_OscConfig+0x49c>)
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	4b43      	ldr	r3, [pc, #268]	@ (8003884 <HAL_RCC_OscConfig+0x4a4>)
 8003776:	4013      	ands	r3, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	69d1      	ldr	r1, [r2, #28]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6a12      	ldr	r2, [r2, #32]
 8003780:	4311      	orrs	r1, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003786:	0192      	lsls	r2, r2, #6
 8003788:	4311      	orrs	r1, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800378e:	0612      	lsls	r2, r2, #24
 8003790:	4311      	orrs	r1, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003796:	0852      	lsrs	r2, r2, #1
 8003798:	3a01      	subs	r2, #1
 800379a:	0412      	lsls	r2, r2, #16
 800379c:	430a      	orrs	r2, r1
 800379e:	4937      	ldr	r1, [pc, #220]	@ (800387c <HAL_RCC_OscConfig+0x49c>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a4:	4b36      	ldr	r3, [pc, #216]	@ (8003880 <HAL_RCC_OscConfig+0x4a0>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037aa:	f7fe fdfb 	bl	80023a4 <HAL_GetTick>
 80037ae:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b2:	f7fe fdf7 	bl	80023a4 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b64      	cmp	r3, #100	@ 0x64
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e052      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c4:	4b2d      	ldr	r3, [pc, #180]	@ (800387c <HAL_RCC_OscConfig+0x49c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCC_OscConfig+0x3d2>
 80037d0:	e04a      	b.n	8003868 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003880 <HAL_RCC_OscConfig+0x4a0>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fe fde4 	bl	80023a4 <HAL_GetTick>
 80037dc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e0:	f7fe fde0 	bl	80023a4 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	@ 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e03b      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f2:	4b22      	ldr	r3, [pc, #136]	@ (800387c <HAL_RCC_OscConfig+0x49c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x400>
 80037fe:	e033      	b.n	8003868 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e02e      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800380c:	4b1b      	ldr	r3, [pc, #108]	@ (800387c <HAL_RCC_OscConfig+0x49c>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	429a      	cmp	r2, r3
 800381e:	d121      	bne.n	8003864 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382a:	429a      	cmp	r2, r3
 800382c:	d11a      	bne.n	8003864 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003834:	4013      	ands	r3, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800383a:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800383c:	4293      	cmp	r3, r2
 800383e:	d111      	bne.n	8003864 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	3b01      	subs	r3, #1
 800384e:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d107      	bne.n	8003864 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385e:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3728      	adds	r7, #40	@ 0x28
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40007000 	.word	0x40007000
 8003878:	40023870 	.word	0x40023870
 800387c:	40023800 	.word	0x40023800
 8003880:	42470060 	.word	0x42470060
 8003884:	f0bc8000 	.word	0xf0bc8000

08003888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0d2      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800389c:	4b6b      	ldr	r3, [pc, #428]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d90c      	bls.n	80038c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b68      	ldr	r3, [pc, #416]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b66      	ldr	r3, [pc, #408]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0be      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038dc:	4b5c      	ldr	r3, [pc, #368]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a5b      	ldr	r2, [pc, #364]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 80038e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80038f4:	4b56      	ldr	r3, [pc, #344]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4a55      	ldr	r2, [pc, #340]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 80038fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003900:	4b53      	ldr	r3, [pc, #332]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4950      	ldr	r1, [pc, #320]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d040      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	4b4a      	ldr	r3, [pc, #296]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d115      	bne.n	800395e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e085      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d107      	bne.n	800394e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393e:	4b44      	ldr	r3, [pc, #272]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e079      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394e:	4b40      	ldr	r3, [pc, #256]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e071      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 0203 	bic.w	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4939      	ldr	r1, [pc, #228]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 800396c:	4313      	orrs	r3, r2
 800396e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003970:	f7fe fd18 	bl	80023a4 <HAL_GetTick>
 8003974:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	e00a      	b.n	800398e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003978:	f7fe fd14 	bl	80023a4 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e059      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398e:	4b30      	ldr	r3, [pc, #192]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 020c 	and.w	r2, r3, #12
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	429a      	cmp	r2, r3
 800399e:	d1eb      	bne.n	8003978 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d20c      	bcs.n	80039c8 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b27      	ldr	r3, [pc, #156]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b25      	ldr	r3, [pc, #148]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e03c      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	491b      	ldr	r1, [pc, #108]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f2:	4b17      	ldr	r3, [pc, #92]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4913      	ldr	r1, [pc, #76]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003a06:	f000 f82b 	bl	8003a60 <HAL_RCC_GetSysClockFreq>
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	4b10      	ldr	r3, [pc, #64]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a14:	22f0      	movs	r2, #240	@ 0xf0
 8003a16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	fa92 f2a2 	rbit	r2, r2
 8003a1e:	60fa      	str	r2, [r7, #12]
  return result;
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	fab2 f282 	clz	r2, r2
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	40d3      	lsrs	r3, r2
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a54 <HAL_RCC_ClockConfig+0x1cc>)
 8003a2c:	5cd3      	ldrb	r3, [r2, r3]
 8003a2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a32:	4a09      	ldr	r2, [pc, #36]	@ (8003a58 <HAL_RCC_ClockConfig+0x1d0>)
 8003a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a36:	4b09      	ldr	r3, [pc, #36]	@ (8003a5c <HAL_RCC_ClockConfig+0x1d4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fc70 	bl	8002320 <HAL_InitTick>

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40023c00 	.word	0x40023c00
 8003a50:	40023800 	.word	0x40023800
 8003a54:	08004ac0 	.word	0x08004ac0
 8003a58:	2000000c 	.word	0x2000000c
 8003a5c:	20000010 	.word	0x20000010

08003a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a64:	b090      	sub	sp, #64	@ 0x40
 8003a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a70:	2300      	movs	r3, #0
 8003a72:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a78:	4b59      	ldr	r3, [pc, #356]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 030c 	and.w	r3, r3, #12
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d00d      	beq.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	f200 80a2 	bhi.w	8003bce <HAL_RCC_GetSysClockFreq+0x16e>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0x34>
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d003      	beq.n	8003a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a92:	e09c      	b.n	8003bce <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a94:	4b53      	ldr	r3, [pc, #332]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a96:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003a98:	e09c      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a9a:	4b53      	ldr	r3, [pc, #332]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a9e:	e099      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa0:	4b4f      	ldr	r3, [pc, #316]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aa8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aaa:	4b4d      	ldr	r3, [pc, #308]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d027      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	099b      	lsrs	r3, r3, #6
 8003abc:	2200      	movs	r2, #0
 8003abe:	623b      	str	r3, [r7, #32]
 8003ac0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4b47      	ldr	r3, [pc, #284]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003acc:	fb03 f201 	mul.w	r2, r3, r1
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	fb00 f303 	mul.w	r3, r0, r3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	4a43      	ldr	r2, [pc, #268]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ada:	fba0 2102 	umull	r2, r1, r0, r2
 8003ade:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003ae0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ae4:	4413      	add	r3, r2
 8003ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aea:	2200      	movs	r2, #0
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	61fa      	str	r2, [r7, #28]
 8003af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003af4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003af8:	f7fd fa3e 	bl	8000f78 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4613      	mov	r3, r2
 8003b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b04:	e055      	b.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b06:	4b36      	ldr	r3, [pc, #216]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	099b      	lsrs	r3, r3, #6
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	617a      	str	r2, [r7, #20]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b18:	f04f 0b00 	mov.w	fp, #0
 8003b1c:	4652      	mov	r2, sl
 8003b1e:	465b      	mov	r3, fp
 8003b20:	f04f 0000 	mov.w	r0, #0
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	0159      	lsls	r1, r3, #5
 8003b2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b2e:	0150      	lsls	r0, r2, #5
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	ebb2 080a 	subs.w	r8, r2, sl
 8003b38:	eb63 090b 	sbc.w	r9, r3, fp
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b48:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b4c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b50:	ebb2 0408 	subs.w	r4, r2, r8
 8003b54:	eb63 0509 	sbc.w	r5, r3, r9
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	00eb      	lsls	r3, r5, #3
 8003b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b66:	00e2      	lsls	r2, r4, #3
 8003b68:	4614      	mov	r4, r2
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	eb14 030a 	adds.w	r3, r4, sl
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	eb45 030b 	adc.w	r3, r5, fp
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b84:	4629      	mov	r1, r5
 8003b86:	028b      	lsls	r3, r1, #10
 8003b88:	4620      	mov	r0, r4
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003b92:	4601      	mov	r1, r0
 8003b94:	028a      	lsls	r2, r1, #10
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	60fa      	str	r2, [r7, #12]
 8003ba2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ba6:	f7fd f9e7 	bl	8000f78 <__aeabi_uldivmod>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4613      	mov	r3, r2
 8003bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	0c1b      	lsrs	r3, r3, #16
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003bc2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bcc:	e002      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bce:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3740      	adds	r7, #64	@ 0x40
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be0:	40023800 	.word	0x40023800
 8003be4:	00f42400 	.word	0x00f42400
 8003be8:	017d7840 	.word	0x017d7840

08003bec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e041      	b.n	8003c82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fe fa00 	bl	8002018 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3304      	adds	r3, #4
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	f000 fc0a 	bl	8004444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d109      	bne.n	8003cb0 <HAL_TIM_PWM_Start+0x24>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	e022      	b.n	8003cf6 <HAL_TIM_PWM_Start+0x6a>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d109      	bne.n	8003cca <HAL_TIM_PWM_Start+0x3e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	bf14      	ite	ne
 8003cc2:	2301      	movne	r3, #1
 8003cc4:	2300      	moveq	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	e015      	b.n	8003cf6 <HAL_TIM_PWM_Start+0x6a>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d109      	bne.n	8003ce4 <HAL_TIM_PWM_Start+0x58>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	bf14      	ite	ne
 8003cdc:	2301      	movne	r3, #1
 8003cde:	2300      	moveq	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	e008      	b.n	8003cf6 <HAL_TIM_PWM_Start+0x6a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	bf14      	ite	ne
 8003cf0:	2301      	movne	r3, #1
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e07c      	b.n	8003df8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_PWM_Start+0x82>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d0c:	e013      	b.n	8003d36 <HAL_TIM_PWM_Start+0xaa>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_PWM_Start+0x92>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d1c:	e00b      	b.n	8003d36 <HAL_TIM_PWM_Start+0xaa>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_PWM_Start+0xa2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d2c:	e003      	b.n	8003d36 <HAL_TIM_PWM_Start+0xaa>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	6839      	ldr	r1, [r7, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fdd6 	bl	80048f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a2d      	ldr	r2, [pc, #180]	@ (8003e00 <HAL_TIM_PWM_Start+0x174>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d004      	beq.n	8003d58 <HAL_TIM_PWM_Start+0xcc>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2c      	ldr	r2, [pc, #176]	@ (8003e04 <HAL_TIM_PWM_Start+0x178>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d101      	bne.n	8003d5c <HAL_TIM_PWM_Start+0xd0>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <HAL_TIM_PWM_Start+0xd2>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d007      	beq.n	8003d72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a22      	ldr	r2, [pc, #136]	@ (8003e00 <HAL_TIM_PWM_Start+0x174>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d022      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0x136>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d84:	d01d      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0x136>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e08 <HAL_TIM_PWM_Start+0x17c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d018      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0x136>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <HAL_TIM_PWM_Start+0x180>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0x136>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e10 <HAL_TIM_PWM_Start+0x184>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00e      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0x136>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a16      	ldr	r2, [pc, #88]	@ (8003e04 <HAL_TIM_PWM_Start+0x178>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d009      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0x136>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a18      	ldr	r2, [pc, #96]	@ (8003e14 <HAL_TIM_PWM_Start+0x188>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d004      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0x136>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a16      	ldr	r2, [pc, #88]	@ (8003e18 <HAL_TIM_PWM_Start+0x18c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d111      	bne.n	8003de6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b06      	cmp	r3, #6
 8003dd2:	d010      	beq.n	8003df6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de4:	e007      	b.n	8003df6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0201 	orr.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40010400 	.word	0x40010400
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40000c00 	.word	0x40000c00
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40001800 	.word	0x40001800

08003e1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e097      	b.n	8003f60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d106      	bne.n	8003e4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7fe f86d 	bl	8001f24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e60:	f023 0307 	bic.w	r3, r3, #7
 8003e64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f000 fae7 	bl	8004444 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e9e:	f023 0303 	bic.w	r3, r3, #3
 8003ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003ebc:	f023 030c 	bic.w	r3, r3, #12
 8003ec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ec8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	011a      	lsls	r2, r3, #4
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	031b      	lsls	r3, r3, #12
 8003eec:	4313      	orrs	r3, r2
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003efa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003f90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d110      	bne.n	8003fba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d102      	bne.n	8003fa4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f9e:	7b7b      	ldrb	r3, [r7, #13]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d001      	beq.n	8003fa8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e069      	b.n	800407c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fb8:	e031      	b.n	800401e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d110      	bne.n	8003fe2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fc0:	7bbb      	ldrb	r3, [r7, #14]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d102      	bne.n	8003fcc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fc6:	7b3b      	ldrb	r3, [r7, #12]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d001      	beq.n	8003fd0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e055      	b.n	800407c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fe0:	e01d      	b.n	800401e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d108      	bne.n	8003ffa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fe8:	7bbb      	ldrb	r3, [r7, #14]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d105      	bne.n	8003ffa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fee:	7b7b      	ldrb	r3, [r7, #13]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d102      	bne.n	8003ffa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ff4:	7b3b      	ldrb	r3, [r7, #12]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d001      	beq.n	8003ffe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e03e      	b.n	800407c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2202      	movs	r2, #2
 800400a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2202      	movs	r2, #2
 8004012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2202      	movs	r2, #2
 800401a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_TIM_Encoder_Start+0xc4>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2b04      	cmp	r3, #4
 8004028:	d008      	beq.n	800403c <HAL_TIM_Encoder_Start+0xd4>
 800402a:	e00f      	b.n	800404c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2201      	movs	r2, #1
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fc5b 	bl	80048f0 <TIM_CCxChannelCmd>
      break;
 800403a:	e016      	b.n	800406a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2201      	movs	r2, #1
 8004042:	2104      	movs	r1, #4
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fc53 	bl	80048f0 <TIM_CCxChannelCmd>
      break;
 800404a:	e00e      	b.n	800406a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2201      	movs	r2, #1
 8004052:	2100      	movs	r1, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fc4b 	bl	80048f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2201      	movs	r2, #1
 8004060:	2104      	movs	r1, #4
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fc44 	bl	80048f0 <TIM_CCxChannelCmd>
      break;
 8004068:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0201 	orr.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d020      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d01b      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0202 	mvn.w	r2, #2
 80040b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f99c 	bl	800440c <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f98f 	bl	80043fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f99e 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d020      	beq.n	8004134 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01b      	beq.n	8004134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0204 	mvn.w	r2, #4
 8004104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2202      	movs	r2, #2
 800410a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f976 	bl	800440c <HAL_TIM_IC_CaptureCallback>
 8004120:	e005      	b.n	800412e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f969 	bl	80043fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f978 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d020      	beq.n	8004180 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01b      	beq.n	8004180 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0208 	mvn.w	r2, #8
 8004150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2204      	movs	r2, #4
 8004156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f950 	bl	800440c <HAL_TIM_IC_CaptureCallback>
 800416c:	e005      	b.n	800417a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f943 	bl	80043fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f952 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d020      	beq.n	80041cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01b      	beq.n	80041cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0210 	mvn.w	r2, #16
 800419c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2208      	movs	r2, #8
 80041a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f92a 	bl	800440c <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f91d 	bl	80043fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f92c 	bl	800441e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00c      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0201 	mvn.w	r2, #1
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f8fc 	bl	80043e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00c      	beq.n	8004214 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004200:	2b00      	cmp	r3, #0
 8004202:	d007      	beq.n	8004214 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800420c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fc15 	bl	8004a3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00c      	beq.n	8004238 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f8fc 	bl	8004430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0220 	mvn.w	r2, #32
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fbe8 	bl	8004a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800427e:	2302      	movs	r3, #2
 8004280:	e0ae      	b.n	80043e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	f200 809f 	bhi.w	80043d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004292:	a201      	add	r2, pc, #4	@ (adr r2, 8004298 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042cd 	.word	0x080042cd
 800429c:	080043d1 	.word	0x080043d1
 80042a0:	080043d1 	.word	0x080043d1
 80042a4:	080043d1 	.word	0x080043d1
 80042a8:	0800430d 	.word	0x0800430d
 80042ac:	080043d1 	.word	0x080043d1
 80042b0:	080043d1 	.word	0x080043d1
 80042b4:	080043d1 	.word	0x080043d1
 80042b8:	0800434f 	.word	0x0800434f
 80042bc:	080043d1 	.word	0x080043d1
 80042c0:	080043d1 	.word	0x080043d1
 80042c4:	080043d1 	.word	0x080043d1
 80042c8:	0800438f 	.word	0x0800438f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f960 	bl	8004598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0208 	orr.w	r2, r2, #8
 80042e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0204 	bic.w	r2, r2, #4
 80042f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	619a      	str	r2, [r3, #24]
      break;
 800430a:	e064      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f9b0 	bl	8004678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	021a      	lsls	r2, r3, #8
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	619a      	str	r2, [r3, #24]
      break;
 800434c:	e043      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fa03 	bl	8004760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0208 	orr.w	r2, r2, #8
 8004368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0204 	bic.w	r2, r2, #4
 8004378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69d9      	ldr	r1, [r3, #28]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	61da      	str	r2, [r3, #28]
      break;
 800438c:	e023      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fa57 	bl	8004848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	021a      	lsls	r2, r3, #8
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	61da      	str	r2, [r3, #28]
      break;
 80043ce:	e002      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	75fb      	strb	r3, [r7, #23]
      break;
 80043d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr

080043fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr

0800441e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr
	...

08004444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a45      	ldr	r2, [pc, #276]	@ (800456c <TIM_Base_SetConfig+0x128>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004462:	d00f      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a42      	ldr	r2, [pc, #264]	@ (8004570 <TIM_Base_SetConfig+0x12c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00b      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a41      	ldr	r2, [pc, #260]	@ (8004574 <TIM_Base_SetConfig+0x130>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d007      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a40      	ldr	r2, [pc, #256]	@ (8004578 <TIM_Base_SetConfig+0x134>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a3f      	ldr	r2, [pc, #252]	@ (800457c <TIM_Base_SetConfig+0x138>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d108      	bne.n	8004496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800448a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a34      	ldr	r2, [pc, #208]	@ (800456c <TIM_Base_SetConfig+0x128>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d02b      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a4:	d027      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a31      	ldr	r2, [pc, #196]	@ (8004570 <TIM_Base_SetConfig+0x12c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d023      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a30      	ldr	r2, [pc, #192]	@ (8004574 <TIM_Base_SetConfig+0x130>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d01f      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004578 <TIM_Base_SetConfig+0x134>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01b      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <TIM_Base_SetConfig+0x138>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d017      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004580 <TIM_Base_SetConfig+0x13c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004584 <TIM_Base_SetConfig+0x140>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00f      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004588 <TIM_Base_SetConfig+0x144>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00b      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2a      	ldr	r2, [pc, #168]	@ (800458c <TIM_Base_SetConfig+0x148>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d007      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a29      	ldr	r2, [pc, #164]	@ (8004590 <TIM_Base_SetConfig+0x14c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d003      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a28      	ldr	r2, [pc, #160]	@ (8004594 <TIM_Base_SetConfig+0x150>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d108      	bne.n	8004508 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a0f      	ldr	r2, [pc, #60]	@ (800456c <TIM_Base_SetConfig+0x128>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_Base_SetConfig+0xf8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a11      	ldr	r2, [pc, #68]	@ (800457c <TIM_Base_SetConfig+0x138>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d103      	bne.n	8004544 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d105      	bne.n	8004562 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f023 0201 	bic.w	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	611a      	str	r2, [r3, #16]
  }
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	40010000 	.word	0x40010000
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800
 8004578:	40000c00 	.word	0x40000c00
 800457c:	40010400 	.word	0x40010400
 8004580:	40014000 	.word	0x40014000
 8004584:	40014400 	.word	0x40014400
 8004588:	40014800 	.word	0x40014800
 800458c:	40001800 	.word	0x40001800
 8004590:	40001c00 	.word	0x40001c00
 8004594:	40002000 	.word	0x40002000

08004598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f023 0201 	bic.w	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f023 0302 	bic.w	r3, r3, #2
 80045e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a20      	ldr	r2, [pc, #128]	@ (8004670 <TIM_OC1_SetConfig+0xd8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d003      	beq.n	80045fc <TIM_OC1_SetConfig+0x64>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004674 <TIM_OC1_SetConfig+0xdc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d10c      	bne.n	8004616 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f023 0308 	bic.w	r3, r3, #8
 8004602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f023 0304 	bic.w	r3, r3, #4
 8004614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a15      	ldr	r2, [pc, #84]	@ (8004670 <TIM_OC1_SetConfig+0xd8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <TIM_OC1_SetConfig+0x8e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a14      	ldr	r2, [pc, #80]	@ (8004674 <TIM_OC1_SetConfig+0xdc>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d111      	bne.n	800464a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800462c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	621a      	str	r2, [r3, #32]
}
 8004664:	bf00      	nop
 8004666:	371c      	adds	r7, #28
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40010000 	.word	0x40010000
 8004674:	40010400 	.word	0x40010400

08004678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	f023 0210 	bic.w	r2, r3, #16
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f023 0320 	bic.w	r3, r3, #32
 80046c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a21      	ldr	r2, [pc, #132]	@ (8004758 <TIM_OC2_SetConfig+0xe0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_OC2_SetConfig+0x68>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a20      	ldr	r2, [pc, #128]	@ (800475c <TIM_OC2_SetConfig+0xe4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10d      	bne.n	80046fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a16      	ldr	r2, [pc, #88]	@ (8004758 <TIM_OC2_SetConfig+0xe0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d003      	beq.n	800470c <TIM_OC2_SetConfig+0x94>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a15      	ldr	r2, [pc, #84]	@ (800475c <TIM_OC2_SetConfig+0xe4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d113      	bne.n	8004734 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800471a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr
 8004758:	40010000 	.word	0x40010000
 800475c:	40010400 	.word	0x40010400

08004760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0303 	bic.w	r3, r3, #3
 8004796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a21      	ldr	r2, [pc, #132]	@ (8004840 <TIM_OC3_SetConfig+0xe0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d003      	beq.n	80047c6 <TIM_OC3_SetConfig+0x66>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a20      	ldr	r2, [pc, #128]	@ (8004844 <TIM_OC3_SetConfig+0xe4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d10d      	bne.n	80047e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a16      	ldr	r2, [pc, #88]	@ (8004840 <TIM_OC3_SetConfig+0xe0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d003      	beq.n	80047f2 <TIM_OC3_SetConfig+0x92>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a15      	ldr	r2, [pc, #84]	@ (8004844 <TIM_OC3_SetConfig+0xe4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d113      	bne.n	800481a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	621a      	str	r2, [r3, #32]
}
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	bc80      	pop	{r7}
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40010000 	.word	0x40010000
 8004844:	40010400 	.word	0x40010400

08004848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800487e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	021b      	lsls	r3, r3, #8
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	031b      	lsls	r3, r3, #12
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a11      	ldr	r2, [pc, #68]	@ (80048e8 <TIM_OC4_SetConfig+0xa0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d003      	beq.n	80048b0 <TIM_OC4_SetConfig+0x68>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a10      	ldr	r2, [pc, #64]	@ (80048ec <TIM_OC4_SetConfig+0xa4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d109      	bne.n	80048c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	019b      	lsls	r3, r3, #6
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	621a      	str	r2, [r3, #32]
}
 80048de:	bf00      	nop
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40010400 	.word	0x40010400

080048f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	2201      	movs	r2, #1
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a1a      	ldr	r2, [r3, #32]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	43db      	mvns	r3, r3
 8004912:	401a      	ands	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a1a      	ldr	r2, [r3, #32]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	fa01 f303 	lsl.w	r3, r1, r3
 8004928:	431a      	orrs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	bf00      	nop
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr

08004938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800494c:	2302      	movs	r3, #2
 800494e:	e05a      	b.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a20      	ldr	r2, [pc, #128]	@ (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d022      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499c:	d01d      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d018      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a19      	ldr	r2, [pc, #100]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00e      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a17      	ldr	r2, [pc, #92]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a16      	ldr	r2, [pc, #88]	@ (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a14      	ldr	r2, [pc, #80]	@ (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d10c      	bne.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr
 8004a10:	40010000 	.word	0x40010000
 8004a14:	40000400 	.word	0x40000400
 8004a18:	40000800 	.word	0x40000800
 8004a1c:	40000c00 	.word	0x40000c00
 8004a20:	40010400 	.word	0x40010400
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40001800 	.word	0x40001800

08004a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <memset>:
 8004a50:	4603      	mov	r3, r0
 8004a52:	4402      	add	r2, r0
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d100      	bne.n	8004a5a <memset+0xa>
 8004a58:	4770      	bx	lr
 8004a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5e:	e7f9      	b.n	8004a54 <memset+0x4>

08004a60 <__libc_init_array>:
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	2600      	movs	r6, #0
 8004a64:	4d0c      	ldr	r5, [pc, #48]	@ (8004a98 <__libc_init_array+0x38>)
 8004a66:	4c0d      	ldr	r4, [pc, #52]	@ (8004a9c <__libc_init_array+0x3c>)
 8004a68:	1b64      	subs	r4, r4, r5
 8004a6a:	10a4      	asrs	r4, r4, #2
 8004a6c:	42a6      	cmp	r6, r4
 8004a6e:	d109      	bne.n	8004a84 <__libc_init_array+0x24>
 8004a70:	f000 f81a 	bl	8004aa8 <_init>
 8004a74:	2600      	movs	r6, #0
 8004a76:	4d0a      	ldr	r5, [pc, #40]	@ (8004aa0 <__libc_init_array+0x40>)
 8004a78:	4c0a      	ldr	r4, [pc, #40]	@ (8004aa4 <__libc_init_array+0x44>)
 8004a7a:	1b64      	subs	r4, r4, r5
 8004a7c:	10a4      	asrs	r4, r4, #2
 8004a7e:	42a6      	cmp	r6, r4
 8004a80:	d105      	bne.n	8004a8e <__libc_init_array+0x2e>
 8004a82:	bd70      	pop	{r4, r5, r6, pc}
 8004a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a88:	4798      	blx	r3
 8004a8a:	3601      	adds	r6, #1
 8004a8c:	e7ee      	b.n	8004a6c <__libc_init_array+0xc>
 8004a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a92:	4798      	blx	r3
 8004a94:	3601      	adds	r6, #1
 8004a96:	e7f2      	b.n	8004a7e <__libc_init_array+0x1e>
 8004a98:	08004ae0 	.word	0x08004ae0
 8004a9c:	08004ae0 	.word	0x08004ae0
 8004aa0:	08004ae0 	.word	0x08004ae0
 8004aa4:	08004ae4 	.word	0x08004ae4

08004aa8 <_init>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	bf00      	nop
 8004aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aae:	bc08      	pop	{r3}
 8004ab0:	469e      	mov	lr, r3
 8004ab2:	4770      	bx	lr

08004ab4 <_fini>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	bf00      	nop
 8004ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aba:	bc08      	pop	{r3}
 8004abc:	469e      	mov	lr, r3
 8004abe:	4770      	bx	lr
